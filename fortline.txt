-- Souls Hub | Fortline (Expanded)
-- Converted to Souls Hub UI and extended with: Aimbot, Noclip, WalkSpeed, JumpPower
-- Use responsibly.

local SoulsHub = loadstring(game:HttpGet("https://pandadevelopment.net/virtual/file/e7f388d3c065df7a"))()
SoulsHub:Loader(nil, 1).yield()

local Players = game:GetService("Players")
local RepStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local lp = Players.LocalPlayer
local mouse = lp:GetMouse()

local WeaponsRemote = RepStorage:WaitForChild("WeaponsSystem").Network.WeaponHit

-- Window setup
local Window = SoulsHub.new({
    Keybind = "LeftAlt", -- toggle UI
})
Window.Username = lp.Name

local watermark = Window:Watermark()
watermark:AddText({ Icon = "user", Text = lp.Name })
watermark:AddText({ Icon = "clock", Text = SoulsHub:GetTimeNow() })
watermark:AddText({ Icon = "server", Text = "Fortline" })
Window:Update({
    ExpireDate = SoulsHub:GetDate(tick() + 86400)
})

-- Config
local FileWatcher = SoulsHub:ConfigManager({
    Directory = "SoulsHub",
    Config = "Fortline"
})

-- Tabs
local killTab = Window:DrawTab({
    Icon = "skull",
    Name = "Kill",
    Type = "Double"
})

local miscTab = Window:DrawTab({
    Icon = "magic",
    Name = "Misc",
    Type = "Double"
})

local settingsTab = Window:DrawTab({
    Icon = "settings",
    Name = "Settings",
    Type = "Single"
})

-- Variables for kill logic
getgenv().KillAllLoop = false
getgenv().KillSelectedLoop = false
getgenv().KillDelay = 0.05
local selectedPlayerName = nil
local killTask = nil
local equipMonitor = nil
local isEquipped = false

-- Variables for new features
getgenv().AimbotEnabled = false
getgenv().AimbotHoldKey = "Mouse1" -- default: left mouse
getgenv().AimbotRange = 1000
getgenv().NoclipEnabled = false
getgenv().WalkSpeed = 16
getgenv().JumpPower = 50
getgenv().AimbotSmoothness = 0 -- 0 = instant

-- Utility function: get players list
local function GetPlayerList()
    local list = {}
    for _, plr in pairs(Players:GetPlayers()) do
        if plr ~= lp then
            table.insert(list, plr.Name)
        end
    end
    return list
end

-- Kill loop helper functions (unchanged logic)
local function StopKillLoop()
    isEquipped = false
    if killTask then
        task.cancel(killTask)
        killTask = nil
    end
    if equipMonitor then
        task.cancel(equipMonitor)
        equipMonitor = nil
    end
    if lp.Character and lp.Character:FindFirstChild("Humanoid") then
        lp.Character.Humanoid:UnequipTools()
    end
end

local function StartKillLoop(tool, targetName)
    if not tool or killTask then return end
    isEquipped = true

    if lp.Character and lp.Character:FindFirstChild("Humanoid") then
        lp.Character.Humanoid:EquipTool(tool)
    end

    equipMonitor = task.spawn(function()
        while (getgenv().KillAllLoop or getgenv().KillSelectedLoop) and isEquipped do
            task.wait(0.05)
            if tool.Parent ~= lp.Character then
                if lp.Character and lp.Character:FindFirstChild("Humanoid") then
                    lp.Character.Humanoid:EquipTool(tool)
                end
            end
        end
    end)

    killTask = task.spawn(function()
        while (getgenv().KillAllLoop or getgenv().KillSelectedLoop) and isEquipped do
            task.wait(getgenv().KillDelay)
            if not lp.Character or not lp.Character:FindFirstChild("HumanoidRootPart") then continue end
            local targets = {}
            if getgenv().KillAllLoop then
                for _, plr in pairs(Players:GetPlayers()) do
                    if plr ~= lp and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                        table.insert(targets, plr)
                    end
                end
            elseif getgenv().KillSelectedLoop and selectedPlayerName then
                local plr = Players:FindFirstChild(selectedPlayerName)
                if plr and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                    table.insert(targets, plr)
                end
            end

            if #targets > 0 then
                local target = targets[math.random(1, #targets)]
                local hrp = target.Character:FindFirstChild("HumanoidRootPart")
                if hrp then
                    local args = {
                        [1] = tool,
                        [2] = {
                            ["p"] = hrp.Position,
                            ["pid"] = 1,
                            ["part"] = hrp,
                            ["d"] = 17.5,
                            ["maxDist"] = 17.5,
                            ["h"] = target.Character.Humanoid,
                            ["m"] = Enum.Material.Plastic,
                            ["sid"] = 14,
                            ["t"] = tick(),
                            ["n"] = Vector3.new(0, 0, -1)
                        }
                    }
                    pcall(function() WeaponsRemote:FireServer(unpack(args)) end)
                end
            end
        end
        killTask = nil
    end)
end

-- Kill Tab Sections
local playerSection = killTab:DrawSection({ Name = "Players", Position = "LEFT" })
local controlSection = killTab:DrawSection({ Name = "Controls", Position = "RIGHT" })

local playerDropdown = playerSection:AddDropdown({
    Name = "Select Player",
    Values = GetPlayerList(),
    Default = nil,
    Multi = false,
    Flag = "PlayerSelect",
    Callback = function(value)
        selectedPlayerName = value
    end
})

playerSection:AddButton({
    Name = "Refresh Player List",
    Callback = function()
        playerDropdown:SetValues(GetPlayerList())
        SoulsHub:ChangeHighlightColor(Color3.fromRGB(0, 195, 255))
    end
})

controlSection:AddSlider({
    Name = "Kill Delay",
    Min = 0.05,
    Max = 2,
    Round = 2,
    Default = 0.05,
    Flag = "KillDelay",
    Callback = function(v)
        getgenv().KillDelay = v
    end
})

controlSection:AddToggle({
    Name = "Kill All Loop",
    Flag = "KillAll",
    Callback = function(v)
        getgenv().KillAllLoop = v
        if v then
            local tool = (lp.Character and lp.Character:FindFirstChild("Sniper")) or (lp.Backpack and lp.Backpack:FindFirstChild("Sniper"))
            if tool then
                StartKillLoop(tool)
            else
                warn("Sniper not found!")
            end
        else
            StopKillLoop()
        end
    end
})

controlSection:AddToggle({
    Name = "Kill Selected Player",
    Flag = "KillSelected",
    Callback = function(v)
        getgenv().KillSelectedLoop = v
        if v and selectedPlayerName then
            local tool = (lp.Character and lp.Character:FindFirstChild("Sniper")) or (lp.Backpack and lp.Backpack:FindFirstChild("Sniper"))
            if tool then
                StartKillLoop(tool, selectedPlayerName)
            else
                warn("Sniper not found!")
            end
        else
            StopKillLoop()
        end
    end
})

-- Misc Tab: Aimbot, Noclip, Walk/Jump
local aimSection = miscTab:DrawSection({ Name = "Aimbot", Position = "LEFT" })
local miscLeft = miscTab:DrawSection({ Name = "Movement", Position = "RIGHT" })

-- Aimbot UI
aimSection:AddToggle({
    Name = "Enable Aimbot",
    Flag = "AimbotEnable",
    Callback = function(v)
        getgenv().AimbotEnabled = v
    end
})

aimSection:AddSlider({
    Name = "Aimbot Range",
    Min = 50,
    Max = 2000,
    Round = 0,
    Default = 1000,
    Flag = "AimbotRange",
    Callback = function(v)
        getgenv().AimbotRange = v
    end
})

aimSection:AddSlider({
    Name = "Aimbot Smoothness (0 instant)",
    Min = 0,
    Max = 0.5,
    Round = 3,
    Default = 0,
    Flag = "AimbotSmooth",
    Callback = function(v)
        getgenv().AimbotSmoothness = v
    end
})

aimSection:AddKeybind({
    Name = "Aim Hold Key",
    Default = nil,
    Callback = function(key)
        -- SoulsHub returns key names as strings (implementation dependent). Save string.
        if type(key) == "string" and key ~= "" then
            getgenv().AimbotHoldKey = key
        else
            getgenv().AimbotHoldKey = "Mouse1"
        end
    end
})

-- Movement UI (Noclip + Walk/Jump)
miscLeft:AddToggle({
    Name = "Noclip",
    Flag = "Noclip",
    Callback = function(v)
        getgenv().NoclipEnabled = v
    end
})

miscLeft:AddSlider({
    Name = "WalkSpeed",
    Min = 8,
    Max = 200,
    Round = 1,
    Default = 16,
    Flag = "WalkSpeed",
    Callback = function(v)
        getgenv().WalkSpeed = v
        if lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
            lp.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = v
        end
    end
})

miscLeft:AddSlider({
    Name = "JumpPower",
    Min = 20,
    Max = 300,
    Round = 1,
    Default = 50,
    Flag = "JumpPower",
    Callback = function(v)
        getgenv().JumpPower = v
        if lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
            lp.Character:FindFirstChildOfClass("Humanoid").JumpPower = v
        end
    end
})

miscLeft:AddButton({
    Name = "Reset Walk/Jump to Default",
    Callback = function()
        getgenv().WalkSpeed = 16
        getgenv().JumpPower = 50
        if lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
            local h = lp.Character:FindFirstChildOfClass("Humanoid")
            h.WalkSpeed = 16
            h.JumpPower = 50
        end
    end
})

-- Settings Tab Info
settingsTab:DrawSection({ Name = "About Souls Hub", Position = "LEFT" })
:AddParagraph({
    Title = "Souls Hub | Fortline",
    Content = "Created for Fortline with Souls UI.\nUse responsibly!"
})

Window:DrawConfig({
    Name = "Configs",
    Icon = "folder",
    Config = FileWatcher
})

-- Helper functions for aimbot
local function getCharacterRoot(plr)
    if not plr or not plr.Character then return nil end
    return plr.Character:FindFirstChild("HumanoidRootPart") or plr.Character:FindFirstChild("Torso") or plr.Character:FindFirstChild("UpperTorso")
end

local function isValidTarget(plr)
    if not plr or plr == lp then return false end
    local hrp = getCharacterRoot(plr)
    if not hrp then return false end
    if not plr.Character:FindFirstChildOfClass("Humanoid") then return false end
    if plr.Character:FindFirstChildOfClass("Humanoid").Health <= 0 then return false end
    local dist = (hrp.Position - (lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") and lp.Character.HumanoidRootPart.Position or workspace.CurrentCamera.CFrame.Position)).Magnitude
    if dist > getgenv().AimbotRange then return false end
    return true
end

local function findClosestPlayerToCursor()
    local best, bestDist = nil, math.huge
    local cam = workspace.CurrentCamera
    for _, plr in pairs(Players:GetPlayers()) do
        if isValidTarget(plr) then
            local hrp = getCharacterRoot(plr)
            local screenPos, onScreen = cam:WorldToViewportPoint(hrp.Position)
            if onScreen then
                local dx = screenPos.X - mouse.X
                local dy = screenPos.Y - mouse.Y
                local dist = math.sqrt(dx*dx + dy*dy)
                if dist < bestDist then
                    bestDist = dist
                    best = plr
                end
            end
        end
    end
    return best
end

-- Aimbot loop / renderer
local aiming = false
local function aimAt(target)
    if not target or not target.Character then return end
    local hrp = getCharacterRoot(target)
    if not hrp then return end
    local cam = workspace.CurrentCamera
    local camPos = cam.CFrame.Position
    local goalCFrame = CFrame.new(camPos, hrp.Position)
    if getgenv().AimbotSmoothness and getgenv().AimbotSmoothness > 0 then
        -- smooth interp
        local current = cam.CFrame
        local newCF = current:Lerp(goalCFrame, math.clamp(1 - getgenv().AimbotSmoothness, 0, 1))
        workspace.CurrentCamera.CFrame = newCF
    else
        workspace.CurrentCamera.CFrame = goalCFrame
    end
end

-- Track input state for aimbot hold key
local inputDown = false
mouse.Button1Down:Connect(function() inputDown = true end)
mouse.Button1Up:Connect(function() inputDown = false end)

-- If SoulsHub keybind returns different format, it might call callback with key enum — kept generic above.

-- Noclip loop
local noclipConn = nil
local function noclipLoop()
    if noclipConn then return end
    noclipConn = RunService.Stepped:Connect(function()
        if getgenv().NoclipEnabled and lp.Character then
            for _, part in pairs(lp.Character:GetDescendants()) do
                if part:IsA("BasePart") and part.CanCollide == true then
                    part.CanCollide = false
                end
            end
        end
    end)
end

-- Ensure noclip stops when disabled (we leave parts non-collidable until respawn; that's normal)
local function stopNoclip()
    if noclipConn then
        noclipConn:Disconnect()
        noclipConn = nil
    end
end

-- Apply movement settings on character spawn
local function applyMovementSettings()
    if lp.Character then
        local humanoid = lp.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = getgenv().WalkSpeed or 16
            humanoid.JumpPower = getgenv().JumpPower or 50
        end
    end
end

-- Character added listeners to reapply values
Players.LocalPlayer.CharacterAdded:Connect(function(char)
    task.wait(0.1)
    applyMovementSettings()
end)

-- Global renderer loop
RunService.RenderStepped:Connect(function()
    -- Aimbot active and hold key pressed
    if getgenv().AimbotEnabled then
        -- check hold key (support Mouse1 by default)
        local shouldAim = false
        if getgenv().AimbotHoldKey == "Mouse1" then
            shouldAim = inputDown
        else
            -- other key checks: attempt to use UserInputService
            pcall(function()
                local UIS = game:GetService("UserInputService")
                local keyName = getgenv().AimbotHoldKey
                if keyName and keyName ~= "" then
                    -- translate string to Enum.KeyCode if possible
                    local success, code = pcall(function() return Enum.KeyCode[keyName] end)
                    if success and code then
                        shouldAim = UIS:IsKeyDown(code)
                    end
                end
            end)
        end

        if shouldAim then
            local target = findClosestPlayerToCursor()
            if target then
                aimAt(target)
            end
        end
    end

    -- Noclip handling
    if getgenv().NoclipEnabled then
        -- start noclip if not started
        noclipLoop()
    else
        stopNoclip()
    end

    -- Ensure movement settings stay applied while in game (helps against server corrections)
    if lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
        local h = lp.Character:FindFirstChildOfClass("Humanoid")
        if h.WalkSpeed ~= getgenv().WalkSpeed then h.WalkSpeed = getgenv().WalkSpeed end
        if h.JumpPower ~= getgenv().JumpPower then h.JumpPower = getgenv().JumpPower end
    end
end)

-- Final print
print("Souls Hub | Fortline loaded successfully with aimbot, noclip, walk/jump changers.")
