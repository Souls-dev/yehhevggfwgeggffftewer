-- SOULS HUB - Hypershot Advanced Script
-- Comprehensive automation suite with optimized UI and features
local SoulsHub = loadstring(game:HttpGet("https://pandadevelopment.net/virtual/file/e7f388d3c065df7a"))();

task.wait(1)

SoulsHub:Loader(nil, 1).yield()

local FileWatcher = SoulsHub:ConfigManager({
    Directory = "SoulsHub",
    Config = "HypershotConfigs"
});

local Window = SoulsHub.new({
    Keybind = "LeftAlt",
});

local watermark = Window:Watermark();

watermark:AddText({
    Icon = "user",
    Text = "SOULS HUB"
})

local vim = watermark:AddText({
    Icon = "clock",
    Text = SoulsHub:GetTimeNow()
})

task.spawn(function()
    while true do
        task.wait()
        vim:SetText(SoulsHub:GetTimeNow())
        Window.Username = "SOULS HUB"
    end
end)

Window:Update({
    ExpireDate = SoulsHub:GetDate(tick() + 2592000) -- 30 days expiration
})

watermark:AddText({
    Icon = "server",
    Text = "v2.1.0"
})

-- Global state manager
local FeatureState = {
    AimbotEnabled = false,
    SilentAim = true,
    TargetTeam = true,
    TargetNPCs = true,
    WallCheck = true,
    VisibleCheck = true,
    FOVSize = 100,
    FOVVisible = true,
    TargetPart = "Head",
    Smoothness = 3,
    
    ESPEnabled = false,
    ESPMode = "3D Box",
    BoxEnabled = true,
    NameEnabled = true,
    HealthEnabled = true,
    DistanceEnabled = true,
    MaxDistance = 1000,
    ESPColor = Color3.fromRGB(255, 255, 255),
    ESPThickness = 2,
    GlowEnabled = false,
    GlowColor = Color3.fromRGB(0, 150, 255),
    GlowSize = 5,
    BoxWidth = 2.8,
    BoxHeight = 6,
    
    WalkSpeed = 16,
    JumpPower = 50,
    FlyEnabled = false,
    NoclipEnabled = false,
    
    FullBright = false,
    AutoFarm = false,
    FarmRange = 200,
    GodMode = true,
    AutoKill = false,
    AutoRespawn = false,
    BringHeads = false,
    Prediction = 0.15,
    RapidFire = false
}

-- Initialize global states
_G.FeatureState = FeatureState

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")
local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- Create UI structure
local Combat = Window:DrawTab({
    Icon = "crosshair",
    Name = "Combat",
    Type = "Double"
});

local Visuals = Window:DrawTab({
    Icon = "eye",
    Name = "Visuals",
    Type = "Double"
});

local Movement = Window:DrawTab({
    Icon = "run",
    Name = "Movement",
    Type = "Single"
});

local Farming = Window:DrawTab({
    Icon = "speed",
    Name = "Farming",
    Type = "Single"
});

local Utility = Window:DrawTab({
    Icon = "settings",
    Name = "Utility",
    Type = "Single"
});

-- Combat Tab Implementation
local combatMain = Combat:DrawSection({
    Name = "Aimbot",
    Position = "LEFT"
});

local combatOptions = Combat:DrawSection({
    Name = "Options",
    Position = "RIGHT"
});

-- Aimbot main features
local aimbotToggle = combatMain:AddToggle({
    Name = "Aimbot Enabled",
    Default = FeatureState.AimbotEnabled,
    Callback = function(state)
        FeatureState.AimbotEnabled = state
    end
});

aimbotToggle.Link:AddHelper({
    Text = "Enable aim assistance for better targeting"
});

combatMain:AddToggle({
    Name = "Silent Aim",
    Default = FeatureState.SilentAim,
    Callback = function(state)
        FeatureState.SilentAim = state
    end
});

combatMain:AddSlider({
    Name = "FOV Size",
    Min = 50,
    Max = 300,
    Default = FeatureState.FOVSize,
    Round = 0,
    Type = "studs",
    Callback = function(value)
        FeatureState.FOVSize = value
    end
});

combatMain:AddToggle({
    Name = "Show FOV Circle",
    Default = FeatureState.FOVVisible,
    Callback = function(state)
        FeatureState.FOVVisible = state
    end
});

combatMain:AddDropdown({
    Name = "Target Part",
    Values = {"Head", "HumanoidRootPart", "UpperTorso"},
    Default = FeatureState.TargetPart,
    Callback = function(value)
        FeatureState.TargetPart = value
    end
});

combatMain:AddSlider({
    Name = "Smoothness",
    Min = 1,
    Max = 10,
    Default = FeatureState.Smoothness,
    Round = 1,
    Type = "x",
    Callback = function(value)
        FeatureState.Smoothness = value
    end
});

-- Aimbot options
combatOptions:AddToggle({
    Name = "Team Check",
    Default = FeatureState.TargetTeam,
    Callback = function(state)
        FeatureState.TargetTeam = state
    end
});

combatOptions:AddToggle({
    Name = "NPC Check",
    Default = FeatureState.TargetNPCs,
    Callback = function(state)
        FeatureState.TargetNPCs = state
    end
});

combatOptions:AddToggle({
    Name = "Wall Check",
    Default = FeatureState.WallCheck,
    Callback = function(state)
        FeatureState.WallCheck = state
    end
});

combatOptions:AddToggle({
    Name = "Visible Check",
    Default = FeatureState.VisibleCheck,
    Callback = function(state)
        FeatureState.VisibleCheck = state
    end
});

combatOptions:AddSlider({
    Name = "Prediction",
    Min = 0,
    Max = 0.5,
    Default = FeatureState.Prediction,
    Round = 2,
    Type = "sec",
    Callback = function(value)
        FeatureState.Prediction = value
    end
});

combatOptions:AddToggle({
    Name = "Rapid Fire",
    Default = FeatureState.RapidFire,
    Callback = function(state)
        FeatureState.RapidFire = state
    end
});

-- Visuals Tab Implementation
local visualsMain = Visuals:DrawSection({
    Name = "ESP",
    Position = "LEFT"
});

local visualsOptions = Visuals:DrawSection({
    Name = "Settings",
    Position = "RIGHT"
});

-- ESP main features
local espToggle = visualsMain:AddToggle({
    Name = "ESP Enabled",
    Default = FeatureState.ESPEnabled,
    Callback = function(state)
        FeatureState.ESPEnabled = state
    end
});

espToggle.Link:AddHelper({
    Text = "Show player and NPC information on screen"
});

visualsMain:AddDropdown({
    Name = "ESP Mode",
    Values = {"Dot", "Skeleton", "3D Box"},
    Default = FeatureState.ESPMode,
    Callback = function(value)
        FeatureState.ESPMode = value
    end
});

visualsMain:AddToggle({
    Name = "Show Boxes",
    Default = FeatureState.BoxEnabled,
    Callback = function(state)
        FeatureState.BoxEnabled = state
    end
});

visualsMain:AddToggle({
    Name = "Show Names",
    Default = FeatureState.NameEnabled,
    Callback = function(state)
        FeatureState.NameEnabled = state
    end
});

visualsMain:AddToggle({
    Name = "Show Health",
    Default = FeatureState.HealthEnabled,
    Callback = function(state)
        FeatureState.HealthEnabled = state
    end
});

visualsMain:AddToggle({
    Name = "Show Distance",
    Default = FeatureState.DistanceEnabled,
    Callback = function(state)
        FeatureState.DistanceEnabled = state
    end
});

-- ESP settings
visualsOptions:AddColorPicker({
    Name = "ESP Color",
    Default = FeatureState.ESPColor,
    Callback = function(color)
        FeatureState.ESPColor = color
    end
});

visualsOptions:AddSlider({
    Name = "Max Distance",
    Min = 100,
    Max = 2000,
    Default = FeatureState.MaxDistance,
    Round = 0,
    Type = "studs",
    Callback = function(value)
        FeatureState.MaxDistance = value
    end
});

visualsOptions:AddSlider({
    Name = "Thickness",
    Min = 1,
    Max = 5,
    Default = FeatureState.ESPThickness,
    Round = 1,
    Type = "px",
    Callback = function(value)
        FeatureState.ESPThickness = value
    end
});

-- 3D Box specific settings
local boxOptions = visualsOptions:AddToggle({
    Name = "3D Box Settings",
    Default = false,
    Callback = function(state)
        -- Just a category toggle
    end
}).Link:AddOption();

boxOptions:AddSlider({
    Name = "Box Width",
    Min = 1,
    Max = 10,
    Default = FeatureState.BoxWidth,
    Round = 1,
    Type = "x",
    Callback = function(value)
        FeatureState.BoxWidth = value
    end
});

boxOptions:AddSlider({
    Name = "Box Height",
    Min = 1,
    Max = 15,
    Default = FeatureState.BoxHeight,
    Round = 1,
    Type = "x",
    Callback = function(value)
        FeatureState.BoxHeight = value
    end
});

boxOptions:AddToggle({
    Name = "Enable Glow",
    Default = FeatureState.GlowEnabled,
    Callback = function(state)
        FeatureState.GlowEnabled = state
    end
});

boxOptions:AddColorPicker({
    Name = "Glow Color",
    Default = FeatureState.GlowColor,
    Callback = function(color)
        FeatureState.GlowColor = color
    end
});

boxOptions:AddSlider({
    Name = "Glow Size",
    Min = 2,
    Max = 15,
    Default = FeatureState.GlowSize,
    Round = 1,
    Type = "px",
    Callback = function(value)
        FeatureState.GlowSize = value
    end
});

-- Movement Tab Implementation
local movementSection = Movement:DrawSection({
    Name = "Player Movement",
    Position = "LEFT"
});

movementSection:AddSlider({
    Name = "Walk Speed",
    Min = 1,
    Max = 100,
    Default = FeatureState.WalkSpeed,
    Round = 0,
    Type = "studs/s",
    Callback = function(value)
        FeatureState.WalkSpeed = value
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = value
        end
    end
});

movementSection:AddSlider({
    Name = "Jump Power",
    Min = 1,
    Max = 200,
    Default = FeatureState.JumpPower,
    Round = 0,
    Type = "studs",
    Callback = function(value)
        FeatureState.JumpPower = value
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.JumpPower = value
        end
    end
});

movementSection:AddToggle({
    Name = "Fly Mode",
    Default = FeatureState.FlyEnabled,
    Callback = function(state)
        FeatureState.FlyEnabled = state
        
        if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            return
        end
        
        local flyConnection = nil
        local bodyVelocity = nil
        
        if state then
            bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
            bodyVelocity.Velocity = Vector3.new(0, 0, 0)
            bodyVelocity.Parent = LocalPlayer.Character.HumanoidRootPart
            
            flyConnection = RunService.Heartbeat:Connect(function()
                if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    return
                end
                
                local velocity = Vector3.new(0, 0, 0)
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                    velocity = velocity + (Camera.CFrame.LookVector * 50)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                    velocity = velocity - (Camera.CFrame.LookVector * 50)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                    velocity = velocity - (Camera.CFrame.RightVector * 50)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                    velocity = velocity + (Camera.CFrame.RightVector * 50)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                    velocity = velocity + Vector3.new(0, 50, 0)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                    velocity = velocity - Vector3.new(0, 50, 0)
                end
                
                bodyVelocity.Velocity = velocity
            end)
        else
            if bodyVelocity then
                bodyVelocity:Destroy()
            end
            if flyConnection then
                flyConnection:Disconnect()
            end
        end
    end
});

movementSection:AddToggle({
    Name = "NoClip",
    Default = FeatureState.NoclipEnabled,
    Callback = function(state)
        FeatureState.NoclipEnabled = state
        
        if LocalPlayer.Character then
            for _, part in ipairs(LocalPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = not state
                end
            end
        end
    end
});

-- Farming Tab Implementation
local farmingSection = Farming:DrawSection({
    Name = "Farming Features",
    Position = "LEFT"
});

farmingSection:AddToggle({
    Name = "Auto Farm",
    Default = FeatureState.AutoFarm,
    Callback = function(state)
        FeatureState.AutoFarm = state
    end
});

farmingSection:AddToggle({
    Name = "God Mode",
    Default = FeatureState.GodMode,
    Callback = function(state)
        FeatureState.GodMode = state
    end
});

farmingSection:AddSlider({
    Name = "Farm Range",
    Min = 50,
    Max = 500,
    Default = FeatureState.FarmRange,
    Round = 0,
    Type = "studs",
    Callback = function(value)
        FeatureState.FarmRange = value
    end
});

farmingSection:AddToggle({
    Name = "Auto Kill",
    Default = FeatureState.AutoKill,
    Callback = function(state)
        FeatureState.AutoKill = state
    end
});

farmingSection:AddToggle({
    Name = "Bring Heads",
    Default = FeatureState.BringHeads,
    Callback = function(state)
        FeatureState.BringHeads = state
    end
});

-- Utility Tab Implementation
local utilitySection = Utility:DrawSection({
    Name = "Game Utilities",
    Position = "LEFT"
});

utilitySection:AddToggle({
    Name = "Full Bright",
    Default = FeatureState.FullBright,
    Callback = function(state)
        FeatureState.FullBright = state
        
        if state then
            Lighting.Brightness = 2
            Lighting.ClockTime = 14
            Lighting.FogEnd = 100000
            Lighting.GlobalShadows = false
        else
            Lighting.Brightness = 1
            Lighting.ClockTime = 12
            Lighting.FogEnd = 500
            Lighting.GlobalShadows = true
        end
    end
});

utilitySection:AddToggle({
    Name = "Auto Respawn",
    Default = FeatureState.AutoRespawn,
    Callback = function(state)
        FeatureState.AutoRespawn = state
    end
});

-- Config Tab
local Configs = Window:DrawConfig({
    Name = "Configs",
    Icon = "folder",
    Config = FileWatcher
});

Configs:Init();

-- Core functionality

-- FOV Circle
local fovCircle = Drawing.new("Circle")
fovCircle.Visible = false
fovCircle.Thickness = 2
fovCircle.Color = Color3.fromRGB(255, 255, 255)
fovCircle.Filled = false
fovCircle.Transparency = 1

-- ESP Objects
local espObjects = {}

local function createESP(player)
    if espObjects[player] then return end
    
    local esp = {}
    -- Box
    esp.box = Drawing.new("Square")
    esp.box.Visible = false
    esp.box.Color = Color3.fromRGB(255, 255, 255)
    esp.box.Thickness = 2
    esp.box.Transparency = 1
    esp.box.Filled = false
    -- Name
    esp.name = Drawing.new("Text")
    esp.name.Visible = false
    esp.name.Color = Color3.fromRGB(255, 255, 255)
    esp.name.Size = 16
    esp.name.Center = true
    esp.name.Outline = true
    esp.name.Text = player.Name
    -- Health
    esp.health_bg = Drawing.new("Square")
    esp.health_bg.Visible = false
    esp.health_bg.Color = Color3.fromRGB(0, 0, 0)
    esp.health_bg.Filled = true
    esp.health_bg.Transparency = 0.5
    esp.health_bar = Drawing.new("Square")
    esp.health_bar.Visible = false
    esp.health_bar.Color = Color3.fromRGB(0, 255, 0)
    esp.health_bar.Filled = true
    esp.health_bar.Transparency = 1
    espObjects[player] = esp
end

local function updateESP()
    for player, esp in pairs(espObjects) do
        if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
            esp.box.Visible = false
            esp.name.Visible = false
            esp.health_bg.Visible = false
            esp.health_bar.Visible = false
            continue
        end
        
        local character = player.Character
        local root_part = character.HumanoidRootPart
        local humanoid = character:FindFirstChild("Humanoid")
        local screen_pos, on_screen = Camera:WorldToViewportPoint(root_part.Position)
        
        if on_screen and FeatureState.ESPEnabled then
            local distance = (root_part.Position - Camera.CFrame.Position).Magnitude
            
            if distance <= FeatureState.MaxDistance then
                local scale_factor = 1000 / distance
                local size = Vector2.new(scale_factor * 4, scale_factor * 6)
                
                -- Box
                if FeatureState.BoxEnabled then
                    esp.box.Visible = true
                    esp.box.Size = size
                    esp.box.Position = Vector2.new(screen_pos.X - size.X / 2, screen_pos.Y - size.Y / 2)
                else
                    esp.box.Visible = false
                end
                
                -- Name
                if FeatureState.NameEnabled then
                    esp.name.Visible = true
                    esp.name.Position = Vector2.new(screen_pos.X, screen_pos.Y - size.Y / 2 - 20)
                else
                    esp.name.Visible = false
                end
                
                -- Health
                if FeatureState.HealthEnabled and humanoid then
                    local health_percentage = humanoid.Health / humanoid.MaxHealth
                    local health_color = Color3.fromRGB(255 * (1 - health_percentage), 255 * health_percentage, 0)
                    esp.health_bg.Visible = true
                    esp.health_bg.Size = Vector2.new(4, size.Y)
                    esp.health_bg.Position = Vector2.new(screen_pos.X - size.X / 2 - 8, screen_pos.Y - size.Y / 2)
                    esp.health_bar.Visible = true
                    esp.health_bar.Size = Vector2.new(2, size.Y * health_percentage)
                    esp.health_bar.Position = Vector2.new(screen_pos.X - size.X / 2 - 7, screen_pos.Y + size.Y / 2 - (size.Y * health_percentage))
                    esp.health_bar.Color = health_color
                else
                    esp.health_bg.Visible = false
                    esp.health_bar.Visible = false
                end
            else
                esp.box.Visible = false
                esp.name.Visible = false
                esp.health_bg.Visible = false
                esp.health_bar.Visible = false
            end
        else
            esp.box.Visible = false
            esp.name.Visible = false
            esp.health_bg.Visible = false
            esp.health_bar.Visible = false
        end
    end
end

-- Aimbot Function
local function getClosestTarget()
    local closest_target = nil
    local shortest_distance = FeatureState.FOVSize
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild(FeatureState.TargetPart) then
            -- Team check
            if FeatureState.TargetTeam and player.Team == LocalPlayer.Team then
                continue
            end
            
            local target_part = player.Character[FeatureState.TargetPart]
            local screen_pos, on_screen = Camera:WorldToViewportPoint(target_part.Position)
            
            if on_screen then
                local mouse_pos = UserInputService:GetMouseLocation()
                local distance = (Vector2.new(screen_pos.X, screen_pos.Y) - mouse_pos).Magnitude
                
                if distance < shortest_distance then
                    -- Wall check
                    if FeatureState.WallCheck then
                        local ray = Workspace:Raycast(Camera.CFrame.Position, (target_part.Position - Camera.CFrame.Position).Unit * 1000)
                        if ray and ray.Instance:IsDescendantOf(player.Character) then
                            shortest_distance = distance
                            closest_target = target_part
                        end
                    else
                        shortest_distance = distance
                        closest_target = target_part
                    end
                end
            end
        end
    end
    
    return closest_target
end

-- Auto Farm Function
local function autoFarm()
    if not FeatureState.AutoFarm or not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return
    end
    
    local root = LocalPlayer.Character.HumanoidRootPart
    local closest, distance = nil, FeatureState.FarmRange
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local plr_root = player.Character.HumanoidRootPart
            local dist = (plr_root.Position - root.Position).Magnitude
            
            if dist < distance then
                closest = player
                distance = dist
            end
        end
    end
    
    if closest and closest.Character and closest.Character:FindFirstChild("HumanoidRootPart") then
        local target_root = closest.Character.HumanoidRootPart
        local behind = target_root.CFrame * CFrame.new(0, 0, -5)
        
        -- Apply God Mode
        if FeatureState.GodMode and LocalPlayer.Character then
            for _, part in ipairs(LocalPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                    part.Transparency = 0.5
                end
            end
        end
        
        -- Teleport behind
        root.CFrame = behind
        
        -- Auto shoot
        local tool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
        if tool then
            local head = closest.Character:FindFirstChild("Head")
            if head then
                local head_pos = head.Position
                local velocity = head.Velocity
                local predicted_pos = head_pos + velocity * FeatureState.Prediction
                
                -- Fire the gun
                if tool:FindFirstChild("RemoteEvent") then
                    tool.RemoteEvent:FireServer(predicted_pos)
                end
            end
        end
    end
end

-- Auto Kill Function
local function autoKill()
    if not FeatureState.AutoKill or not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return
    end
    
    local root = LocalPlayer.Character.HumanoidRootPart
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.CFrame = root.CFrame * CFrame.new(0, 0, -9)
        end
    end
end

-- Auto Respawn Function
local function autoRespawn()
    if not FeatureState.AutoRespawn or not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return
    end
    
    local root = LocalPlayer.Character.HumanoidRootPart
    
    if root and root.Anchored then
        game.ReplicatedStorage.Network.Remotes.Spawn:FireServer()
    end
end

-- Bring Heads Function
local function bringHeads()
    if not FeatureState.BringHeads or not Camera then
        return
    end
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            player.Character.Head.CFrame = CFrame.new(Camera.CFrame.Position + Camera.CFrame.LookVector * 10)
        end
    end
end

-- Main Loop
local mainConnection
mainConnection = RunService.Heartbeat:Connect(function()
    -- Update FOV Circle
    if FeatureState.FOVVisible then
        fovCircle.Visible = true
        fovCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
        fovCircle.Radius = FeatureState.FOVSize
        fovCircle.Color = Color3.new(1, 1, 1)
    else
        fovCircle.Visible = false
    end
    
    -- Update ESP
    updateESP()
    
    -- Aimbot
    if FeatureState.AimbotEnabled then
        local target = getClosestTarget()
        
        if target then
            local target_pos = target.Position
            local camera_cf = Camera.CFrame
            local direction = (target_pos - camera_cf.Position).Unit
            
            Camera.CFrame = camera_cf:Lerp(CFrame.lookAt(camera_cf.Position, camera_cf.Position + direction), 1 / FeatureState.Smoothness)
        end
    end
    
    -- Farming
    if FeatureState.AutoFarm then
        autoFarm()
    end
    
    -- Auto Kill
    if FeatureState.AutoKill then
        autoKill()
    end
    
    -- Auto Respawn
    if FeatureState.AutoRespawn then
        autoRespawn()
    end
    
    -- Bring Heads
    if FeatureState.BringHeads then
        bringHeads()
    end
end)

-- Player Events
Players.PlayerAdded:Connect(function(player)
    createESP(player)
end)

Players.PlayerRemoving:Connect(function(player)
    if espObjects[player] then
        for _, drawing in pairs(espObjects[player]) do
            drawing:Remove()
        end
        espObjects[player] = nil
    end
end)

-- Initialize ESP for existing players
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        createESP(player)
    end
end

-- Add welcome notification
task.spawn(function()
    task.wait(1)
    SoulsHub:Notify({
        Title = "SOULS HUB",
        Content = "Hypershot script initialized successfully!",
        Duration = 5
    })
end)

-- Final UI draw
Window:Draw()
