-- SOULS HUB - ULTIMATE FOOTBALL SCRIPT
-- By Celeron + Daffy (Original Authors)
-- Merged & Enhanced by Soul

local function safeCall(func, ...)
    local success, err = pcall(func, ...)
    if not success then
        warn("Error in function: " .. tostring(err))
    end
end

local function safeFireServer(remote, ...)
    local success, err = pcall(function()
        if remote and typeof(remote) == "Instance" then
            remote:FireServer(...)
        end
    end)
    if not success then
        warn("Failed to fire remote: " .. tostring(err))
    end
end

local function safeGetRemote(remoteName)
    local success, remote = pcall(function()
        return game:GetService("ReplicatedStorage"):WaitForChild(remoteName, 10)
    end)
    if success and remote then
        return remote
    else
        return nil
    end
end

local function safeGetCharacter()
    local player = game:GetService("Players").LocalPlayer
    if not player then return nil end
    
    local character = player.Character
    if not character then
        character = player.CharacterAdded:Wait(10)
    end
    
    if not character then return nil end
    return character
end

local function safeGetHumanoidRootPart(character)
    if not character then return nil end
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then
        for _, part in ipairs(character:GetChildren()) do
            if part:IsA("BasePart") and part.Name:match("Root|Humanoid") then
                humanoidRootPart = part
                break
            end
        end
    end
    return humanoidRootPart
end

local function safeGetBall()
    local terrain = game:GetService("Workspace").Terrain
    if terrain then
        local ball = terrain:FindFirstChild("Ball")
        if ball then return ball end
    end
    
    for _, obj in ipairs(game:GetService("Workspace"):GetDescendants()) do
        if obj:IsA("BasePart") and (obj.Name == "Ball" or obj.Name == "Football") then
            return obj
        end
    end
    
    return nil
end

local function safeGetMapFolder()
    local workspace = game:GetService("Workspace")
    local mapFolder = workspace:FindFirstChild("map")
    if not mapFolder then
        mapFolder = workspace:FindFirstChild("Map")
    end
    if not mapFolder then
        for _, obj in ipairs(workspace:GetChildren()) do
            if obj:IsA("Folder") and (obj.Name:lower():match("map") or obj.Name:lower():match("field")) then
                mapFolder = obj
                break
            end
        end
    end
    return mapFolder
end

local function safeGetGoal(goalName)
    local mapFolder = safeGetMapFolder()
    if not mapFolder then return end
    
    local goal = mapFolder:FindFirstChild(goalName)
    if not goal then
        goal = mapFolder:FindFirstChild(goalName:lower())
    end
    if not goal then
        goal = mapFolder:FindFirstChild(goalName:upper())
    end
    
    if not goal then
        for _, obj in ipairs(mapFolder:GetChildren()) do
            if obj:IsA("BasePart") and (obj.Name:lower():match(goalName:lower()) or 
                obj.Name:lower():match("goal")) then
                goal = obj
                break
            end
        end
    end
    
    return goal
end

local function safeGetTeam()
    local player = game:GetService("Players").LocalPlayer
    if not player then return nil end
    
    local team = player.Team
    if not team then
        if player.TeamColor then
            team = player.TeamColor
        end
    end
    
    if not team then
        local teams = game:GetService("Teams"):GetChildren()
        for _, t in ipairs(teams) do
            if t:GetPlayers()[1] == player then
                team = t
                break
            end
        end
    end
    
    return team
end

local function safeGetCharacterWithAnimation(animationId)
    local character = safeGetCharacter()
    if not character then return end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end
    
    local animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)
    local animation = Instance.new("Animation")
    animation.AnimationId = animationId
    
    return character, humanoid, animator, animation
end

local function safeGetHumanoid()
    local character = safeGetCharacter()
    if not character then return end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then
        for _, obj in ipairs(character:GetChildren()) do
            if obj:IsA("Humanoid") then
                humanoid = obj
                break
            end
        end
    end
    
    return humanoid
end

local function safeLoadAnimation(animationId, humanoid)
    if not humanoid or not animationId then return end
    
    local animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)
    local animation = Instance.new("Animation")
    animation.AnimationId = animationId
    
    local success, track = pcall(function()
        return animator:LoadAnimation(animation)
    end)
    
    if success and track then
        return track
    else
        return nil
    end
end

local function safeGetService(serviceName)
    local service
    local success, err = pcall(function()
        service = game:GetService(serviceName)
    end)
    if success and service then
        return service
    else
        return nil
    end
end

-- Load the Souls Hub UI library
local SoulsHub
local success, err = pcall(function()
    SoulsHub = loadstring(game:HttpGet("https://pandadevelopment.net/virtual/file/e7f388d3c065df7a", true))()
end)

if not success then
    warn("Failed to load Souls Hub UI library: " .. tostring(err))
    return
end

if not SoulsHub or type(SoulsHub) ~= "table" then
    warn("Souls Hub UI library loaded but is invalid")
    return
end

task.wait(1)

-- Initialize the loader
SoulsHub:Loader(nil, 1).yield()

-- Setup configuration manager
local FileWatcher = SoulsHub:ConfigManager({
    Directory = "SoulsHub",
    Config = "Football-Configs"
});

-- Create main window
local Window = SoulsHub.new({
    Keybind = "RightAlt",
});

-- Setup watermark
local watermark = Window:Watermark();
watermark:AddText({
    Icon = "user",
    Text = "Souls Hub"
})

local clock = watermark:AddText({
    Icon = "clock",
    Text = SoulsHub:GetTimeNow()
})

task.spawn(function()
    while true do 
        task.wait()
        clock:SetText(SoulsHub:GetTimeNow())
        Window.Username = "Football Script"
    end
end)

Window:Update({
    ExpireDate = SoulsHub:GetDate(tick() + 84000)
})

-- Tabs
local Blatant = Window:DrawTab({
    Icon = "skull",
    Name = "Blatant",
    Type = "Double"
});

local Silent = Window:DrawTab({
    Icon = "eye",
    Name = "Silent"
});

local Movesets = Window:DrawTab({
    Icon = "run",
    Name = "Movesets"
});

local Emotes = Window:DrawTab({
    Icon = "smile",
    Name = "Emotes"
});

local Teleports = Window:DrawTab({
    Icon = "compass",
    Name = "Teleports"
});

local Others = Window:DrawTab({
    Icon = "settings",
    Name = "Others"
});

local Info = Window:DrawTab({
    Icon = "info",
    Name = "Info"
});

-- Blatant Tab
do
    local general = Blatant:DrawSection({
        Name = "Game Features",
        Position = "LEFT"
    });
    
    local auto = Blatant:DrawSection({
        Name = "Auto Features",
        Position = "right"
    });
    
    local ball = Blatant:DrawSection({
        Name = "Ball Control",
        Position = "right"
    });
    
    -- Metavision
    general:AddButton({
        Name = "Metavision",
        Callback = function()
            safeCall(function()
                loadstring(game:HttpGet("https://pastebin.com/raw/FVgs7bQw", true))()
            end)
        end
    }).Link:AddHelper({
        Text = "Gives you metavision for better awareness"
    });
    
    -- Auto-Goal
    local autoGoalToggle = auto:AddToggle({
        Name = "Auto-Goal",
        Default = false,
        Flag = "auto_goal",
        Callback = function(enabled)
            _G.AUTO_GOAL = enabled
            if enabled then
                safeCall(function()
                    local Players = safeGetService("Players")
                    local RunService = safeGetService("RunService")
                    local ReplicatedStorage = safeGetService("ReplicatedStorage")
                    local MapFolder = safeGetMapFolder()
                    local AGoal = safeGetGoal("Agoal")
                    local BGoal = safeGetGoal("Bgoal")
                    local LocalPlayer = Players.LocalPlayer
                    
                    if not AGoal or not BGoal then
                        _G.AUTO_GOAL = false
                        return
                    end
                    
                    local function IsInGame()
                        local LocalCharacter = LocalPlayer.Character
                        if not LocalCharacter then return false end
                        local StateFolder = LocalCharacter:FindFirstChild("state")
                        if not StateFolder then return false end
                        local InGameValue = StateFolder:FindFirstChild("ingame")
                        if not InGameValue then return false end
                        return InGameValue.Value
                    end
                    
                    local function DisableCollisionBoxes()
                        local GkBarriar = MapFolder and MapFolder:FindFirstChild("gkbarriar")
                        if GkBarriar then
                            local ABarriar = GkBarriar:FindFirstChild("A")
                            local BBarriar = GkBarriar:FindFirstChild("B")
                            if ABarriar then ABarriar.CanCollide = false end
                            if BBarriar then BBarriar.CanCollide = false end
                        end
                        if AGoal then AGoal.CanCollide = false end
                        if BGoal then BGoal.CanCollide = false end
                    end
                    
                    local function StealBall()
                        local LocalCharacter = LocalPlayer.Character
                        local LocalHumanoidRootPart = safeGetHumanoidRootPart(LocalCharacter)
                        local Football = safeGetBall()
                        if LocalHumanoidRootPart and Football then
                            LocalHumanoidRootPart.CFrame = CFrame.new(Football.Position.X, 0, Football.Position.Z)
                        end
                        
                        for _, OtherPlayer in ipairs(Players:GetPlayers()) do
                            if OtherPlayer ~= LocalPlayer then
                                local OtherCharacter = OtherPlayer.Character
                                local OtherFootball = OtherCharacter and OtherCharacter:FindFirstChild("Ball")
                                local OtherHumanoidRootPart = safeGetHumanoidRootPart(OtherCharacter)
                                if OtherFootball and OtherHumanoidRootPart and LocalHumanoidRootPart then
                                    LocalHumanoidRootPart.CFrame = OtherFootball.CFrame
                                    safeFireServer(ReplicatedStorage:FindFirstChild("ByteNetReliable"), buffer.fromstring("\b\001"), {{ "tackle" }})
                                end
                            end
                        end
                    end
                    
                    local function HasBall()
                        local LocalCharacter = LocalPlayer.Character
                        local Football = LocalCharacter and LocalCharacter:FindFirstChild("Ball")
                        return Football ~= nil
                    end
                    
                    coroutine.resume(coroutine.create(function()
                        RunService.RenderStepped:Connect(function()
                            if not _G.AUTO_GOAL then return end
                            safeCall(function()
                                if not IsInGame() then return end
                                DisableCollisionBoxes()
                                StealBall()
                                if HasBall() then
                                    local LocalCharacter = LocalPlayer.Character
                                    local LocalRootPart = safeGetHumanoidRootPart(LocalCharacter)
                                    local Goal = LocalPlayer.Team.Name == "A" and BGoal or AGoal
                                    if LocalRootPart and Goal then
                                        LocalRootPart.CFrame = Goal.CFrame
                                        safeFireServer(ReplicatedStorage:FindFirstChild("ByteNetReliable"), buffer.fromstring("\b\001"), {{ "tackle" }})
                                    end
                                end
                            end)
                        end)
                    end))
                end)
            else
                _G.AUTO_GOAL = false
            end
        end
    });
    
    -- Always Ball
    local alwaysBallToggle = ball:AddToggle({
        Name = "Always Ball",
        Default = false,
        Flag = "always_ball",
        Callback = function(enabled)
            _G.ALWAYS_BALL_ACTIVE = enabled
            if enabled then
                safeCall(function()
                    game.Workspace.Gravity = 0
                    spawn(function()
                        while _G.ALWAYS_BALL_ACTIVE do
                            safeCall(function()
                                local LocalPlayer = game:GetService("Players").LocalPlayer
                                local LocalCharacter = LocalPlayer.Character
                                local LocalHumanoidRootPart = safeGetHumanoidRootPart(LocalCharacter)
                                local Football = safeGetBall()
                                if LocalHumanoidRootPart and Football then
                                    LocalHumanoidRootPart.CFrame = CFrame.new(Football.Position)
                                end
                                
                                for _, OtherPlayer in ipairs(game:GetService("Players"):GetPlayers()) do
                                    if OtherPlayer ~= LocalPlayer then
                                        local OtherCharacter = OtherPlayer.Character
                                        local OtherFootball = OtherCharacter and OtherCharacter:FindFirstChild("Ball")
                                        local OtherHumanoidRootPart = safeGetHumanoidRootPart(OtherCharacter)
                                        if OtherFootball and OtherHumanoidRootPart and LocalHumanoidRootPart then
                                            LocalHumanoidRootPart.CFrame = OtherFootball.CFrame
                                            safeFireServer(game:GetService("ReplicatedStorage"):FindFirstChild("ByteNetReliable"), buffer.fromstring("\b\001"), {{ "tackle" }})
                                        end
                                    end
                                end
                            end)
                            task.wait(0.1)
                        end
                    end)
                end)
            else
                _G.ALWAYS_BALL_ACTIVE = false
                game.Workspace.Gravity = 196.2
            end
        end
    });
    
    -- Get Flow
    general:AddButton({
        Name = "Get Flow (Enable Header, Req. Ball)",
        Callback = function()
            safeCall(function()
                local player = game:GetService("Players").LocalPlayer
                local character = safeGetCharacter()
                local humanoidRootPart = safeGetHumanoidRootPart(character)
                local virtualInputManager = safeGetService("VirtualInputManager")
                if humanoidRootPart then
                    local originalPosition = humanoidRootPart.Position
                    humanoidRootPart.CFrame = CFrame.new(Vector3.new(-390, 475, 354))
                    task.wait(0.3)
                    virtualInputManager:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                    task.wait(0.1)
                    virtualInputManager:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                    game.Workspace.Gravity = 0
                    spawn(function()
                        local startTime = tick()
                        while tick() - startTime < 20 do
                            safeCall(function()
                                local LocalCharacter = game:GetService("Players").LocalPlayer.Character
                                local LocalHumanoidRootPart = safeGetHumanoidRootPart(LocalCharacter)
                                local Football = safeGetBall()
                                if LocalHumanoidRootPart and Football then
                                    LocalHumanoidRootPart.CFrame = CFrame.new(Football.Position.X, Football.Position.Y, Football.Position.Z)
                                end
                                for _, OtherPlayer in ipairs(game:GetService("Players"):GetPlayers()) do
                                    if OtherPlayer.Name ~= game:GetService("Players").LocalPlayer.Name then
                                        local OtherCharacter = OtherPlayer.Character
                                        local OtherFootball = OtherCharacter and OtherCharacter:FindFirstChild("Ball")
                                        local OtherHumanoidRootPart = safeGetHumanoidRootPart(OtherCharacter)
                                        if OtherFootball and OtherHumanoidRootPart and LocalHumanoidRootPart then
                                            LocalHumanoidRootPart.CFrame = OtherFootball.CFrame
                                            virtualInputManager:SendKeyEvent(true, Enum.KeyCode.Q, false, game)
                                            virtualInputManager:SendKeyEvent(false, Enum.KeyCode.Q, false, game)
                                        end
                                    end
                                end
                            end)
                            task.wait(0.1)
                        end
                        game.Workspace.Gravity = 196.2
                    end)
                    humanoidRootPart.CFrame = CFrame.new(originalPosition)
                end
            end)
        end
    });
    
    -- Team Goal
    general:AddButton({
        Name = "Team Goal (YOUR GOAL)",
        Callback = function()
            safeCall(function()
                local plr = game:GetService("Players").LocalPlayer
                local char = plr.Character or plr.CharacterAdded:Wait(10)
                local rootPart = safeGetHumanoidRootPart(char)
                if rootPart then
                    if plr.Team == game:GetService("Teams"):FindFirstChild("A") then
                        rootPart.Position = Vector3.new(-538, 3, 1603)
                    elseif plr.Team == game:GetService("Teams"):FindFirstChild("B") then
                        rootPart.Position = Vector3.new(-535, 3, 946)
                    end
                end
            end)
        end
    });
    
    -- Manual Score
    general:AddButton({
        Name = "Manual Score",
        Callback = function()
            safeCall(function()
                local coordinateA = Vector3.new(-552, 3, 1730)
                local coordinateB = Vector3.new(-549, 3, 818)
                
                local function teleportToPosition(position)
                    local LocalCharacter = game:GetService("Players").LocalPlayer.Character
                    local LocalHumanoidRootPart = safeGetHumanoidRootPart(LocalCharacter)
                    if LocalHumanoidRootPart then
                        LocalHumanoidRootPart.CFrame = CFrame.new(position)
                    end
                end
                
                local function checkTeamAndTeleport()
                    local teamName = game:GetService("Players").LocalPlayer.Team and game:GetService("Players").LocalPlayer.Team.Name
                    if teamName == "A" then
                        teleportToPosition(coordinateB)
                    elseif teamName == "B" then
                        teleportToPosition(coordinateA)
                    end
                end
                
                checkTeamAndTeleport()
            end)
        end
    });
    
    -- Break Ball (Player Method)
    general:AddButton({
        Name = "Break Ball (Player Method, Req. Ball)",
        Callback = function()
            safeCall(function()
                local baseplatePosition = Vector3.new(-190, 14864566, 492)
                local partSize = Vector3.new(10, 1, 10)
                local gap = 0
                
                for x = 0, 2 do
                    for z = 0, 2 do
                        local part = Instance.new("Part")
                        part.Size = partSize
                        part.Anchored = true
                        part.Position = baseplatePosition + Vector3.new(x * (partSize.X + gap), 0, z * (partSize.Z + gap))
                        part.Parent = game:GetService("Workspace")
                    end
                end
                
                local player = game:GetService("Players").LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait(10)
                local humanoidRootPart = safeGetHumanoidRootPart(character)
                if humanoidRootPart then
                    humanoidRootPart.CFrame = CFrame.new(baseplatePosition + Vector3.new(0, 100000000000000, 0))
                end
            end)
        end
    });
    
    -- Break Ball (Ball Method)
    general:AddButton({
        Name = "Break Ball (Ball Method, Req. Ball)",
        Callback = function()
            safeCall(function()
                local player = game:GetService("Players").LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait(10)
                local humanoidRootPart = safeGetHumanoidRootPart(character)
                local virtualInputManager = safeGetService("VirtualInputManager")
                if humanoidRootPart then
                    local originalPosition = humanoidRootPart.Position
                    humanoidRootPart.CFrame = CFrame.new(Vector3.new(-390, 475, 354))
                    task.wait(0.3)
                    virtualInputManager:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                    task.wait(0.1)
                    virtualInputManager:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                    task.wait(0.3)
                    humanoidRootPart.CFrame = CFrame.new(originalPosition)
                end
            end)
        end
    });
    
    -- Barou Devour Goal
    general:AddButton({
        Name = "Barou Devour Goal",
        Callback = function()
            safeCall(function()
                local plr = game:GetService("Players").LocalPlayer
                local function countEnemyTeamMembers()
                    local op = game:GetService("Teams"):FindFirstChild("A")
                    if plr.Team == game:GetService("Teams"):FindFirstChild("A") then
                        op = game:GetService("Teams"):FindFirstChild("B")
                    end
                    local count = 0
                    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
                        if player.Team == op then
                            count = count + 1
                        end
                    end
                    return count
                end
                
                local function getTwoRandomEnemies()
                    local enemies = {}
                    local op = game:GetService("Teams"):FindFirstChild("A")
                    if plr.Team == game:GetService("Teams"):FindFirstChild("A") then
                        op = game:GetService("Teams"):FindFirstChild("B")
                    end
                    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
                        if player ~= plr and player.Team == op then
                            table.insert(enemies, player)
                        end
                    end
                    
                    for i = #enemies, 2, -1 do
                        local j = math.random(1, i)
                        enemies[i], enemies[j] = enemies[j], enemies[i]
                    end
                    
                    return enemies[1], enemies[2]
                end
                
                if countEnemyTeamMembers() >= 2 then
                    local p1, p2 = getTwoRandomEnemies()
                    if not p1 or not p2 then return end
                    
                    local function tpToPlayer(targetPlayer)
                        local char = plr.Character or plr.CharacterAdded:Wait(10)
                        local root = safeGetHumanoidRootPart(char)
                        local targetRoot = targetPlayer.Character and safeGetHumanoidRootPart(targetPlayer.Character)
                        if root and targetRoot then
                            root.CFrame = targetRoot.CFrame
                        end
                    end
                    
                    tpToPlayer(p1)
                    task.wait(0.3)
                    tpToPlayer(p2)
                    task.wait(0.3)
                    
                    local teamName = plr.Team and plr.Team.Name
                    if teamName == "A" then
                        plr.Character.HumanoidRootPart.Position = Vector3.new(-625, 3, 925)
                    elseif teamName == "B" then
                        plr.Character.HumanoidRootPart.Position = Vector3.new(-588, 3, 1643)
                    end
                end
            end)
        end
    });
    
    -- Nagi Dream Goal
    general:AddButton({
        Name = "Nagi Dream Goal",
        Callback = function()
            safeCall(function()
                local plr = game:GetService("Players").LocalPlayer
                local char = plr.Character or plr.CharacterAdded:Wait(10)
                local hrp = safeGetHumanoidRootPart(char)
                if hrp then
                    local teamName = plr.Team and plr.Team.Name
                    if teamName == "A" then
                        hrp.CFrame = CFrame.new(-459, 3, 862)
                    elseif teamName == "B" then
                        hrp.CFrame = CFrame.new(-611, 3, 1682) * CFrame.Angles(0, math.rad(180), 0)
                    end
                    
                    local humanoid = char:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    end
                    
                    task.wait(0.2)
                    local virtualInputManager = safeGetService("VirtualInputManager")
                    virtualInputManager:SendKeyEvent(true, Enum.KeyCode.Two, false, game)
                    virtualInputManager:SendKeyEvent(false, Enum.KeyCode.Two, false, game)
                end
            end)
        end
    });
    
    -- Isagi U-20 Goal
    general:AddButton({
        Name = "Isagi U-20 Goal",
        Callback = function()
            safeCall(function()
                local plr = game:GetService("Players").LocalPlayer
                local character = plr.Character or plr.CharacterAdded:Wait(10)
                local hrp = safeGetHumanoidRootPart(character)
                if hrp then
                    local teams = game:GetService("Teams")
                    if plr.Team == teams:FindFirstChild("A") then
                        hrp.Position = Vector3.new(-539, 3, 996)
                    elseif plr.Team == teams:FindFirstChild("B") then
                        hrp.Position = Vector3.new(-537, 3, 1557)
                    end
                    
                    task.wait(0.5)
                    local skillRemote = game:GetService("ReplicatedStorage"):FindFirstChild("SkillRemote")
                    if skillRemote then
                        skillRemote:FireServer("Skill3")
                    end
                end
            end)
        end
    });
    
    -- Shidou Back-Heel Goal
    general:AddButton({
        Name = "Shidou Back-Heel Goal",
        Callback = function()
            safeCall(function()
                local plr = game:GetService("Players").LocalPlayer
                local char = plr.Character or plr.CharacterAdded:Wait(10)
                local rootPart = safeGetHumanoidRootPart(char)
                if rootPart then
                    if plr.Team == game:GetService("Teams"):FindFirstChild("A") then
                        rootPart.Position = Vector3.new(-625, 3, 925)
                    elseif plr.Team == game:GetService("Teams"):FindFirstChild("B") then
                        rootPart.Position = Vector3.new(-588, 3, 1643)
                    end
                    task.wait(0.25)
                    local virtualInputManager = safeGetService("VirtualInputManager")
                    virtualInputManager:SendKeyEvent(true, Enum.KeyCode.Two, false, game)
                    virtualInputManager:SendKeyEvent(false, Enum.KeyCode.Two, false, game)
                end
            end)
        end
    });
end

-- Silent Tab
do
    local magnet = Silent:DrawSection({
        Name = "Magnet",
        Position = "LEFT"
    });
    
    local counter = Silent:DrawSection({
        Name = "Auto Counter",
        Position = "right"
    });
    
    local misc = Silent:DrawSection({
        Name = "Misc",
        Position = "right"
    });
    
    -- Bind Magnet
    magnet:AddButton({
        Name = "Bind Magnet (M2 BIND)",
        Callback = function()
            safeCall(function()
                local userInputService = safeGetService("UserInputService")
                local remote = safeGetRemote("ByteNetReliable")
                userInputService.InputBegan:Connect(function(input, gameProcessed)
                    if gameProcessed then return end
                    if input.UserInputType == Enum.UserInputType.MouseButton2 then
                        safeFireServer(remote, buffer.fromstring("\016"))
                    end
                end)
            end)
        end
    });
    
    -- Ball Magnet
    magnet:AddTextbox({
        Name = "Ball Magnet",
        Default = "100",
        Flag = "ball_magnet_range",
        Callback = function(v)
            safeCall(function()
                local player = game:GetService("Players").LocalPlayer
                local char = player.Character or player.CharacterAdded:Wait(10)
                local hrp = safeGetHumanoidRootPart(char)
                local remote = safeGetRemote("ByteNetReliable")
                local range = tonumber(v) or 0
                
                local function findBall()
                    for _, obj in ipairs(game:GetService("Workspace"):GetDescendants()) do
                        if obj:IsA("BasePart") and (obj.Name == "Ball" or obj.Name:lower():match("football")) then
                            return obj
                        end
                    end
                    return nil
                end
                
                spawn(function()
                    while true do
                        task.wait(0.5)
                        safeCall(function()
                            local target = findBall()
                            if target and hrp and (hrp.Position - target.Position).Magnitude <= range then
                                safeFireServer(remote, buffer.fromstring("\016"))
                            end
                        end)
                    end
                end)
            end)
        end
    });
    
    -- GK-Style Slide
    misc:AddButton({
        Name = "GK-Style Slide",
        Callback = function()
            safeCall(function()
                local UserInputService = safeGetService("UserInputService")
                local TweenService = safeGetService("TweenService")
                local Players = safeGetService("Players")
                local player = Players.LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait(10)
                local root = safeGetHumanoidRootPart(character)
                UserInputService.InputBegan:Connect(function(input, isProcessed)
                    if isProcessed or input.KeyCode ~= Enum.KeyCode.Q then return end
                    task.delay(0.425, function()
                        safeCall(function()
                            local target = root.CFrame + (root.CFrame.LookVector * 30)
                            local tweenInfo = TweenInfo.new(
                                0.05,
                                Enum.EasingStyle.Sine,
                                Enum.EasingDirection.Out
                            )
                            local tween = TweenService:Create(root, tweenInfo, {CFrame = target})
                            tween:Play()
                        end)
                    end)
                end)
            end)
        end
    });
    
    -- Suppress Notifications
    misc:AddToggle({
        Name = "Suppress Notifications",
        Default = false,
        Flag = "suppress_notifs",
        Callback = function(enabled)
            _G.suppressNotifs = enabled
            local StarterGui = safeGetService("StarterGui")
            if StarterGui and not _G.suppressNotifs then
                StarterGui:SetCore("SendNotification", {
                    Title = "Notifications",
                    Text = "Un-Suppressed.",
                    Duration = 3
                })
            end
        end
    });
    
    -- Auto-Dribble
    counter:AddToggle({
        Name = "Auto-Dribble",
        Default = false,
        Flag = "auto_dribble",
        Callback = function(enabled)
            _G.toggleDetection = enabled
            if enabled then
                safeCall(function()
                    local function notify(title, text, duration)
                        if not _G.suppressNotifs then
                            local StarterGui = safeGetService("StarterGui")
                            if StarterGui then
                                StarterGui:SetCore("SendNotification", {
                                    Title = title,
                                    Text = text,
                                    Duration = duration or 2
                                })
                            end
                        end
                    end
                    
                    notify("Auto-Dribble", "Enabled.")
                    
                    local function setupAutoBehavior(toggleKey, skillName, humanoidRootPart)
                        game:GetService("RunService").Stepped:Connect(function()
                            if not _G[toggleKey] or not humanoidRootPart then return end
                            safeCall(function()
                                local Players = game:GetService("Players")
                                local ReplicatedStorage = safeGetService("ReplicatedStorage")
                                for _, target in ipairs(Players:GetPlayers()) do
                                    if target ~= game:GetService("Players").LocalPlayer and target.Character and target.Team ~= game:GetService("Players").LocalPlayer.Team then
                                        local targetHRP = safeGetHumanoidRootPart(target.Character)
                                        local targetHumanoid = target.Character:FindFirstChild("Humanoid")
                                        local animator = targetHumanoid and targetHumanoid:FindFirstChildOfClass("Animator")
                                        if targetHRP and animator then
                                            local distance = (humanoidRootPart.Position - targetHRP.Position).Magnitude
                                            if distance <= 35 then
                                                local now = tick()
                                                local last = cooldowns[target] or 0
                                                if now - last >= 0.5 then
                                                    for _, track in ipairs(animator:GetPlayingAnimationTracks()) do
                                                        if track.Animation.AnimationId == ANIMATION_ID then
                                                            cooldowns[target] = now
                                                            local args
                                                            if skillName == "dribble" then
                                                                args = {
                                                                    buffer.fromstring("\b\001"),
                                                                    {
                                                                        { skillName, false }
                                                                    }
                                                                }
                                                            else
                                                                args = {
                                                                    buffer.fromstring("\b\001"),
                                                                    {
                                                                        { skillName }
                                                                    }
                                                                }
                                                            end
                                                            safeFireServer(ReplicatedStorage:FindFirstChild("ByteNetReliable"), unpack(args))
                                                            break
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end)
                        end)
                    end
                    
                    local function onCharacterLoaded(char)
                        local humanoidRootPart = safeGetHumanoidRootPart(char)
                        setupAutoBehavior("toggleDetection", "dribble", humanoidRootPart)
                    end
                    
                    local player = game:GetService("Players").LocalPlayer
                    if player.Character then
                        onCharacterLoaded(player.Character)
                    end
                    player.CharacterAdded:Connect(onCharacterLoaded)
                end)
            else
                _G.toggleDetection = false
            end
        end
    });
    
    -- Auto-Counter (Move One)
    counter:AddToggle({
        Name = "Auto-Counter (Move One)",
        Default = false,
        Flag = "auto_counter1",
        Callback = function(enabled)
            _G.toggleCounter1 = enabled
            if enabled then
                safeCall(function()
                    local function notify(title, text, duration)
                        if not _G.suppressNotifs then
                            local StarterGui = safeGetService("StarterGui")
                            if StarterGui then
                                StarterGui:SetCore("SendNotification", {
                                    Title = title,
                                    Text = text,
                                    Duration = duration or 2
                                })
                            end
                        end
                    end
                    
                    notify("Auto-Counter (Move One)", "Enabled.")
                    
                    local function setupAutoBehavior(toggleKey, skillName, humanoidRootPart)
                        game:GetService("RunService").Stepped:Connect(function()
                            if not _G[toggleKey] or not humanoidRootPart then return end
                            safeCall(function()
                                local Players = game:GetService("Players")
                                local ReplicatedStorage = safeGetService("ReplicatedStorage")
                                for _, target in ipairs(Players:GetPlayers()) do
                                    if target ~= game:GetService("Players").LocalPlayer and target.Character and target.Team ~= game:GetService("Players").LocalPlayer.Team then
                                        local targetHRP = safeGetHumanoidRootPart(target.Character)
                                        local targetHumanoid = target.Character:FindFirstChild("Humanoid")
                                        local animator = targetHumanoid and targetHumanoid:FindFirstChildOfClass("Animator")
                                        if targetHRP and animator then
                                            local distance = (humanoidRootPart.Position - targetHRP.Position).Magnitude
                                            if distance <= 35 then
                                                local now = tick()
                                                local last = cooldowns[target] or 0
                                                if now - last >= 0.5 then
                                                    for _, track in ipairs(animator:GetPlayingAnimationTracks()) do
                                                        if track.Animation.AnimationId == ANIMATION_ID then
                                                            cooldowns[target] = now
                                                            local args
                                                            if skillName == "dribble" then
                                                                args = {
                                                                    buffer.fromstring("\b\001"),
                                                                    {
                                                                        { skillName, false }
                                                                    }
                                                                }
                                                            else
                                                                args = {
                                                                    buffer.fromstring("\b\001"),
                                                                    {
                                                                        { skillName }
                                                                    }
                                                                }
                                                            end
                                                            safeFireServer(ReplicatedStorage:FindFirstChild("ByteNetReliable"), unpack(args))
                                                            break
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end)
                        end)
                    end
                    
                    local function onCharacterLoaded(char)
                        local humanoidRootPart = safeGetHumanoidRootPart(char)
                        setupAutoBehavior("toggleCounter1", "skill1", humanoidRootPart)
                    end
                    
                    local player = game:GetService("Players").LocalPlayer
                    if player.Character then
                        onCharacterLoaded(player.Character)
                    end
                    player.CharacterAdded:Connect(onCharacterLoaded)
                end)
            else
                _G.toggleCounter1 = false
            end
        end
    });
    
    -- Auto-Counter (Move Two)
    counter:AddToggle({
        Name = "Auto-Counter (Move Two)",
        Default = false,
        Flag = "auto_counter2",
        Callback = function(enabled)
            _G.toggleCounter2 = enabled
            if enabled then
                safeCall(function()
                    local function notify(title, text, duration)
                        if not _G.suppressNotifs then
                            local StarterGui = safeGetService("StarterGui")
                            if StarterGui then
                                StarterGui:SetCore("SendNotification", {
                                    Title = title,
                                    Text = text,
                                    Duration = duration or 2
                                })
                            end
                        end
                    end
                    
                    notify("Auto-Counter (Move Two)", "Enabled.")
                    
                    local function setupAutoBehavior(toggleKey, skillName, humanoidRootPart)
                        game:GetService("RunService").Stepped:Connect(function()
                            if not _G[toggleKey] or not humanoidRootPart then return end
                            safeCall(function()
                                local Players = game:GetService("Players")
                                local ReplicatedStorage = safeGetService("ReplicatedStorage")
                                for _, target in ipairs(Players:GetPlayers()) do
                                    if target ~= game:GetService("Players").LocalPlayer and target.Character and target.Team ~= game:GetService("Players").LocalPlayer.Team then
                                        local targetHRP = safeGetHumanoidRootPart(target.Character)
                                        local targetHumanoid = target.Character:FindFirstChild("Humanoid")
                                        local animator = targetHumanoid and targetHumanoid:FindFirstChildOfClass("Animator")
                                        if targetHRP and animator then
                                            local distance = (humanoidRootPart.Position - targetHRP.Position).Magnitude
                                            if distance <= 35 then
                                                local now = tick()
                                                local last = cooldowns[target] or 0
                                                if now - last >= 0.5 then
                                                    for _, track in ipairs(animator:GetPlayingAnimationTracks()) do
                                                        if track.Animation.AnimationId == ANIMATION_ID then
                                                            cooldowns[target] = now
                                                            local args
                                                            if skillName == "dribble" then
                                                                args = {
                                                                    buffer.fromstring("\b\001"),
                                                                    {
                                                                        { skillName, false }
                                                                    }
                                                                }
                                                            else
                                                                args = {
                                                                    buffer.fromstring("\b\001"),
                                                                    {
                                                                        { skillName }
                                                                    }
                                                                }
                                                            end
                                                            safeFireServer(ReplicatedStorage:FindFirstChild("ByteNetReliable"), unpack(args))
                                                            break
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end)
                        end)
                    end
                    
                    local function onCharacterLoaded(char)
                        local humanoidRootPart = safeGetHumanoidRootPart(char)
                        setupAutoBehavior("toggleCounter2", "skill2", humanoidRootPart)
                    end
                    
                    local player = game:GetService("Players").LocalPlayer
                    if player.Character then
                        onCharacterLoaded(player.Character)
                    end
                    player.CharacterAdded:Connect(onCharacterLoaded)
                end)
            else
                _G.toggleCounter2 = false
            end
        end
    });
    
    -- Auto-Counter (Move Three)
    counter:AddToggle({
        Name = "Auto-Counter (Move Three)",
        Default = false,
        Flag = "auto_counter3",
        Callback = function(enabled)
            _G.toggleCounter3 = enabled
            if enabled then
                safeCall(function()
                    local function notify(title, text, duration)
                        if not _G.suppressNotifs then
                            local StarterGui = safeGetService("StarterGui")
                            if StarterGui then
                                StarterGui:SetCore("SendNotification", {
                                    Title = title,
                                    Text = text,
                                    Duration = duration or 2
                                })
                            end
                        end
                    end
                    
                    notify("Auto-Counter (Move Three)", "Enabled.")
                    
                    local function setupAutoBehavior(toggleKey, skillName, humanoidRootPart)
                        game:GetService("RunService").Stepped:Connect(function()
                            if not _G[toggleKey] or not humanoidRootPart then return end
                            safeCall(function()
                                local Players = game:GetService("Players")
                                local ReplicatedStorage = safeGetService("ReplicatedStorage")
                                for _, target in ipairs(Players:GetPlayers()) do
                                    if target ~= game:GetService("Players").LocalPlayer and target.Character and target.Team ~= game:GetService("Players").LocalPlayer.Team then
                                        local targetHRP = safeGetHumanoidRootPart(target.Character)
                                        local targetHumanoid = target.Character:FindFirstChild("Humanoid")
                                        local animator = targetHumanoid and targetHumanoid:FindFirstChildOfClass("Animator")
                                        if targetHRP and animator then
                                            local distance = (humanoidRootPart.Position - targetHRP.Position).Magnitude
                                            if distance <= 35 then
                                                local now = tick()
                                                local last = cooldowns[target] or 0
                                                if now - last >= 0.5 then
                                                    for _, track in ipairs(animator:GetPlayingAnimationTracks()) do
                                                        if track.Animation.AnimationId == ANIMATION_ID then
                                                            cooldowns[target] = now
                                                            local args
                                                            if skillName == "dribble" then
                                                                args = {
                                                                    buffer.fromstring("\b\001"),
                                                                    {
                                                                        { skillName, false }
                                                                    }
                                                                }
                                                            else
                                                                args = {
                                                                    buffer.fromstring("\b\001"),
                                                                    {
                                                                        { skillName }
                                                                    }
                                                                }
                                                            end
                                                            safeFireServer(ReplicatedStorage:FindFirstChild("ByteNetReliable"), unpack(args))
                                                            break
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end)
                        end)
                    end
                    
                    local function onCharacterLoaded(char)
                        local humanoidRootPart = safeGetHumanoidRootPart(char)
                        setupAutoBehavior("toggleCounter3", "skill3", humanoidRootPart)
                    end
                    
                    local player = game:GetService("Players").LocalPlayer
                    if player.Character then
                        onCharacterLoaded(player.Character)
                    end
                    player.CharacterAdded:Connect(onCharacterLoaded)
                end)
            else
                _G.toggleCounter3 = false
            end
        end
    });
    
    -- Auto-Counter (Move Four)
    counter:AddToggle({
        Name = "Auto-Counter (Move Four)",
        Default = false,
        Flag = "auto_counter4",
        Callback = function(enabled)
            _G.toggleCounter4 = enabled
            if enabled then
                safeCall(function()
                    local function notify(title, text, duration)
                        if not _G.suppressNotifs then
                            local StarterGui = safeGetService("StarterGui")
                            if StarterGui then
                                StarterGui:SetCore("SendNotification", {
                                    Title = title,
                                    Text = text,
                                    Duration = duration or 2
                                })
                            end
                        end
                    end
                    
                    notify("Auto-Counter (Move Four)", "Enabled.")
                    
                    local function setupAutoBehavior(toggleKey, skillName, humanoidRootPart)
                        game:GetService("RunService").Stepped:Connect(function()
                            if not _G[toggleKey] or not humanoidRootPart then return end
                            safeCall(function()
                                local Players = game:GetService("Players")
                                local ReplicatedStorage = safeGetService("ReplicatedStorage")
                                for _, target in ipairs(Players:GetPlayers()) do
                                    if target ~= game:GetService("Players").LocalPlayer and target.Character and target.Team ~= game:GetService("Players").LocalPlayer.Team then
                                        local targetHRP = safeGetHumanoidRootPart(target.Character)
                                        local targetHumanoid = target.Character:FindFirstChild("Humanoid")
                                        local animator = targetHumanoid and targetHumanoid:FindFirstChildOfClass("Animator")
                                        if targetHRP and animator then
                                            local distance = (humanoidRootPart.Position - targetHRP.Position).Magnitude
                                            if distance <= 35 then
                                                local now = tick()
                                                local last = cooldowns[target] or 0
                                                if now - last >= 0.5 then
                                                    for _, track in ipairs(animator:GetPlayingAnimationTracks()) do
                                                        if track.Animation.AnimationId == ANIMATION_ID then
                                                            cooldowns[target] = now
                                                            local args
                                                            if skillName == "dribble" then
                                                                args = {
                                                                    buffer.fromstring("\b\001"),
                                                                    {
                                                                        { skillName, false }
                                                                    }
                                                                }
                                                            else
                                                                args = {
                                                                    buffer.fromstring("\b\001"),
                                                                    {
                                                                        { skillName }
                                                                    }
                                                                }
                                                            end
                                                            safeFireServer(ReplicatedStorage:FindFirstChild("ByteNetReliable"), unpack(args))
                                                            break
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end)
                        end)
                    end
                    
                    local function onCharacterLoaded(char)
                        local humanoidRootPart = safeGetHumanoidRootPart(char)
                        setupAutoBehavior("toggleCounter4", "skill4", humanoidRootPart)
                    end
                    
                    local player = game:GetService("Players").LocalPlayer
                    if player.Character then
                        onCharacterLoaded(player.Character)
                    end
                    player.CharacterAdded:Connect(onCharacterLoaded)
                end)
            else
                _G.toggleCounter4 = false
            end
        end
    });
    
    -- Auto-Counter (Move Five)
    counter:AddToggle({
        Name = "Auto-Counter (Move Five)",
        Default = false,
        Flag = "auto_counter5",
        Callback = function(enabled)
            _G.toggleCounter5 = enabled
            if enabled then
                safeCall(function()
                    local function notify(title, text, duration)
                        if not _G.suppressNotifs then
                            local StarterGui = safeGetService("StarterGui")
                            if StarterGui then
                                StarterGui:SetCore("SendNotification", {
                                    Title = title,
                                    Text = text,
                                    Duration = duration or 2
                                })
                            end
                        end
                    end
                    
                    notify("Auto-Counter (Move Five)", "Enabled.")
                    
                    local function setupAutoBehavior(toggleKey, skillName, humanoidRootPart)
                        game:GetService("RunService").Stepped:Connect(function()
                            if not _G[toggleKey] or not humanoidRootPart then return end
                            safeCall(function()
                                local Players = game:GetService("Players")
                                local ReplicatedStorage = safeGetService("ReplicatedStorage")
                                for _, target in ipairs(Players:GetPlayers()) do
                                    if target ~= game:GetService("Players").LocalPlayer and target.Character and target.Team ~= game:GetService("Players").LocalPlayer.Team then
                                        local targetHRP = safeGetHumanoidRootPart(target.Character)
                                        local targetHumanoid = target.Character:FindFirstChild("Humanoid")
                                        local animator = targetHumanoid and targetHumanoid:FindFirstChildOfClass("Animator")
                                        if targetHRP and animator then
                                            local distance = (humanoidRootPart.Position - targetHRP.Position).Magnitude
                                            if distance <= 35 then
                                                local now = tick()
                                                local last = cooldowns[target] or 0
                                                if now - last >= 0.5 then
                                                    for _, track in ipairs(animator:GetPlayingAnimationTracks()) do
                                                        if track.Animation.AnimationId == ANIMATION_ID then
                                                            cooldowns[target] = now
                                                            local args
                                                            if skillName == "dribble" then
                                                                args = {
                                                                    buffer.fromstring("\b\001"),
                                                                    {
                                                                        { skillName, false }
                                                                    }
                                                                }
                                                            else
                                                                args = {
                                                                    buffer.fromstring("\b\001"),
                                                                    {
                                                                        { skillName }
                                                                    }
                                                                }
                                                            end
                                                            safeFireServer(ReplicatedStorage:FindFirstChild("ByteNetReliable"), unpack(args))
                                                            break
                                                        end
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end)
                        end)
                    end
                    
                    local function onCharacterLoaded(char)
                        local humanoidRootPart = safeGetHumanoidRootPart(char)
                        setupAutoBehavior("toggleCounter5", "skill5", humanoidRootPart)
                    end
                    
                    local player = game:GetService("Players").LocalPlayer
                    if player.Character then
                        onCharacterLoaded(player.Character)
                    end
                    player.CharacterAdded:Connect(onCharacterLoaded)
                end)
            else
                _G.toggleCounter5 = false
            end
        end
    });
    
    -- Get Center-Field
    misc:AddButton({
        Name = "Get Center-Field",
        Callback = function()
            safeCall(function()
                local args = {
                    buffer.fromstring("\013\001\001\000B")
                }
                safeFireServer(game:GetService("ReplicatedStorage"):FindFirstChild("ByteNetReliable"), unpack(args))
                local args = {
                    buffer.fromstring("\013\001\001\000B")
                }
                safeFireServer(game:GetService("ReplicatedStorage"):FindFirstChild("ByteNetReliable"), unpack(args))
            end)
        end
    });
    
    -- Get Goalie
    misc:AddButton({
        Name = "Get Goalie",
        Callback = function()
            safeCall(function()
                local args = {
                    buffer.fromstring("\013\005\001\000B")
                }
                safeFireServer(game:GetService("ReplicatedStorage"):FindFirstChild("ByteNetReliable"), unpack(args))
                local args = {
                    buffer.fromstring("\013\005\001\000A")
                }
                safeFireServer(game:GetService("ReplicatedStorage"):FindFirstChild("ByteNetReliable"), unpack(args))
            end)
        end
    });
    
    -- Character Picker
    misc:AddTextbox({
        Name = "Character Picker",
        Default = "",
        Flag = "character_picker",
        Callback = function(v)
            safeCall(function()
                local validNames = {
                    ["rin"] = "\019\003\000rin",
                    ["aiku"] = "\019\004\000aiku",
                    ["barou"] = "\019\005\000barou",
                    ["sae"] = "\019\003\000sae",
                    ["kaiser"] = "\019\006\000kaiser",
                    ["don"] = "\019\010\000donlorenzo",
                    ["nagi"] = "\019\004\000nagi",
                    ["shidou"] = "\019\006\000shidou",
                    ["isagi"] = "\019\005\000isagi"
                }
                
                local match = validNames[v:lower()]
                if match then
                    local args = { buffer.fromstring(match) }
                    safeFireServer(game:GetService("ReplicatedStorage"):FindFirstChild("ByteNetReliable"), unpack(args))
                end
            end)
        end
    });
end

-- Movesets Tab
do
    local don = Movesets:DrawSection({
        Name = "Don Lorenzo (Nagi)",
        Position = "LEFT"
    });
    
    local ronaldo = Movesets:DrawSection({
        Name = "Ronaldo (Shidou)",
        Position = "right"
    });
    
    local misc = Movesets:DrawSection({
        Name = "Misc",
        Position = "right"
    });
    
    -- Don Lorenzo
    don:AddButton({
        Name = "Don Lorenzo (Nagi)",
        Callback = function()
            safeCall(function()
                local StarterGui = safeGetService("StarterGui")
                if StarterGui then
                    StarterGui:SetCore("SendNotification", {
                        Title = "Credits",
                        Text = "brought to you by celeron!",
                        Duration = 5,
                        Button1 = "OK",
                    })
                end
                
                local plr = game:GetService("Players").LocalPlayer
                local char = plr.Character
                local hum = char and char:FindFirstChildOfClass("Humanoid")
                local root = safeGetHumanoidRootPart(char)
                local UserInputService = safeGetService("UserInputService")
                local VirtualInputManager = safeGetService("VirtualInputManager")
                
                if not hum or not root then return end
                
                local skill1Anim = Instance.new("Animation")
                skill1Anim.AnimationId = "rbxassetid://102294508090597"
                local s1db = false
                local dribble = hum:LoadAnimation(skill1Anim)
                dribble.Priority = Enum.AnimationPriority.Action2
                
                local skill2Anim = Instance.new("Animation")
                skill2Anim.AnimationId = "rbxassetid://90734196141468"
                local s2db = false
                local controlJump = hum:LoadAnimation(skill2Anim)
                controlJump.Priority = Enum.AnimationPriority.Action2
                
                local skill2AnimVAR = Instance.new("Animation")
                skill2AnimVAR.AnimationId = "rbxassetid://82371642989185"
                local s2dbVar = false
                local controlLand = hum:LoadAnimation(skill2AnimVAR)
                controlLand.Priority = Enum.AnimationPriority.Action3
                
                local skill3Anim = Instance.new("Animation")
                skill3Anim.AnimationId = "rbxassetid://85862104307480"
                local s3db = false
                local pass = hum:LoadAnimation(skill3Anim)
                pass.Priority = Enum.AnimationPriority.Action2
                
                local function haveBall()
                    local Football = char and char:FindFirstChild("Ball")
                    return Football ~= nil
                end
                
                local function onKeyPress(inputObject, gameProcessedEvent)
                    if not gameProcessedEvent then
                        if inputObject.KeyCode == Enum.KeyCode.One then
                            if not haveBall() then return end
                            if s1db == false then
                                s1db = true
                                dribble:Play()
                                local vel = Instance.new("BodyVelocity")
                                vel.MaxForce = Vector3.new(1,0,1) * 30000
                                vel.Name = "BodyVelocity" .. math.random(1,99999)
                                vel.Velocity = root.CFrame.LookVector * 40
                                vel.Parent = root
                                game:GetService("Debris"):AddItem(vel, 2.4)
                                local sfx = game:GetService("ReplicatedStorage").Resources.donlorenzo.dribbletest:Clone()
                                sfx.Parent = root
                                sfx:Play()
                                game:GetService("Debris"):AddItem(sfx, 2.5)
                                for _, v in ipairs(game:GetService("ReplicatedStorage").Resources.donlorenzo.skill1movingpart:GetDescendants()) do
                                    if v.Name == "b" or v.Name == "p" then
                                        local new = v:Clone()
                                        new.Parent = root
                                        new.Enabled = true
                                        game:GetService("Debris"):AddItem(new, 2.5)
                                    end
                                end
                                for _, v in ipairs(char:GetChildren()) do
                                    if v.Name == "Torso" or v.Name == "Right Leg" or v.Name == "Right Arm" or v.Name == "Left Leg" or v.Name == "Left Arm" or v.Name == "Head" then
                                        for _, g in ipairs(game:GetService("ReplicatedStorage").Resources.donlorenzo.ult4aura:GetChildren()) do
                                            if g.Name == "Fire" or g.Name == "Fog" or g.Name == "R. C. Fire" or g.Name == "mainfire" then
                                                local new = g:Clone()
                                                new.Parent = v
                                                new.Enabled = true
                                                new.LockedToPart = true
                                                game:GetService("Debris"):AddItem(new, 2.5)
                                            end
                                        end
                                    end
                                end
                                repeat
                                    task.wait()
                                    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
                                    vel.Velocity = root.CFrame.LookVector * 40
                                until not root:FindFirstChild(vel.Name)
                                task.wait(21.6)
                                for _, v in ipairs(root:GetDescendants()) do
                                    if v.Name == "b" or v.Name == "p" then
                                        v:Destroy()
                                    end
                                end
                                s1db = false
                            end
                        elseif inputObject.KeyCode == Enum.KeyCode.Two then
                            if haveBall() then return end
                            if s2db == false then
                                s2db = true
                                controlJump:Play()
                                local did = false
                                for i = 1, 2, 0.1 do
                                    if game:GetService("Workspace").CurrentCamera.CameraType == Enum.CameraType.Scriptable then
                                        did = true
                                        break
                                    end
                                    task.wait(0.1)
                                end
                                if did then
                                    controlJump:Stop()
                                    controlLand:Play()
                                    local sfx = game:GetService("ReplicatedStorage").Resources.donlorenzo.ult4:Clone()
                                    sfx.Parent = root
                                    sfx:Play()
                                    for _, v in ipairs(game:GetService("ReplicatedStorage").Resources.donlorenzo.ult4vfx.rootlocation.skill4ballpartflashsteps:GetChildren()) do
                                        local new = v:Clone()
                                        new.Parent = char:FindFirstChild("Ball")
                                        new.Enabled = true
                                        new.LockedToPart = true
                                        game:GetService("Debris"):AddItem(new, 0.85)
                                    end
                                    for _, v in ipairs(char:GetChildren()) do
                                        if v.Name == "Torso" or v.Name == "Right Leg" or v.Name == "Right Arm" or v.Name == "Left Leg" or v.Name == "Left Arm" or v.Name == "Head" then
                                            for _, g in ipairs(game:GetService("ReplicatedStorage").Resources.donlorenzo.ult4aura:GetChildren()) do
                                                if g.Name == "Fire" or g.Name == "Fog" or g.Name == "R. C. Fire" or g.Name == "mainfire" then
                                                    local new = g:Clone()
                                                    new.Parent = v
                                                    new.Enabled = true
                                                    new.LockedToPart = true
                                                    game:GetService("Debris"):AddItem(new, 1)
                                                end
                                            end
                                        end
                                    end
                                    task.wait(0.85)
                                    controlLand:Stop()
                                end
                                task.wait(20)
                                s2db = false
                            end
                        elseif inputObject.KeyCode == Enum.KeyCode.Three then
                            if not haveBall() then return end
                            if s3db == false then
                                s3db = true
                                pass:Play()
                                local sfx = game:GetService("ReplicatedStorage").Resources.donlorenzo.skill2:Clone()
                                sfx.Parent = root
                                sfx:Play()
                                for _, v in ipairs(char:GetChildren()) do
                                    if v.Name == "Torso" or v.Name == "Right Leg" or v.Name == "Right Arm" or v.Name == "Left Leg" or v.Name == "Left Arm" or v.Name == "Head" then
                                        for _, g in ipairs(game:GetService("ReplicatedStorage").Resources.donlorenzo.ult4aura:GetChildren()) do
                                            if g.Name == "Fire" or g.Name == "Fog" or g.Name == "R. C. Fire" or g.Name == "mainfire" then
                                                local new = g:Clone()
                                                new.Parent = v
                                                new.Enabled = true
                                                new.LockedToPart = true
                                                game:GetService("Debris"):AddItem(new, 1)
                                            end
                                        end
                                    end
                                end
                                task.wait(25)
                                s3db = false
                            end
                        end
                    end
                end
                
                task.wait(1)
                UserInputService.InputBegan:Connect(onKeyPress)
            end)
        end
    });
    
    -- Ronaldo
    ronaldo:AddButton({
        Name = "Ronaldo (Shidou)",
        Callback = function()
            safeCall(function()
                local StarterGui = safeGetService("StarterGui")
                if StarterGui then
                    StarterGui:SetCore("SendNotification", {
                        Title = "Credits",
                        Text = "brought to you by celeron!",
                        Duration = 5,
                        Button1 = "OK",
                    })
                end
                
                task.wait(1)
                local userInput = safeGetService("UserInputService")
                local workspace = safeGetService("Workspace")
                local players = safeGetService("Players")
                local player = players.LocalPlayer
                local char = player.Character
                local hum = char and char:FindFirstChildOfClass("Humanoid")
                local root = safeGetHumanoidRootPart(char)
                
                if not hum or not root then return end
                
                local specialAnim = Instance.new("Animation")
                specialAnim.AnimationId = "rbxassetid://99863640587448"
                local function playSpecialAnimation()
                    if hum then
                        local animator = hum:FindFirstChild("Animator") or Instance.new("Animator", hum)
                        local track = animator:LoadAnimation(specialAnim)
                        track.Priority = Enum.AnimationPriority.Action
                        track:Play()
                    end
                end
                
                userInput.InputBegan:Connect(function(input, processed)
                    if not processed and input.KeyCode == Enum.KeyCode.G then
                        local stateFlow = workspace:FindFirstChild("characters") 
                                          and workspace.characters:FindFirstChild(player.Name)
                                          and workspace.characters[player.Name]:FindFirstChild("state")
                                          and workspace.characters[player.Name].state:FindFirstChild("flow")
                        if stateFlow and stateFlow.Value == 100 then
                            wait(1)
                            playSpecialAnimation()
                        end
                    end
                end)
                
                local character = player.Character or player.CharacterAdded:Wait(10)
                local humanoidRootPart = safeGetHumanoidRootPart(character)
                local replicatedStorage = safeGetService("ReplicatedStorage")
                local aura = replicatedStorage:FindFirstChild("Resources") and 
                             replicatedStorage.Resources:FindFirstChild("ronaldo") and 
                             replicatedStorage.Resources.ronaldo:FindFirstChild("Aura")
                
                if aura and humanoidRootPart then
                    local auraModel = Instance.new("Model")
                    auraModel.Name = "RonaldoAura"
                    auraModel.Parent = workspace
                    local bodyParts = {
                        humanoidRootPart,
                        character:FindFirstChild("UpperTorso") or character:FindFirstChild("Torso"),
                        character:FindFirstChild("LeftUpperArm") or character:FindFirstChild("Left Arm"),
                        character:FindFirstChild("RightUpperArm") or character:FindFirstChild("Right Arm"),
                        character:FindFirstChild("LeftUpperLeg") or character:FindFirstChild("Left Leg"),
                        character:FindFirstChild("RightUpperLeg") or character:FindFirstChild("Right Leg"),
                        character:FindFirstChild("Head")
                    }
                    
                    for _, particleEmitter in ipairs(aura:GetDescendants()) do
                        if particleEmitter:IsA("ParticleEmitter") then
                            particleEmitter.Enabled = true
                        end
                    end
                    
                    for _, bodyPart in ipairs(bodyParts) do
                        if bodyPart then
                            local auraAttachment = aura:Clone()
                            auraAttachment.Parent = auraModel
                            auraAttachment.CFrame = bodyPart.CFrame
                            local weld = Instance.new("WeldConstraint")
                            weld.Part0 = bodyPart
                            weld.Part1 = auraAttachment
                            weld.Parent = bodyPart
                        end
                    end
                end
                
                local char = player.Character
                local hum = char and char:FindFirstChildOfClass("Humanoid")
                local root = safeGetHumanoidRootPart(char)
                
                if not hum or not root then return end
                
                local bicycle1 = Instance.new("Animation")
                bicycle1.AnimationId = "rbxassetid://126734456236034"
                local bicycleDB = false
                local bicycle = hum:LoadAnimation(bicycle1)
                bicycle.Priority = Enum.AnimationPriority.Action2
                
                local dribble1 = Instance.new("Animation")
                dribble1.AnimationId = "rbxassetid://95054281301535"
                local dribbleDB = false
                local dribble = hum:LoadAnimation(dribble1)
                dribble.Priority = Enum.AnimationPriority.Action2
                
                local assets = game:GetService("ReplicatedStorage").Resources.ronaldo.bicyclekick
                local function haveBall()
                    local Football = char and char:FindFirstChild("Ball")
                    return Football ~= nil
                end
                
                local function onKeyPress(inputObject, gameProcessedEvent)
                    if not gameProcessedEvent then
                        if inputObject.KeyCode == Enum.KeyCode.Two then
                            if not haveBall() then return end
                            if bicycleDB == false then
                                bicycleDB = true
                                bicycle:Play()
                                task.wait(0.7)
                                local boom = assets.vfx2:Clone()
                                boom.Parent = root
                                boom.vfx2:FindFirstChild("RONALDO!!!!"):Emit(1)
                                game:GetService("Debris"):AddItem(boom, 3)
                                task.wait(19)
                                bicycleDB = false
                            end
                        end
                    end
                end
                
                UserInputService.InputBegan:Connect(onKeyPress)
                local userInput = safeGetService("UserInputService")
                local workspace = safeGetService("Workspace")
                local players = safeGetService("Players")
                local player = players.LocalPlayer
                local charsFolder = workspace:FindFirstChild("characters")
                local charModel = charsFolder and charsFolder:FindFirstChild(player.Name)
                local rootPart = charModel and safeGetHumanoidRootPart(charModel)
                
                if not rootPart then return end
                
                local lastUseTime = 0
                local cooldown = 7.5
                local function updateToolName()
                    local gui = player:FindFirstChild("PlayerGui")
                    if gui then
                        local hotbar = gui:FindFirstChild("Hotbar")
                        if hotbar then
                            local backpack = hotbar:FindFirstChild("Backpack")
                            if backpack then
                                local hotbarSkills = backpack:FindFirstChild("Hotbar")
                                if hotbarSkills then
                                    local skill1 = hotbarSkills:FindFirstChild("skill1")
                                    local skill2 = hotbarSkills:FindFirstChild("skill2")
                                    if skill1 then
                                        local base1 = skill1:FindFirstChild("Base")
                                        if base1 then
                                            local toolName1 = base1:FindFirstChild("ToolName")
                                            if toolName1 and toolName1:IsA("TextLabel") then
                                                toolName1.Text = "CR7 Dribble"
                                            end
                                            local reuse1 = base1:FindFirstChild("Reuse")
                                            if reuse1 and reuse1:IsA("TextLabel") then
                                                reuse1.Text = "Variant"
                                            end
                                        end
                                    end
                                    if skill2 then
                                        local base2 = skill2:FindFirstChild("Base")
                                        if base2 then
                                            local toolName2 = base2:FindFirstChild("ToolName")
                                            if toolName2 and toolName2:IsA("TextLabel") then
                                                toolName2.Text = "Bicycle Kick"
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
                
                local function activate()
                    if not workspace.characters[player.Name]:FindFirstChild("Ball") then return end
                    local currentTime = tick()
                    if currentTime - lastUseTime < cooldown then return end
                    lastUseTime = currentTime
                    local anim = Instance.new("Animation")
                    anim.AnimationId = "rbxassetid://88322771999430"
                    local sound = Instance.new("Sound")
                    sound.SoundId = "rbxassetid://132960304435042"
                    sound.Volume = 1
                    sound.Parent = rootPart
                    local humanoid = charModel:FindFirstChild("Humanoid")
                    if humanoid and rootPart then
                        local animator = humanoid:FindFirstChild("Animator") or Instance.new("Animator", humanoid)
                        local track = animator:LoadAnimation(anim)
                        sound:Play()
                        track:Play()
                        task.wait(1.5)
                        local dist = 165
                        local speed = 0.5
                        local moved = 0
                        local conn
                        conn = game:GetService("RunService").RenderStepped:Connect(function(deltaTime)
                            if moved >= dist then
                                conn:Disconnect()
                                local tweenService = game:GetService("TweenService")
                                local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
                                local slideTween = tweenService:Create(rootPart, tweenInfo, {CFrame = rootPart.CFrame + (rootPart.CFrame.LookVector * 25)})
                                slideTween:Play()
                                return
                            end
                            local forward = rootPart.CFrame.LookVector
                            rootPart.CFrame = rootPart.CFrame + (forward * speed)
                            moved = moved + speed
                        end)
                    end
                end
                
                userInput.InputBegan:Connect(function(input, processed)
                    if not processed then
                        if input.KeyCode == Enum.KeyCode.One then
                            activate()
                        end
                    end
                end)
                
                updateToolName()
            end)
        end
    });
    
    -- Trolling Moveset
    misc:AddButton({
        Name = "Trolling Moveset",
        Callback = function()
            safeCall(function()
                local char = safeGetCharacter()
                local plr = game:GetService("Players").LocalPlayer
                local hotbar = plr:FindFirstChild("PlayerGui") and plr.PlayerGui:FindFirstChild("Hotbar")
                local humanoid = char and char:FindFirstChildOfClass("Humanoid")
                
                if not char or not hotbar or not humanoid then return end
                
                local animator = humanoid:FindFirstChildOfClass("Animator")
                local runAnimation = Instance.new("Animation")
                runAnimation.AnimationId = "rbxassetid://117921992582675"
                local walkAnimation = Instance.new("Animation")
                walkAnimation.AnimationId = "rbxassetid://117921992582675"
                local runTrack = animator:LoadAnimation(runAnimation)
                local walkTrack = animator:LoadAnimation(walkAnimation)
                
                humanoid.Running:Connect(function(speed)
                    if speed > 8 then
                        walkTrack:Stop()
                        runTrack:Play()
                    elseif speed > 0 then
                        runTrack:Stop()
                        walkTrack:Play()
                    else
                        walkTrack:Stop()
                        runTrack:Stop()
                    end
                end)
                
                local flowTexts = {
                    ["nagi"] = "mcdonalds application",
                    ["isagi"] = "2 loving parents",
                    ["sae"] = "aura farm",
                    ["rin"] = "luke warm",
                    ["donlorenzo"] = "homeless person",
                    ["kaiser"] = "clown of isagi's story",
                    ["shidou"] = "saes #1 fan",
                    ["aiku"] = "dih snake",
                    ["barou"] = "barou barou kun",
                    ["bachira"] = "ball hog",
                    ["gagamaru"] = "team carrying goat"
                }
                
                local style = plr:GetAttribute("style") or ""
                if flowTexts[style] then
                    hotbar.MagicHealth.TextLabel.Text = flowTexts[style]
                else
                    hotbar.MagicHealth.TextLabel.Text = "you dont exist"
                end
                
                hotbar.MagicHealth.ModeText.Text = ""
                hotbar.MagicHealth.Health.Frame.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            end)
        end
    });
end

-- Emotes Tab
do
    local emotes = Emotes:DrawSection({
        Name = "Emotes",
        Position = "LEFT"
    });
    
    -- Toosie Slide
    emotes:AddButton({
        Name = "Toosie Slide",
        Callback = function()
            safeCall(function()
                _G.isEnabled = _G.isEnabled or false
                local animationId = "rbxassetid://95959941666543"
                local soundId = "rbxassetid://1845341094"
                local player = game:GetService("Players").LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait(10)
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                local animator = humanoid:FindFirstChildOfClass("Animator")
                local animation = Instance.new("Animation")
                animation.AnimationId = animationId
                local animationTrack = animator:LoadAnimation(animation)
                local sound
                
                local function toggleState()
                    _G.isEnabled = not _G.isEnabled
                    if _G.isEnabled then
                        animationTrack:Play()
                        sound = Instance.new("Sound")
                        sound.Name = "Toosie Slide"
                        sound.SoundId = soundId
                        sound.Looped = true
                        sound.Parent = game:GetService("SoundService")
                        sound:Play()
                    else
                        for _, track in ipairs(animator:GetPlayingAnimationTracks()) do
                            track:Stop()
                        end
                        local existingSound = game:GetService("SoundService"):FindFirstChild("Toosie Slide")
                        if existingSound then
                            existingSound:Stop()
                            existingSound:Destroy()
                        end
                    end
                end
                
                toggleState()
            end)
        end
    });
    
    -- Sae Pose
    emotes:AddButton({
        Name = "Sae Pose",
        Callback = function()
            safeCall(function()
                _G.SaePose = _G.SaePose or false
                local animationId = "rbxassetid://136812327261825"
                local soundId = "rbxassetid://1843404009"
                local player = game:GetService("Players").LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait(10)
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                local animator = humanoid:FindFirstChildOfClass("Animator")
                local animation = Instance.new("Animation")
                animation.AnimationId = animationId
                local animationTrack = animator:LoadAnimation(animation)
                local sound
                
                local function toggleState()
                    _G.SaePose = not _G.SaePose
                    if _G.SaePose then
                        animationTrack:Play()
                        sound = Instance.new("Sound")
                        sound.Name = "Sae Pose"
                        sound.SoundId = soundId
                        sound.Volume = 1
                        sound.Looped = true
                        sound.Parent = game:GetService("SoundService")
                        sound:Play()
                    else
                        for _, track in ipairs(animator:GetPlayingAnimationTracks()) do
                            track:Stop()
                        end
                        local existingSound = game:GetService("SoundService"):FindFirstChild("Sae Pose")
                        if existingSound then
                            existingSound:Stop()
                            existingSound:Destroy()
                        end
                    end
                end
                
                toggleState()
            end)
        end
    });
    
    -- Akuma Taunt
    emotes:AddButton({
        Name = "Akuma Taunt",
        Callback = function()
            safeCall(function()
                local animationId = "rbxassetid://111005363990501"
                local soundId = "rbxassetid://133370927301258"
                local player = game:GetService("Players").LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait(10)
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                local animator = humanoid:FindFirstChildOfClass("Animator")
                local animation = Instance.new("Animation")
                animation.AnimationId = animationId
                local animationTrack = animator:LoadAnimation(animation)
                local sound = Instance.new("Sound")
                sound.Name = "Akuma Taunt"
                sound.SoundId = soundId
                sound.Volume = 10
                sound.Parent = game:GetService("SoundService")
                
                local function runOnce()
                    animationTrack:Play()
                    sound:Play()
                    sound.Ended:Connect(function()
                        sound:Destroy()
                    end)
                    animationTrack.Stopped:Connect(function()
                        animationTrack:Stop()
                    end)
                end
                
                runOnce()
            end)
        end
    });
    
    -- Cartoon Fall
    emotes:AddButton({
        Name = "Cartoon Fall",
        Callback = function()
            safeCall(function()
                local animationId = "rbxassetid://98064370044269"
                local soundIds = { "rbxassetid://8663054927", "rbxassetid://4979513906" }
                local player = game:GetService("Players").LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait(10)
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                local animator = humanoid:FindFirstChildOfClass("Animator")
                local animation = Instance.new("Animation")
                animation.AnimationId = animationId
                local animationTrack = animator:LoadAnimation(animation)
                local sound = Instance.new("Sound")
                sound.Name = "Ragdoll"
                sound.Volume = 10
                sound.Parent = game:GetService("SoundService")
                local currentIndex = 1
                
                local function playNextSound()
                    if currentIndex <= #soundIds then
                        sound.SoundId = soundIds[currentIndex]
                        sound:Play()
                        sound.Ended:Connect(function()
                            currentIndex = currentIndex + 1
                            playNextSound()
                        end)
                    else
                        sound:Destroy()
                    end
                end
                
                animationTrack:Play()
                playNextSound()
            end)
        end
    });
    
    -- Spit
    emotes:AddButton({
        Name = "Spit",
        Callback = function()
            safeCall(function()
                local animationId = "rbxassetid://97257010665720"
                local soundId = "rbxassetid://18111052648"
                local player = game:GetService("Players").LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait(10)
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                local animator = humanoid:FindFirstChildOfClass("Animator")
                local animation = Instance.new("Animation")
                animation.AnimationId = animationId
                local animationTrack = animator:LoadAnimation(animation)
                local sound = Instance.new("Sound")
                sound.Name = "Spit"
                sound.SoundId = soundId
                sound.Volume = 2
                sound.Parent = game:GetService("SoundService")
                
                animationTrack:Play()
                sound:Play()
                sound.Ended:Connect(function()
                    sound:Destroy()
                end)
            end)
        end
    });
end

-- Teleports Tab
do
    local teleports = Teleports:DrawSection({
        Name = "Map Teleports",
        Position = "LEFT"
    });
    
    -- Spawn Area
    teleports:AddButton({
        Name = "Spawn Area",
        Callback = function()
            safeCall(function()
                local plr = game:GetService("Players").LocalPlayer
                local char = plr.Character or plr.CharacterAdded:Wait(10)
                local rootPart = safeGetHumanoidRootPart(char)
                if rootPart then
                    rootPart.CFrame = CFrame.new(-269, 4, -1599)
                end
            end)
        end
    });
    
    -- Middle Field
    teleports:AddButton({
        Name = "Middle Field",
        Callback = function()
            safeCall(function()
                local plr = game:GetService("Players").LocalPlayer
                local char = plr.Character or plr.CharacterAdded:Wait(10)
                local rootPart = safeGetHumanoidRootPart(char)
                if rootPart then
                    rootPart.CFrame = CFrame.new(-540, 3, 1274)
                end
            end)
        end
    });
    
    -- Gallery Area
    teleports:AddButton({
        Name = "Gallery Area",
        Callback = function()
            safeCall(function()
                local plr = game:GetService("Players").LocalPlayer
                local char = plr.Character or plr.CharacterAdded:Wait(10)
                local rootPart = safeGetHumanoidRootPart(char)
                if rootPart then
                    rootPart.CFrame = CFrame.new(109, 66, 3337)
                end
            end)
        end
    });
    
    -- Goal Box (A)
    teleports:AddButton({
        Name = "Goal Box (A)",
        Callback = function()
            safeCall(function()
                local plr = game:GetService("Players").LocalPlayer
                local char = plr.Character or plr.CharacterAdded:Wait(10)
                local rootPart = safeGetHumanoidRootPart(char)
                if rootPart then
                    rootPart.CFrame = CFrame.new(-537, 3, 1575)
                end
            end)
        end
    });
    
    -- Goal Box (B)
    teleports:AddButton({
        Name = "Goal Box (B)",
        Callback = function()
            safeCall(function()
                local plr = game:GetService("Players").LocalPlayer
                local char = plr.Character or plr.CharacterAdded:Wait(10)
                local rootPart = safeGetHumanoidRootPart(char)
                if rootPart then
                    rootPart.CFrame = CFrame.new(-534, 3, 974)
                end
            end)
        end
    });
end

-- Others Tab
do
    local misc = Others:DrawSection({
        Name = "Miscellaneous",
        Position = "LEFT"
    });
    
    -- Mute Crowd
    misc:AddButton({
        Name = "Mute Crowd (REJOIN TO FIX)",
        Callback = function()
            safeCall(function()
                while true do
                    task.wait(0.05)
                    safeCall(function()
                        game:GetService("SoundService")["football-crowd-3-69245"].Volume = 0
                    end)
                end
            end)
        end
    });
    
    -- Background Music
    misc:AddToggle({
        Name = "Background Music",
        Default = false,
        Flag = "bg_music",
        Callback = function(enabled)
            if enabled then
                safeCall(function()
                    local plr = game:GetService("Players").LocalPlayer
                    local char = plr.Character
                    local hum = char and char:FindFirstChildOfClass("Humanoid")
                    local music = {
                        "rbxassetid://126478006472705",
                        "rbxassetid://138210588552041",
                        "rbxassetid://137856744878500",
                        "rbxassetid://97581213878614",
                        "rbxassetid://71371939631022",
                        "rbxassetid://119592773299545",
                        "rbxassetid://134456641764445",
                        "rbxassetid://100509882059819",
                        "rbxassetid://128623853689708",
                        "rbxassetid://70979311703713",
                        "rbxassetid://92420662159372",
                        "rbxassetid://97837345641106",
                        "rbxassetid://102469310336986",
                        "rbxassetid://101851803743361",
                    }
                    
                    if game:GetService("SoundService"):FindFirstChild("BGMusic") then
                        game:GetService("SoundService").BGMusic:Destroy()
                    end
                    
                    local sfx = Instance.new("Sound")
                    sfx.Name = "BGMusic"
                    sfx.Parent = game:GetService("SoundService")
                    sfx.SoundId = music[math.random(1, #music)]
                    
                    task.spawn(function()
                        while hum do
                            sfx:Play()
                            task.wait(sfx.TimeLength)
                            sfx.SoundId = music[math.random(1, #music)]
                        end
                    end)
                    
                    task.spawn(function()
                        while hum do
                            task.wait()
                            if game:GetService("ReplicatedStorage").workspace.awaken.Value ~= nil then
                                sfx:Pause()
                            else
                                sfx:Resume()
                            end
                        end
                    end)
                    
                    hum.Died:Connect(function()
                        sfx:Destroy()
                    end)
                end)
            end
        end
    });
    
    -- Infinite Yield
    misc:AddButton({
        Name = "Infinite Yield",
        Callback = function()
            safeCall(function()
                loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source", true))()
            end)
        end
    });
    
    -- Upgrade UI
    misc:AddButton({
        Name = "Upgrade UI (very cool actually)",
        Callback = function()
            safeCall(function()
                loadstring(game:HttpGet("https://pastebin.com/raw/QDNYsgxQ", true))()
            end)
        end
    });
    
    -- Overtime Cinematics
    misc:AddButton({
        Name = "Overtime Cinematics",
        Callback = function()
            safeCall(function()
                local vals = game:GetService("ReplicatedStorage").workspace
                local timer = vals.timer
                local ingame = vals.roundstart
                local music1Isagi = game:GetService("ReplicatedStorage").Resources.isagi["isagi themeover"]
                local music2Sae = game:GetService("ReplicatedStorage").Resources.sae["sae one shot match theme"]
                
                local gui = Instance.new("ScreenGui")
                gui.ScreenInsets = Enum.ScreenInsets.None
                gui.Name = "overtimethang"
                gui.Parent = game:GetService("Players").LocalPlayer.PlayerGui
                
                local image = Instance.new("ImageLabel")
                image.AnchorPoint = Vector2.new(0.5, 0.5)
                image.Position = UDim2.new(0.5, 0,0.5, 0)
                image.Size = UDim2.new(1.2, 0,1.2, 0)
                image.Image = "rbxassetid://11030033771"
                image.ImageTransparency = 0.8
                image.BackgroundTransparency = 1
                image.Parent = gui
                
                local overtime = false
                task.spawn(function()
                    while task.wait(0.05) do
                        image.Visible = overtime
                        if overtime == true then
                            if game:GetService("Workspace").CurrentCamera.CameraType == Enum.CameraType.Custom then
                                game:GetService("TweenService"):Create(game:GetService("Workspace").CurrentCamera, TweenInfo.new(0.2), {FieldOfView = 100}):Play()
                            end
                            if image.Rotation == 0 then
                                image.Rotation = 180
                            else
                                image.Rotation = 0
                            end
                        end
                    end
                end)
                
                timer.Changed:Connect(function()
                    if timer.Value == 0 and ingame.Value == true then
                        overtime = true
                        repeat
                            music1Isagi:Play()
                            for i = 1, 50 do
                                task.wait(1)
                                if ingame.Value == false then
                                    break
                                end
                            end
                            music2Sae:Play()
                            for i = 1, 58 do
                                task.wait(1)
                                if ingame.Value == false then
                                    break
                                end
                            end
                        until ingame.Value == false
                    elseif ingame.Value == false then
                        overtime = false
                        music1Isagi:Stop()
                        music2Sae:Stop()
                        game:GetService("TweenService"):Create(game:GetService("Workspace").CurrentCamera, TweenInfo.new(0.2), {FieldOfView = 70}):Play()
                    end
                end)
            end)
        end
    });
end

-- Info Tab
do
    local info = Info:DrawSection({
        Name = "Script Information",
        Position = "LEFT"
    });
    
    info:AddParagraph({
        Title = "Description",
        Content = "This is the ultimate football script combining all features from the original Azure Latch script with the Souls Hub UI library.\n\nAll features have been carefully integrated with proper error handling and fallbacks to ensure stability.\n\nThis script provides advanced game mechanics, movement, and visual enhancements while maintaining a clean and intuitive UI."
    });
    
    info:AddParagraph({
        Title = "Controls",
        Content = "Show / Hide GUI: Right Alt\n\nKeybinds:\nZ = Auto-Dribble\nX = Move One\nC = Move Two\nV = Move Three\nN = Move Four\nM = Move Five"
    });
    
    info:AddButton({
        Name = "Copy Owner Discord Username",
        Callback = function()
            safeCall(function()
                local StarterGui = safeGetService("StarterGui")
                if StarterGui then
                    StarterGui:SetCore("SendNotification", {
                        Title = "Discord Username",
                        Text = "Copied to your clipboard!",
                        Duration = 3,
                        Button1 = "alright fella",
                    })
                end
                setclipboard("ghostofcelleron")
            end)
        end
    });
    
    info:AddButton({
        Name = "Copy Discord Server Invite",
        Callback = function()
            safeCall(function()
                local StarterGui = safeGetService("StarterGui")
                if StarterGui then
                    StarterGui:SetCore("SendNotification", {
                        Title = "Discord Invite",
                        Text = "Copied to your clipboard!",
                        Duration = 3,
                        Button1 = "alright fella",
                    })
                end
                setclipboard("https://discord.gg/8stFYxJv4R")
            end)
        end
    });
    
    info:AddParagraph({
        Title = "Credits",
        Content = "Original Script By: Celeron + Daffy\nUI Library By: Soul\nCombined & Enhanced By: Soul\n\nThis script is for educational purposes only.\n\nRemember to play fair and respect other players."
    });
end

-- Final step: Draw the UI
Window:Draw()
