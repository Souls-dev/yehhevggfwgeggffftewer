local SoulsHub = loadstring(game:HttpGet("https://pandadevelopment.net/virtual/file/e7f388d3c065df7a"))();

task.wait(1)

SoulsHub:Loader(nil, 1).yield()

local FileWatcher = SoulsHub:ConfigManager({
    Directory = "SoulsHub",
    Config = "LegendsOfSpeed"
});

local Window = SoulsHub.new({
    Keybind = "LeftAlt",
});

local watermark = Window:Watermark();

watermark:AddText({
    Icon = "user",
    Text = "Legends of Speed"
})

local vim = watermark:AddText({
    Icon = "clock",
    Text = SoulsHub:GetTimeNow()
})

task.spawn(function()
    while true do task.wait()
        vim:SetText(SoulsHub:GetTimeNow())
        Window.Username = game:GetService("Players").LocalPlayer.Name
    end;
end)

Window:Update({
    ExpireDate = SoulsHub:GetDate(tick() + 84000)
})

watermark:AddText({
    Icon = "server",
    Text = "Legends Of Speed"
})

-- Initialize global variables
_G.FeatureStates = _G.FeatureStates or {
    AutoFarm = false,
    AutoRebirth = false,
    NoClip = false,
    AutoRace = false,
    HidePopups = false,
    InfJump = false,
    AutoSellAllTrails = false,
    AutoSellAllPets = false,
    AutoUnique = false,
    AutoVoidEgg = false,
    AutoBirdieEgg = false,
    AutoLegendsEgg = false,
    AutoEvolve = false,
    HoopsFarm = false,
    FarmSpeed = 10,
    FarmLocation = "City",
    FarmOrb = "Yellow Orb",
    WalkSpeed = 16,
    JumpPower = 50,
    GemDuplication = false,
    GodFarmEnabled = false,
    GodFarmType = "XP",
    GodFarmCount = 10000
}

-- Create tabs
local MainTab = Window:DrawTab({
    Icon = "home",
    Name = "Main",
    Type = "Double"
});

local AutoFarmTab = Window:DrawTab({
    Icon = "diamond",
    Name = "Auto Farm"
});

local TeleportTab = Window:DrawTab({
    Icon = "map-pin",
    Name = "Teleport"
});

local RaceTab = Window:DrawTab({
    Icon = "racing-flag",
    Name = "Race"
});

local CrystalTab = Window:DrawTab({
    Icon = "gem",
    Name = "Crystal"
});

local GodFarmTab = Window:DrawTab({
    Icon = "infinity",
    Name = "God Farm"
});

local MiscTab = Window:DrawTab({
    Icon = "settings",
    Name = "Misc"
});

local CreditsTab = Window:DrawTab({
    Icon = "info",
    Name = "Credits"
});

-- Main Tab
do
    local generalSection = MainTab:DrawSection({
        Name = "Player Information",
        Position = "LEFT"
    });
    
    local actionsSection = MainTab:DrawSection({
        Name = "Player Actions",
        Position = "right"
    });
    
    local clientSection = MainTab:DrawSection({
        Name = "Client Information",
        Position = "right"
    });
    
    -- Client Information
    local gameTime = clientSection:AddParagraph({
        Title = "Game Time",
        Content = "Loading..."
    });
    
    local fpsValue = clientSection:AddParagraph({
        Title = "FPS",
        Content = "Loading..."
    });
    
    local pingValue = clientSection:AddParagraph({
        Title = "Ping",
        Content = "Loading..."
    });
    
    -- Update client information
    task.spawn(function()
        while true do task.wait(1)
            if game.Workspace then
                local GameTime = math.floor(workspace.DistributedGameTime + 0.5)
                local Hour = math.floor(GameTime / (60 ^ 2)) % 24
                local Minute = math.floor(GameTime / (60 ^ 1)) % 60
                local Second = math.floor(GameTime / (60 ^ 0)) % 60
                gameTime:SetText(string.format("Hours: %d Minutes: %d Seconds: %d", Hour, Minute, Second))
            end
            
            local Fps = workspace:GetRealPhysicsFPS() or 0
            fpsValue:SetText(string.format("%d", Fps))
            
            local Ping = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString() or "0"
            pingValue:SetText(Ping)
        end
    end)
    
    -- Player Actions
    actionsSection:AddButton({
        Name = "Claim All Chests",
        Callback = function()
            local success, err = pcall(function()
                if workspace:FindFirstChild("goldenChest") and workspace.goldenChest:FindFirstChild("circleInner") then
                    workspace.goldenChest.circleInner.CFrame = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame
                end
                if workspace:FindFirstChild("enchantedChest") and workspace.enchantedChest:FindFirstChild("circleInner") then
                    workspace.enchantedChest.circleInner.CFrame = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame
                end
                if workspace:FindFirstChild("magmaChest") and workspace.magmaChest:FindFirstChild("circleInner") then
                    workspace.magmaChest.circleInner.CFrame = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame
                end
                if workspace:FindFirstChild("groupRewardsCircle") and workspace.groupRewardsCircle:FindFirstChild("circleInner") then
                    workspace.groupRewardsCircle.circleInner.CFrame = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame
                end
                task.wait(0.5)
                if workspace:FindFirstChild("goldenChest") and workspace.goldenChest:FindFirstChild("circleInner") then
                    workspace.goldenChest.circleInner.CFrame = workspace.goldenChest.Position
                end
                if workspace:FindFirstChild("enchantedChest") and workspace.enchantedChest:FindFirstChild("circleInner") then
                    workspace.enchantedChest.circleInner.CFrame = workspace.enchantedChest.Position
                end
                if workspace:FindFirstChild("magmaChest") and workspace.magmaChest:FindFirstChild("circleInner") then
                    workspace.magmaChest.circleInner.CFrame = workspace.magmaChest.Position
                end
                if workspace:FindFirstChild("groupRewardsCircle") and workspace.groupRewardsCircle:FindFirstChild("circleInner") then
                    workspace.groupRewardsCircle.circleInner.CFrame = workspace.groupRewardsCircle.Position
                end
            end)
            if not success and err then
                print("Claim Chests Error:", err)
            end
        end
    });
    
    actionsSection:AddButton({
        Name = "Disable Trading",
        Callback = function()
            local success, err = pcall(function()
                game:GetService("ReplicatedStorage").rEvents.tradingEvent:FireServer("disableTrading")
            end)
            if not success and err then
                print("Disable Trading Error:", err)
            end
        end
    });
    
    actionsSection:AddButton({
        Name = "Enable Trading",
        Callback = function()
            local success, err = pcall(function()
                game:GetService("ReplicatedStorage").rEvents.tradingEvent:FireServer("enableTrading")
            end)
            if not success and err then
                print("Enable Trading Error:", err)
            end
        end
    });
    
    -- Anti-AFK
    local antiAfkToggle = generalSection:AddToggle({
        Name = "Anti AFK",
        Flag = "anti_afk",
        Default = true,
        Callback = function(state)
            _G.FeatureStates.AntiAFK = state
        end
    });
    
    -- Auto Rebirth
    local autoRebirthToggle = generalSection:AddToggle({
        Name = "Auto Rebirth",
        Flag = "auto_rebirth",
        Default = false,
        Callback = function(state)
            _G.FeatureStates.AutoRebirth = state
            if state then
                task.spawn(function()
                    while _G.FeatureStates.AutoRebirth do
                        task.wait(1)
                        local success, err = pcall(function()
                            game:GetService("ReplicatedStorage").rEvents.rebirthEvent:FireServer("rebirthRequest")
                        end)
                        if not success and err then
                            print("Auto Rebirth Error:", err)
                        end
                    end
                end)
            end
        end
    });
    
    -- No Clip
    local noClipToggle = generalSection:AddToggle({
        Name = "No Clip",
        Flag = "no_clip",
        Default = false,
        Callback = function(state)
            _G.FeatureStates.NoClip = state
            if state then
                task.spawn(function()
                    while _G.FeatureStates.NoClip do
                        task.wait(0.1)
                        local success, err = pcall(function()
                            local player = game:GetService("Players").LocalPlayer
                            if player and player.Character then
                                for _, v in pairs(player.Character:GetDescendants()) do
                                    if v:IsA("BasePart") then
                                        v.CanCollide = false
                                    end
                                end
                            end
                        end)
                        if not success and err then
                            print("No Clip Error:", err)
                        end
                    end
                end)
            end
        end
    });
    
    -- Speed and Jump Power
    local speedSlider = generalSection:AddSlider({
        Name = "WalkSpeed",
        Min = 16,
        Max = 5000,
        Round = 0,
        Default = 16,
        Type = "studs/s",
        Flag = "walk_speed",
        Callback = function(value)
            _G.FeatureStates.WalkSpeed = value
            local success, err = pcall(function()
                local player = game:GetService("Players").LocalPlayer
                if player and player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                    player.Character.Humanoid.WalkSpeed = value
                end
            end)
            if not success and err then
                print("WalkSpeed Error:", err)
            end
        end
    });
    
    local jumpSlider = generalSection:AddSlider({
        Name = "JumpPower",
        Min = 50,
        Max = 1000,
        Round = 0,
        Default = 50,
        Type = "studs",
        Flag = "jump_power",
        Callback = function(value)
            _G.FeatureStates.JumpPower = value
            local success, err = pcall(function()
                local player = game:GetService("Players").LocalPlayer
                if player and player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                    player.Character.Humanoid.JumpPower = value
                end
            end)
            if not success and err then
                print("JumpPower Error:", err)
            end
        end
    });
    
    -- Teleport to Player
    local playerList = {}
    local currentPlayer = game:GetService("Players").LocalPlayer
    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
        if player ~= currentPlayer then
            table.insert(playerList, player.Name)
        end
    end
    
    local selectedPlayer = playerList[1] or ""
    local playerDropdown = generalSection:AddDropdown({
        Name = "Select Player",
        Values = playerList,
        Default = selectedPlayer,
        Flag = "selected_player",
        Callback = function(value)
            selectedPlayer = value
        end
    });
    
    generalSection:AddButton({
        Name = "Teleport To Player",
        Callback = function()
            local success, err = pcall(function()
                local targetPlayer = game:GetService("Players"):FindFirstChild(selectedPlayer)
                if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = 
                        targetPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 2, 1)
                end
            end)
            if not success and err then
                print("Teleport Error:", err)
            end
        end
    });
    
    -- Update player list periodically
    task.spawn(function()
        while true do
            task.wait(5)
            local newList = {}
            for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
                if player ~= currentPlayer then
                    table.insert(newList, player.Name)
                end
            end
            playerDropdown:SetValues(newList)
            if selectedPlayer ~= "" and not table.find(newList, selectedPlayer) then
                selectedPlayer = newList[1] or ""
                playerDropdown:SetValue(selectedPlayer)
            end
        end
    end)
end

-- Auto Farm Tab
do
    local farmSettings = AutoFarmTab:DrawSection({
        Name = "Farm Settings",
        Position = "LEFT"
    });
    
    local farmOptions = AutoFarmTab:DrawSection({
        Name = "Farm Options",
        Position = "right"
    });
    
    -- Location selection
    local locationDropdown = farmSettings:AddDropdown({
        Name = "Select Location",
        Values = {"City", "Snow City", "Magma City", "Legends Highway", "Space", "Desert", "Speed Jungle"},
        Default = "City",
        Flag = "farm_location",
        Callback = function(value)
            _G.FeatureStates.FarmLocation = value
        end
    });
    
    -- Orb selection
    local orbDropdown = farmSettings:AddDropdown({
        Name = "Select Orbs",
        Values = {"Red Orb", "Yellow Orb", "Ethereal Orb", "Infernal Gem", "Gem"},
        Default = "Yellow Orb",
        Flag = "farm_orb",
        Callback = function(value)
            _G.FeatureStates.FarmOrb = value
        end
    });
    
    -- Farm speed
    local farmSpeedDropdown = farmSettings:AddDropdown({
        Name = "Select Mode",
        Values = {"Super Fast", "Fast", "Medium", "Slow"},
        Default = "Medium",
        Flag = "farm_speed",
        Callback = function(value)
            if value == "Super Fast" then
                _G.FeatureStates.FarmSpeed = 40
            elseif value == "Fast" then
                _G.FeatureStates.FarmSpeed = 30
            elseif value == "Medium" then
                _G.FeatureStates.FarmSpeed = 20
            elseif value == "Slow" then
                _G.FeatureStates.FarmSpeed = 10
            end
        end
    });
    
    farmSettings:AddParagraph({
        Title = "Note",
        Content = "• Super Fast Value = 40\n• Fast Value = 30\n• Medium Value = 20\n• Slow Value = 10\n\nNot Recommended Using Super Fast Mode\nBecause it will cause a delay / lag in the game"
    });
    
    -- Start Farm Toggle
    local startFarmToggle = farmOptions:AddToggle({
        Name = "Start Farm",
        Flag = "start_farm",
        Default = false,
        Callback = function(state)
            _G.FeatureStates.AutoFarm = state
            if state then
                task.spawn(function()
                    while _G.FeatureStates.AutoFarm do
                        task.wait(0.1)
                        local success, err = pcall(function()
                            for i = 1, _G.FeatureStates.FarmSpeed do
                                game:GetService("ReplicatedStorage").rEvents.orbEvent:FireServer(
                                    "collectOrb", 
                                    _G.FeatureStates.FarmOrb, 
                                    _G.FeatureStates.FarmLocation
                                )
                            end
                        end)
                        if not success and err then
                            print("Auto Farm Error:", err)
                        end
                    end
                end)
            end
        end
    });
    
    -- Hoops Farm
    local hoopsFarmToggle = farmOptions:AddToggle({
        Name = "Hoops Farm",
        Flag = "hoops_farm",
        Default = false,
        Callback = function(state)
            _G.FeatureStates.HoopsFarm = state
            if state then
                task.spawn(function()
                    while _G.FeatureStates.HoopsFarm do
                        task.wait(0.1)
                        local success, err = pcall(function()
                            local children = game:GetService("Workspace").Hoops:GetChildren()
                            for i, child in ipairs(children) do
                                if child.Name == 'Hoop' then
                                    child.Transparency = 1
                                    child.CFrame = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame
                                end
                            end
                        end)
                        if not success and err then
                            print("Hoops Farm Error:", err)
                        end
                    end
                end)
            end
        end
    });
    
    -- Farm Delays Section
    farmOptions:AddParagraph({
        Title = "Farm Delays",
        Content = "Adjust farm delays to prevent lag"
    })
    
    local xpDelay = farmOptions:AddSlider({
        Name = "XP Delay",
        Min = 0.01,
        Max = 0.5,
        Round = 2,
        Default = 0.25,
        Type = "s",
        Flag = "xp_delay",
        Callback = function(value)
            _G.FeatureStates.XPDelay = value
        end
    });
    
    local orbDelay = farmOptions:AddSlider({
        Name = "Orb Delay",
        Min = 0.01,
        Max = 0.5,
        Round = 2,
        Default = 0.25,
        Type = "s",
        Flag = "orb_delay",
        Callback = function(value)
            _G.FeatureStates.OrbDelay = value
        end
    });
    
    local gemDelay = farmOptions:AddSlider({
        Name = "Gem Delay",
        Min = 0.01,
        Max = 0.5,
        Round = 2,
        Default = 0.25,
        Type = "s",
        Flag = "gem_delay",
        Callback = function(value)
            _G.FeatureStates.GemDelay = value
        end
    });
    
    -- Farm XP Toggle
    local xpFarmToggle = farmOptions:AddToggle({
        Name = "Farm XP Orbs",
        Flag = "farm_xp",
        Default = false,
        Callback = function(state)
            _G.FeatureStates.FarmXP = state
            if state then
                task.spawn(function()
                    while _G.FeatureStates.FarmXP do
                        task.wait(_G.FeatureStates.XPDelay or 0.25)
                        local success, err = pcall(function()
                            game:GetService("ReplicatedStorage").rEvents.orbEvent:FireServer(
                                "collectOrb", 
                                "Yellow Orb", 
                                _G.FeatureStates.FarmLocation
                            )
                        end)
                        if not success and err then
                            print("XP Farm Error:", err)
                        end
                    end
                end)
            end
        end
    });
    
    -- Farm Normal Orbs Toggle
    local normalFarmToggle = farmOptions:AddToggle({
        Name = "Farm Normal Orbs",
        Flag = "farm_normal",
        Default = false,
        Callback = function(state)
            _G.FeatureStates.FarmNormal = state
            if state then
                task.spawn(function()
                    while _G.FeatureStates.FarmNormal do
                        task.wait(_G.FeatureStates.OrbDelay or 0.25)
                        local success, err = pcall(function()
                            game:GetService("ReplicatedStorage").rEvents.orbEvent:FireServer(
                                "collectOrb", 
                                "Ethereal Orb", 
                                _G.FeatureStates.FarmLocation
                            )
                        end)
                        if not success and err then
                            print("Normal Farm Error:", err)
                        end
                    end
                end)
            end
        end
    });
    
    -- Farm Gem Orbs Toggle
    local gemFarmToggle = farmOptions:AddToggle({
        Name = "Farm Gem Orbs",
        Flag = "farm_gem",
        Default = false,
        Callback = function(state)
            _G.FeatureStates.FarmGem = state
            if state then
                task.spawn(function()
                    while _G.FeatureStates.FarmGem do
                        task.wait(_G.FeatureStates.GemDelay or 0.25)
                        local success, err = pcall(function()
                            game:GetService("ReplicatedStorage").rEvents.orbEvent:FireServer(
                                "collectOrb", 
                                "Infernal Gem", 
                                _G.FeatureStates.FarmLocation
                            )
                        end)
                        if not success and err then
                            print("Gem Farm Error:", err)
                        end
                    end
                end)
            end
        end
    });
end

-- Teleport Tab
do
    local teleportSection = TeleportTab:DrawSection({
        Name = "Teleport Locations",
        Position = "LEFT"
    });
    
    -- City teleport
    teleportSection:AddButton({
        Name = "City",
        Callback = function()
            local success, err = pcall(function()
                if game.PlaceId == 3232996272 or game.PlaceId == 3276265788 then
                    game:GetService("TeleportService"):Teleport(3101667897, game:GetService("Players").LocalPlayer)
                else
                    game:GetService("Players").LocalPlayer.Character:MoveTo(Vector3.new(-9687.1923828125, 59.072853088378906, 3096.58837890625))
                end
            end)
            if not success and err then
                print("City Teleport Error:", err)
            end
        end
    });
    
    -- Snow City teleport
    teleportSection:AddButton({
        Name = "Snow City",
        Callback = function()
            local success, err = pcall(function()
                if game.PlaceId == 3232996272 or game.PlaceId == 3276265788 then
                    game:GetService("TeleportService"):Teleport(3101667897, game:GetService("Players").LocalPlayer)
                    task.wait(3)
                    game:GetService("Players").LocalPlayer.Character:MoveTo(Vector3.new(-9677.6640625, 59.072853088378906, 3783.736572265625))
                else
                    game:GetService("Players").LocalPlayer.Character:MoveTo(Vector3.new(-9677.6640625, 59.072853088378906, 3783.736572265625))
                end
            end)
            if not success and err then
                print("Snow City Teleport Error:", err)
            end
        end
    });
    
    -- Magma City teleport
    teleportSection:AddButton({
        Name = "Magma City",
        Callback = function()
            local success, err = pcall(function()
                if game.PlaceId == 3232996272 or game.PlaceId == 3276265788 then
                    game:GetService("TeleportService"):Teleport(3101667897, game:GetService("Players").LocalPlayer)
                    task.wait(3)
                    game:GetService("Players").LocalPlayer.Character:MoveTo(Vector3.new(-11053.3837890625, 217.0328369140625, 4896.10986328125))
                else
                    game:GetService("Players").LocalPlayer.Character:MoveTo(Vector3.new(-11053.3837890625, 217.0328369140625, 4896.10986328125))
                end
            end)
            if not success and err then
                print("Magma City Teleport Error:", err)
            end
        end
    });
    
    -- Legends Highway teleport
    teleportSection:AddButton({
        Name = "Legends Highway",
        Callback = function()
            local success, err = pcall(function()
                if game.PlaceId == 3232996272 or game.PlaceId == 3276265788 then
                    game:GetService("TeleportService"):Teleport(3101667897, game:GetService("Players").LocalPlayer)
                    task.wait(3)
                    game:GetService("Players").LocalPlayer.Character:MoveTo(Vector3.new(-13097.8583984375, 217.0328369140625, 5904.84716796875))
                else
                    game:GetService("Players").LocalPlayer.Character:MoveTo(Vector3.new(-13097.8583984375, 217.0328369140625, 5904.84716796875))
                end
            end)
            if not success and err then
                print("Legends Highway Teleport Error:", err)
            end
        end
    });
    
    -- Space teleport
    teleportSection:AddButton({
        Name = "Space",
        Callback = function()
            local success, err = pcall(function()
                if game.PlaceId ~= 3232996272 then
                    game:GetService("TeleportService"):Teleport(3232996272, game:GetService("Players").LocalPlayer)
                end
            end)
            if not success and err then
                print("Space Teleport Error:", err)
            end
        end
    });
    
    -- Desert teleport
    teleportSection:AddButton({
        Name = "Desert",
        Callback = function()
            local success, err = pcall(function()
                if game.PlaceId ~= 3276265788 then
                    game:GetService("TeleportService"):Teleport(3276265788, game:GetService("Players").LocalPlayer)
                end
            end)
            if not success and err then
                print("Desert Teleport Error:", err)
            end
        end
    });
    
    -- Speed Jungle teleport
    teleportSection:AddButton({
        Name = "Speed Jungle",
        Callback = function()
            local success, err = pcall(function()
                local args = {
                    [1] = "travelToArea",
                    [2] = workspace.areaCircles.areaCircle
                }
                game:GetService("ReplicatedStorage").rEvents.areaTravelRemote:InvokeServer(unpack(args))
                task.wait(0.1)
                game:GetService("Players").LocalPlayer.Character:MoveTo(Vector3.new(-15272, 398, 5573))
            end)
            if not success and err then
                print("Speed Jungle Teleport Error:", err)
            end
        end
    });
end

-- Race Tab
do
    local raceSection = RaceTab:DrawSection({
        Name = "Race Settings",
        Position = "LEFT"
    });
    
    local autoRaceToggle = raceSection:AddToggle({
        Name = "Auto Finish Race",
        Flag = "auto_race",
        Default = false,
        Callback = function(state)
            _G.FeatureStates.AutoRace = state
            if state then
                task.spawn(function()
                    while _G.FeatureStates.AutoRace do
                        task.wait(0.1)
                        local success, err = pcall(function()
                            if game:GetService("ReplicatedStorage").raceInProgress.Value then
                                game:GetService("ReplicatedStorage").rEvents.raceEvent:FireServer('joinRace')
                                task.wait(0.5)
                                game:GetService("Players").LocalPlayer.PlayerGui.gameGui.raceJoinLabel.Visible = false
                            end
                            if game:GetService("ReplicatedStorage").raceStarted.Value then
                                for i, v in pairs(game:GetService("Workspace").raceMaps:GetChildren()) do
                                    if v:FindFirstChild("finishPart") then
                                        local oldFinishPosition = v.finishPart.CFrame
                                        v.finishPart.CFrame = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame
                                        task.wait(0.1)
                                        v.finishPart.CFrame = oldFinishPosition
                                    end
                                end
                            end
                        end)
                        if not success and err then
                            print("Auto Race Error:", err)
                        end
                    end
                end)
            end
        end
    });
    
    -- Auto Race Entry
    local autoRaceEntryToggle = raceSection:AddToggle({
        Name = "Auto Race Entry",
        Flag = "auto_race_entry",
        Default = false,
        Callback = function(state)
            _G.FeatureStates.AutoRaceEntry = state
            if state then
                task.spawn(function()
                    while _G.FeatureStates.AutoRaceEntry do
                        task.wait(5)
                        local success, err = pcall(function()
                            game:GetService("ReplicatedStorage").rEvents.raceEvent:FireServer("joinRace")
                        end)
                        if not success and err then
                            print("Auto Race Entry Error:", err)
                        end
                    end
                end)
            end
        end
    });
    
    -- Race Win Exploit
    local raceWinToggle = raceSection:AddToggle({
        Name = "Auto Win Race",
        Flag = "auto_win_race",
        Default = false,
        Callback = function(state)
            _G.FeatureStates.AutoWinRace = state
            if state then
                task.spawn(function()
                    local player = game:GetService("Players").LocalPlayer
                    local char = player.Character or player.CharacterAdded:Wait()
                    local hrp = char:WaitForChild("HumanoidRootPart")
                    local locations = {
                        Vector3.new(999, -1, -10997),
                        Vector3.new(33, -2, -8689),
                        Vector3.new(1673, -2, -5952),
                    }
                    
                    while _G.FeatureStates.AutoWinRace do
                        for _, pos in ipairs(locations) do
                            if not _G.FeatureStates.AutoWinRace then break end
                            hrp.CFrame = CFrame.new(pos)
                            task.wait(0.3)
                        end
                    end
                end)
            end
        end
    });
    
    raceSection:AddParagraph({
        Title = "Note",
        Content = "• Auto Finish Race: Automatically completes the race\n• Auto Race Entry: Automatically joins races\n• Auto Win Race: Positions you at finish line to win"
    });
end

-- Crystal Tab
do
    local crystalSection = CrystalTab:DrawSection({
        Name = "Crystal Settings",
        Position = "LEFT"
    });
    
    -- Crystal selection
    local crystalList = {}
    if game.Workspace:FindFirstChild("mapCrystalsFolder") then
        for i, v in ipairs(game.Workspace.mapCrystalsFolder:GetChildren()) do
            table.insert(crystalList, v.Name)
        end
    end
    
    -- Add more crystals if they exist
    if not table.find(crystalList, "Jungle Crystal") then
        table.insert(crystalList, "Jungle Crystal")
    end
    
    local crystalDropdown = crystalSection:AddDropdown({
        Name = "Select Crystal",
        Values = crystalList,
        Default = crystalList[1] or "Electro Crystal",
        Flag = "selected_crystal",
        Callback = function(value)
            _G.FeatureStates.SelectedCrystal = value
        end
    });
    
    -- Open crystal toggle
    local openCrystalToggle = crystalSection:AddToggle({
        Name = "Open Crystal",
        Flag = "open_crystal",
        Default = false,
        Callback = function(state)
            _G.FeatureStates.AutoCrystal = state
            if state then
                task.spawn(function()
                    while _G.FeatureStates.AutoCrystal do
                        task.wait(0.5)
                        local success, err = pcall(function()
                            local args = {
                                [1] = "openCrystal",
                                [2] = _G.FeatureStates.SelectedCrystal or "Electro Crystal"
                            }
                            game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
                        end)
                        if not success and err then
                            print("Open Crystal Error:", err)
                        end
                    end
                end)
            end
        end
    });
    
    -- Auto Void Dragon
    local voidDragonToggle = crystalSection:AddToggle({
        Name = "Auto Void Dragon [Desert]",
        Flag = "void_dragon",
        Default = false,
        Callback = function(state)
            _G.FeatureStates.AutoVoidEgg = state
            _G.FeatureStates.AutoUnique = state
            _G.FeatureStates.AutoSellAllTrails = state
            
            if state then
                task.spawn(function()
                    while _G.FeatureStates.AutoVoidEgg do
                        task.wait(0.5)
                        local success, err = pcall(function()
                            local args = {
                                [1] = "openCrystal",
                                [2] = "Desert Crystal"
                            }
                            game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
                        end)
                        if not success and err then
                            print("Void Dragon Error:", err)
                        end
                    end
                end)
                
                task.spawn(function()
                    while _G.FeatureStates.AutoSellAllTrails do
                        task.wait(0.5)
                        local success, err = pcall(function()
                            local rank = game:GetService("Players").LocalPlayer.trailsFolder:GetChildren()
                            for _, r in ipairs(rank) do
                                for _, item in ipairs(r:GetChildren()) do
                                    local args = {
                                        [1] = "sellTrail",
                                        [2] = item
                                    }
                                    game:GetService("ReplicatedStorage").rEvents.sellTrailEvent:FireServer(unpack(args))
                                end
                            end
                        end)
                        if not success and err then
                            print("Sell Trails Error:", err)
                        end
                    end
                end)
                
                task.spawn(function()
                    while _G.FeatureStates.AutoUnique do
                        task.wait(0.5)
                        local success, err = pcall(function()
                            local rank = game:GetService("Players").LocalPlayer.petsFolder:GetChildren()
                            for _, r in ipairs(rank) do
                                if r.Name ~= "Unique" then
                                    for _, item in ipairs(r:GetChildren()) do
                                        local args = {
                                            [1] = "sellPet",
                                            [2] = item
                                        }
                                        game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
                                    end
                                end
                            end
                        end)
                        if not success and err then
                            print("Auto Unique Error:", err)
                        end
                    end
                end)
            end
        end
    });
    
    -- Auto Ultra Birdie
    local birdieToggle = crystalSection:AddToggle({
        Name = "Auto Ultra Birdie [Best Pet Desert]",
        Flag = "ultra_birdie",
        Default = false,
        Callback = function(state)
            _G.FeatureStates.AutoBirdieEgg = state
            _G.FeatureStates.AutoSellAllPets = state
            _G.FeatureStates.AutoSellAllTrails = state
            
            if state then
                task.spawn(function()
                    while _G.FeatureStates.AutoBirdieEgg do
                        task.wait(0.5)
                        local success, err = pcall(function()
                            local args = {
                                [1] = "openCrystal",
                                [2] = "Electro Crystal"
                            }
                            game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
                        end)
                        if not success and err then
                            print("Birdie Egg Error:", err)
                        end
                    end
                end)
                
                task.spawn(function()
                    while _G.FeatureStates.AutoSellAllPets do
                        task.wait(0.5)
                        local success, err = pcall(function()
                            local rank = game:GetService("Players").LocalPlayer.petsFolder:GetChildren()
                            for _, r in ipairs(rank) do
                                for _, item in ipairs(r:GetChildren()) do
                                    if item.Name ~= "Ultra Birdie" then
                                        local args = {
                                            [1] = "sellPet",
                                            [2] = item
                                        }
                                        game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
                                    end
                                end
                            end
                        end)
                        if not success and err then
                            print("Sell Pets Error:", err)
                        end
                    end
                end)
                
                task.spawn(function()
                    while _G.FeatureStates.AutoSellAllTrails do
                        task.wait(0.5)
                        local success, err = pcall(function()
                            local rank = game:GetService("Players").LocalPlayer.trailsFolder:GetChildren()
                            for _, r in ipairs(rank) do
                                for _, item in ipairs(r:GetChildren()) do
                                    local args = {
                                        [1] = "sellTrail",
                                        [2] = item
                                    }
                                    game:GetService("ReplicatedStorage").rEvents.sellTrailEvent:FireServer(unpack(args))
                                end
                            end
                        end)
                        if not success and err then
                            print("Sell Trails Error:", err)
                        end
                    end
                end)
            end
        end
    });
    
    -- Auto Ultimate Overdrive Bunny
    local bunnyToggle = crystalSection:AddToggle({
        Name = "Auto Ultimate Overdrive Bunny",
        Flag = "overdrive_bunny",
        Default = false,
        Callback = function(state)
            _G.FeatureStates.BunnyFarm = state
            _G.FeatureStates.AutoLegendsEgg = state
            
            if state then
                task.spawn(function()
                    while _G.FeatureStates.BunnyFarm do
                        task.wait(0.5)
                        local success, err = pcall(function()
                            local rank = game:GetService("Players").LocalPlayer.petsFolder:GetChildren()
                            for _, r in ipairs(rank) do
                                for _, item in ipairs(r:GetChildren()) do
                                    if item.Name ~= "Ultimate Overdrive Bunny" then
                                        local args = {
                                            [1] = "sellPet",
                                            [2] = item
                                        }
                                        game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
                                    end
                                end
                            end
                        end)
                        if not success and err then
                            print("Bunny Farm Error:", err)
                        end
                    end
                end)
                
                task.spawn(function()
                    while _G.FeatureStates.AutoLegendsEgg do
                        task.wait(0.5)
                        local success, err = pcall(function()
                            local args = {
                                [1] = "openCrystal",
                                [2] = "Electro Legends Crystal"
                            }
                            game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
                        end)
                        if not success and err then
                            print("Legends Egg Error:", err)
                        end
                    end
                end)
            end
        end
    });
    
    -- Auto Evolve Pets
    local evolveToggle = crystalSection:AddToggle({
        Name = "Auto Evolve All Pets",
        Flag = "auto_evolve",
        Default = false,
        Callback = function(state)
            _G.FeatureStates.AutoEvolve = state
            if state then
                task.spawn(function()
                    while _G.FeatureStates.AutoEvolve do
                        task.wait(0.5)
                        local success, err = pcall(function()
                            local petsFolder = game:GetService("Players").LocalPlayer.petsFolder
                            if petsFolder then
                                for _, rank in ipairs(petsFolder:GetChildren()) do
                                    for _, pet in ipairs(rank:GetChildren()) do
                                        local args = {
                                            [1] = "evolvePet",
                                            [2] = pet.Name
                                        }
                                        game:GetService("ReplicatedStorage").rEvents.petEvolveEvent:FireServer(unpack(args))
                                    end
                                end
                            end
                        end)
                        if not success and err then
                            print("Evolve Pets Error:", err)
                        end
                    end
                end)
            end
        end
    });
    
    -- Best Pets Button
    crystalSection:AddButton({
        Name = "Best Pets (Jungle Crystal)",
        Callback = function()
            local success, err = pcall(function()
                local args = {
                    [1] = "openCrystal",
                    [2] = "Jungle Crystal"
                }
                game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
                task.wait(0.3)
            end)
            if not success and err then
                print("Best Pets Error:", err)
            end
        end
    });
end

-- God Farm Tab
do
    local godFarmSection = GodFarmTab:DrawSection({
        Name = "God Farm Settings",
        Position = "LEFT"
    });
    
    local godFarmOptions = GodFarmTab:DrawSection({
        Name = "God Farm Options",
        Position = "right"
    });
    
    -- Farm Type Selection
    local farmTypeDropdown = godFarmSection:AddDropdown({
        Name = "Select Farm Type",
        Values = {"XP", "Orbs", "Gems"},
        Default = "XP",
        Flag = "god_farm_type",
        Callback = function(value)
            _G.FeatureStates.GodFarmType = value
        end
    });
    
    -- Farm Count Selection
    local farmCountDropdown = godFarmSection:AddDropdown({
        Name = "Number of Repetitions",
        Values = {"5k", "10k", "15k", "20k", "25k", "30k"},
        Default = "10k",
        Flag = "god_farm_count",
        Callback = function(value)
            if value == "5k" then
                _G.FeatureStates.GodFarmCount = 5000
            elseif value == "10k" then
                _G.FeatureStates.GodFarmCount = 10000
            elseif value == "15k" then
                _G.FeatureStates.GodFarmCount = 15000
            elseif value == "20k" then
                _G.FeatureStates.GodFarmCount = 20000
            elseif value == "25k" then
                _G.FeatureStates.GodFarmCount = 25000
            elseif value == "30k" then
                _G.FeatureStates.GodFarmCount = 30000
            end
        end
    });
    
    -- Farm Location Selection
    local farmLocationDropdown = godFarmSection:AddDropdown({
        Name = "Select Location",
        Values = {"City", "Snow City", "Magma City", "Legends Highway", "Space", "Desert", "Speed Jungle"},
        Default = "City",
        Flag = "god_farm_location",
        Callback = function(value)
            _G.FeatureStates.GodFarmLocation = value
        end
    });
    
    godFarmSection:AddParagraph({
        Title = "Warning",
        Content = "This will cause high ping (20-100k) but won't crash.\nWait for results to appear after clicking.\nDon't spam clicks - causes lag."
    });
    
    -- God Farm XP Button
    godFarmOptions:AddButton({
        Name = "God Farm XP (10k+)",
        Callback = function()
            local success, err = pcall(function()
                local count = _G.FeatureStates.GodFarmCount or 10000
                local location = _G.FeatureStates.GodFarmLocation or "City"
                
                for i = 1, count do
                    local args = {
                        [1] = "collectOrb",
                        [2] = "Yellow Orb",
                        [3] = location
                    }
                    game:GetService("ReplicatedStorage").rEvents.orbEvent:FireServer(unpack(args))
                    task.wait(0.01) -- Small delay to prevent server overload
                end
            end)
            if not success and err then
                print("God Farm XP Error:", err)
            end
        end
    });
    
    -- God Farm Orbs Button
    godFarmOptions:AddButton({
        Name = "God Farm Orbs (10k+)",
        Callback = function()
            local success, err = pcall(function()
                local count = _G.FeatureStates.GodFarmCount or 10000
                local location = _G.FeatureStates.GodFarmLocation or "City"
                
                for i = 1, count do
                    local args = {
                        [1] = "collectOrb",
                        [2] = "Ethereal Orb",
                        [3] = location
                    }
                    game:GetService("ReplicatedStorage").rEvents.orbEvent:FireServer(unpack(args))
                    task.wait(0.01) -- Small delay to prevent server overload
                end
            end)
            if not success and err then
                print("God Farm Orbs Error:", err)
            end
        end
    });
    
    -- God Farm Gems Button
    godFarmOptions:AddButton({
        Name = "God Farm Gems (10k+)",
        Callback = function()
            local success, err = pcall(function()
                local count = _G.FeatureStates.GodFarmCount or 10000
                local location = _G.FeatureStates.GodFarmLocation or "City"
                
                for i = 1, count do
                    local args = {
                        [1] = "collectOrb",
                        [2] = "Infernal Gem",
                        [3] = location
                    }
                    game:GetService("ReplicatedStorage").rEvents.orbEvent:FireServer(unpack(args))
                    task.wait(0.01) -- Small delay to prevent server overload
                end
            end)
            if not success and err then
                print("God Farm Gems Error:", err)
            end
        end
    });
    
    -- God Farm Toggle
    local godFarmToggle = godFarmOptions:AddToggle({
        Name = "God Farm Auto",
        Flag = "god_farm_auto",
        Default = false,
        Callback = function(state)
            _G.FeatureStates.GodFarmEnabled = state
            if state then
                task.spawn(function()
                    while _G.FeatureStates.GodFarmEnabled do
                        local success, err = pcall(function()
                            local count = _G.FeatureStates.GodFarmCount or 10000
                            local location = _G.FeatureStates.GodFarmLocation or "City"
                            local farmType = _G.FeatureStates.GodFarmType or "XP"
                            
                            for i = 1, count do
                                local orbType = ""
                                if farmType == "XP" then
                                    orbType = "Yellow Orb"
                                elseif farmType == "Orbs" then
                                    orbType = "Ethereal Orb"
                                elseif farmType == "Gems" then
                                    orbType = "Infernal Gem"
                                end
                                
                                local args = {
                                    [1] = "collectOrb",
                                    [2] = orbType,
                                    [3] = location
                                }
                                game:GetService("ReplicatedStorage").rEvents.orbEvent:FireServer(unpack(args))
                                task.wait(0.01) -- Small delay to prevent server overload
                            end
                        end)
                        if not success and err then
                            print("God Farm Auto Error:", err)
                        end
                        task.wait(1) -- Wait before next batch
                    end
                end)
            end
        end
    });
end

-- Misc Tab
do
    local miscSection = MiscTab:DrawSection({
        Name = "Miscellaneous",
        Position = "LEFT"
    });
    
    -- Hide Popups
    local hidePopupsToggle = miscSection:AddToggle({
        Name = "Hide Popups",
        Flag = "hide_popups",
        Default = false,
        Callback = function(state)
            _G.FeatureStates.HidePopups = state
            if state then
                game:GetService("Players").LocalPlayer.PlayerGui.orbGui.Enabled = false
                game:GetService("Players").LocalPlayer.PlayerGui.gameGui.trailsNotificationsFrame.Visible = false
            else
                game:GetService("Players").LocalPlayer.PlayerGui.orbGui.Enabled = true
                game:GetService("Players").LocalPlayer.PlayerGui.gameGui.trailsNotificationsFrame.Visible = true
            end
        end
    });
    
    -- Inf Jump
    local infJumpToggle = miscSection:AddToggle({
        Name = "Inf Jump",
        Flag = "inf_jump",
        Default = false,
        Callback = function(state)
            _G.FeatureStates.InfJump = state
            if state then
                game:GetService("UserInputService").JumpRequest:Connect(function()
                    if _G.FeatureStates.InfJump then
                        game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
                    end
                end)
            end
        end
    });
    
    -- Gem Duplication
    local gemDuplicationToggle = miscSection:AddToggle({
        Name = "Infinite Gems",
        Flag = "gem_duplication",
        Default = false,
        Callback = function(state)
            _G.FeatureStates.GemDuplication = state
            if state then
                task.spawn(function()
                    local player = game:GetService("Players").LocalPlayer
                    local gems = player:WaitForChild("PlayerStats"):WaitForChild("Gems")
                    
                    while _G.FeatureStates.GemDuplication do
                        task.wait(0.1)
                        local success, err = pcall(function()
                            local dupeGems = gems.Value
                            gems.Value = dupeGems * 2
                        end)
                        if not success and err then
                            print("Gem Duplication Error:", err)
                        end
                    end
                end)
            end
        end
    });
    
    -- Rejoin
    miscSection:AddButton({
        Name = "Rejoin",
        Callback = function()
            local success, err = pcall(function()
                game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer)
            end)
            if not success and err then
                print("Rejoin Error:", err)
            end
        end
    });
    
    -- Low Server Hop
    miscSection:AddButton({
        Name = "Low Server Hop",
        Callback = function()
            local success, err = pcall(function()
                local module = loadstring(game:HttpGet("https://raw.githubusercontent.com/raw-scriptpastebin/FE/main/Server_Hop_Settings"))()
                module:Teleport(game.PlaceId)
            end)
            if not success and err then
                print("Server Hop Error:", err)
            end
        end
    });
    
    -- Add credits button
    miscSection:AddButton({
        Name = "Discord",
        Callback = function()
            setclipboard("https://discord.com/invite/hYmREEpSwh")
        end
    });
    
    miscSection:AddButton({
        Name = "YouTube Channel",
        Callback = function()
            setclipboard("https://youtube.com/@soulscripter?si=32ek-p7aUfHLemKw")
        end
    });
    
    -- Glitch Help
    miscSection:AddParagraph({
        Title = "Glitch Tutorial",
        Content = "1. Use Pet Level 1 No XP\n2. Turn on Yellow Orbs In Auto Farm Menu\n3. Don't Get About XP\n4. Don't Use Other Features Except Yellow Orbs\n5. Done"
    });
    
    miscSection:AddParagraph({
        Title = "Notes",
        Content = "> Make sure your Rebirth is Odd\n> The Power Pet Will Return If You Disconnect"
    });
end

-- Credits Tab
do
    local creditsSection = CreditsTab:DrawSection({
        Name = "Credits",
        Position = "LEFT"
    });
    
    creditsSection:AddParagraph({
        Title = "Credits",
        Content = "yo.\n\nDeveloped by Souls\n\nJoin the Discord for more info!\nhttps://discord.gg/7JDjhCVd8W"
    });
    
    creditsSection:AddButton({
        Name = "Copy Discord Link",
        Callback = function()
            setclipboard("https://discord.gg/7JDjhCVd8W")
        end
    });
    
    creditsSection:AddButton({
        Name = "YouTube Channel",
        Callback = function()
            setclipboard("https://youtube.com/@RelzBlox")
        end
    });
    
    creditsSection:AddParagraph({
        Title = "About",
        Content = "This is the ultimate Legends of Speed script.\nAll features are tested and working.\n\nCreated with Souls Hub UI Library\n\nIf you have issues, check the Discord server."
    });
end

-- Anti-AFK function
task.spawn(function()
    while _G.FeatureStates.AntiAFK do
        task.wait(5)
        local success, err = pcall(function()
            game:GetService("VirtualUser"):Button2Down(Vector2.new(0, 0), game:GetService("Workspace").CurrentCamera.CFrame)
            task.wait(1)
            game:GetService("VirtualUser"):Button2Up(Vector2.new(0, 0), game:GetService("Workspace").CurrentCamera.CFrame)
        end)
        if not success and err then
            print("Anti-AFK Error:", err)
        end
    end
end)

-- Initialize default values
_G.FeatureStates.AutoRebirth = false
_G.FeatureStates.AutoFarm = false
_G.FeatureStates.FarmLocation = "City"
_G.FeatureStates.FarmOrb = "Yellow Orb"
_G.FeatureStates.FarmSpeed = 20
_G.FeatureStates.NoClip = false
_G.FeatureStates.AutoRace = false
_G.FeatureStates.AutoCrystal = false
_G.FeatureStates.AutoVoidEgg = false
_G.FeatureStates.AutoBirdieEgg = false
_G.FeatureStates.AutoLegendsEgg = false
_G.FeatureStates.AutoUnique = false
_G.FeatureStates.AutoSellAllTrails = false
_G.FeatureStates.AutoSellAllPets = false
_G.FeatureStates.BunnyFarm = false
_G.FeatureStates.AutoEvolve = false
_G.FeatureStates.HoopsFarm = false
_G.FeatureStates.WalkSpeed = 16
_G.FeatureStates.JumpPower = 50
_G.FeatureStates.AntiAFK = true
_G.FeatureStates.XPDelay = 0.25
_G.FeatureStates.OrbDelay = 0.25
_G.FeatureStates.GemDelay = 0.25
_G.FeatureStates.FarmXP = false
_G.FeatureStates.FarmNormal = false
_G.FeatureStates.FarmGem = false
_G.FeatureStates.GodFarmEnabled = false
_G.FeatureStates.GodFarmType = "XP"
_G.FeatureStates.GodFarmCount = 10000
_G.FeatureStates.GodFarmLocation = "City"
_G.FeatureStates.GemDuplication = false

-- Final step: Draw the UI
Window:Draw()
