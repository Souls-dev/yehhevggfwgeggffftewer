--! Souls Hub - Plants vs Brainrots Ultimate Script
--! Merged from all provided sources with enhanced features
--! Do not add any print or warn statements as requested

-- Initialize required services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local VirtualUser = game:GetService("VirtualUser")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
local Backpack = LocalPlayer:WaitForChild("Backpack")

-- Initialize Souls Hub UI (critical for functionality)
local SoulsHub = loadstring(game:HttpGet("https://pandadevelopment.net/virtual/file/e7f388d3c065df7a"))()
task.wait(1)
SoulsHub:Loader(nil, 1).yield()

-- Create configuration manager
local FileWatcher = SoulsHub:ConfigManager({
    Directory = "SoulsHub",
    Config = "PvB-Configs"
})

-- Create main window
local Window = SoulsHub.new({
    Keybind = "LeftAlt",
})

-- Setup watermark
local watermark = Window:Watermark()
watermark:AddText({
    Icon = "user",
    Text = LocalPlayer.Name
})

local timeText = watermark:AddText({
    Icon = "clock",
    Text = SoulsHub:GetTimeNow()
})

task.spawn(function()
    while true do
        task.wait(1)
        timeText:SetText(SoulsHub:GetTimeNow())
        Window.Username = LocalPlayer.Name
    end
end)

watermark:AddText({
    Icon = "server",
    Text = "Souls Hub"
})

Window:Update({
    ExpireDate = SoulsHub:GetDate(tick() + 84000)
})

-- Global state management
_G.FeatureStates = _G.FeatureStates or {
    AutoFarm = false,
    AutoCollect = false,
    AutoBuySeed = false,
    AutoBuyGear = false,
    AutoBuyAllSeed = false,
    AutoBuyAllGear = false,
    AutoEquipBest = false,
    SellBrainrot = false,
    SellPlant = false,
    WalkSpeedEnabled = false,
    JumpEnabled = false,
    NoClipEnabled = false,
    KillAuraEnabled = false,
    KillAuraRange = 25,
    SelectedWeapon = "Banana Gun",
    AutoCollectDelay = 60,
    ClickInterval = 0.25,
    HeldToolName = "Basic Bat",
    AutoCollectV2 = false,
    AutoEquipBrainrot = false
}

-- Game data
local AllSeeds = {
    "Cactus Seed",
    "Carnivorous Plant Seed",
    "Cocotank Seed",
    "Dragon Fruit Seed",
    "Eggplant Seed",
    "Grape Seed",
    "Mr Carrot Seed",
    "Pumpkin Seed",
    "Shroombino Seed",
    "Strawberry Seed",
    "Sunflower Seed",
    "Tomatrio Seed",
    "Watermelon Seed",
    "Dragon Seed"
}

local AllGears = {
    "Water Bucket",
    "Banana Gun",
    "Frost Blower",
    "Carrot Launcher",
    "Frost Grenade"
}

-- Helper functions with fallbacks
local function GetBridgeNet2()
    local success, result = pcall(function()
        return ReplicatedStorage:WaitForChild("BridgeNet2")
    end)
    return success and result or nil
end

local function GetRemotesFolder()
    local success, result = pcall(function()
        return ReplicatedStorage:WaitForChild("Remotes")
    end)
    return success and result or nil
end

local function GetMyPlot()
    local success, plots = pcall(function()
        return Workspace:FindFirstChild("Plots")
    end)
    
    if not success or not plots then return nil end
    
    for _, plot in ipairs(plots:GetChildren()) do
        local playerSign = plot:FindFirstChild("PlayerSign")
        if playerSign then
            local bg = playerSign:FindFirstChild("BillboardGui")
            local textLabel = bg and bg:FindFirstChild("TextLabel")
            if textLabel and (textLabel.Text == LocalPlayer.Name or textLabel.Text == LocalPlayer.DisplayName) then
                return plot
            end
        end
    end
    return nil
end

local function GetMoney()
    local leaderstats = LocalPlayer:FindFirstChild("leaderstats")
    return leaderstats and leaderstats:FindFirstChild("Money") and leaderstats.Money.Value or 0
end

local function GetRebirth()
    local gui = LocalPlayer:FindFirstChild("PlayerGui") and LocalPlayer.PlayerGui:FindFirstChild("Main")
    if gui and gui:FindFirstChild("Rebirth") then
        local text = gui.Rebirth.Frame.Title.Text or "Rebirth 0"
        local n = tonumber(text:match("%d+")) or 0
        return math.max(0, n - 1)
    end
    return 0
end

local function FormatTime(sec)
    local h = math.floor(sec / 3600)
    local m = math.floor((sec % 3600) / 60)
    local s = sec % 60
    return string.format("%02d:%02d:%02d", h, m, s)
end

-- Brainrot caching with fallbacks
local BrainrotsCache = {}
local function UpdateBrainrotsCache()
    local success, folder = pcall(function()
        return Workspace:WaitForChild("ScriptedMap"):WaitForChild("Brainrots")
    end)
    
    if not success or not folder then return end
    
    BrainrotsCache = {}
    for _, b in ipairs(folder:GetChildren()) do
        if b:FindFirstChild("BrainrotHitbox") then
            table.insert(BrainrotsCache, b)
        end
    end
end

local function GetNearestBrainrot()
    local nearest = nil
    local minDist = math.huge
    
    for _, b in ipairs(BrainrotsCache) do
        local hitbox = b:FindFirstChild("BrainrotHitbox")
        if hitbox then
            local dist = (HumanoidRootPart.Position - hitbox.Position).Magnitude
            if dist < minDist then
                minDist = dist
                nearest = b
            end
        end
    end
    return nearest
end

-- Utility functions with fallbacks
local function EquipBat()
    local tool = Backpack:FindFirstChild(_G.FeatureStates.HeldToolName) or Character:FindFirstChild(_G.FeatureStates.HeldToolName)
    if tool then tool.Parent = Character end
end

local function InstantWarpToBrainrot(brainrot)
    local hitbox = brainrot and brainrot:FindFirstChild("BrainrotHitbox")
    if hitbox then
        local offset = Vector3.new(0, 1, 3)
        HumanoidRootPart.CFrame = CFrame.new(hitbox.Position + offset, hitbox.Position)
    end
end

local function DoClick()
    pcall(function()
        VirtualUser:Button1Down(Vector2.new(0, 0))
        task.wait(0.03)
        VirtualUser:Button1Up(Vector2.new(0, 0))
    end)
end

-- Create main tabs
local Main = Window:DrawTab({
    Icon = "crown",
    Name = "Main",
    Type = "Double"
})

local Player = Window:DrawTab({
    Icon = "user",
    Name = "Player",
    Type = "Single"
})

local Shop = Window:DrawTab({
    Icon = "shopping-cart",
    Name = "Shop",
    Type = "Double"
})

local Sell = Window:DrawTab({
    Icon = "dollar-sign",
    Name = "Sell",
    Type = "Single"
})

local Auto = Window:DrawTab({
    Icon = "zap",
    Name = "Auto",
    Type = "Single"
})

local Info = Window:DrawTab({
    Icon = "info",
    Name = "Information",
    Type = "Single"
})

local Configs = Window:DrawConfig({
    Name = "Configs",
    Icon = "folder",
    Config = FileWatcher
})

Configs:Init()

-- Main Tab Sections
do
    local FarmSection = Main:DrawSection({
        Name = "Auto Farm",
        Position = "LEFT"
    })
    
    local StatusSection = Main:DrawSection({
        Name = "Status",
        Position = "RIGHT"
    })
    
    -- Auto Farm Toggle with implementation
    local autoFarmToggle = FarmSection:AddToggle({
        Name = "Auto Farm",
        Default = _G.FeatureStates.AutoFarm,
        Callback = function(state)
            _G.FeatureStates.AutoFarm = state
            if state then
                _G.FeatureStates.HeldToolName = "Basic Bat"
                EquipBat()
                UpdateBrainrotsCache()
                
                -- Auto Clicker
                task.spawn(function()
                    while _G.FeatureStates.AutoFarm do
                        if Character and Character:FindFirstChild(_G.FeatureStates.HeldToolName) then
                            DoClick()
                        end
                        task.wait(_G.FeatureStates.ClickInterval)
                    end
                end)
                
                -- Auto Equip Tool
                task.spawn(function()
                    while _G.FeatureStates.AutoFarm do
                        if not Character:FindFirstChild(_G.FeatureStates.HeldToolName) then
                            EquipBat()
                        end
                        task.wait(0.5)
                    end
                end)
                
                -- Brainrots Cache Refresh
                task.spawn(function()
                    while _G.FeatureStates.AutoFarm do
                        UpdateBrainrotsCache()
                        task.wait(1)
                    end
                end)
                
                -- Auto Farm Brainrot
                task.spawn(function()
                    while _G.FeatureStates.AutoFarm do
                        local currentTarget = GetNearestBrainrot()
                        if currentTarget and currentTarget:FindFirstChild("BrainrotHitbox") then
                            InstantWarpToBrainrot(currentTarget)
                            local hitbox = currentTarget.BrainrotHitbox
                            pcall(function()
                                local remotes = GetRemotesFolder()
                                if remotes and remotes:FindFirstChild("AttacksServer") and remotes.AttacksServer:FindFirstChild("WeaponAttack") then
                                    remotes.AttacksServer.WeaponAttack:FireServer({ { target = hitbox } })
                                else
                                    ReplicatedStorage.Remotes.AttacksServer.WeaponAttack:FireServer({ { target = hitbox } })
                                end
                            end)
                        end
                        task.wait(0.1)
                    end
                end)
            end
        end
    })
    
    -- Kill Aura implementation
    local killAuraSection = Main:DrawSection({
        Name = "Kill Aura",
        Position = "LEFT"
    })
    
    killAuraSection:AddDropdown({
        Name = "Weapon",
        Values = AllGears,
        Default = _G.FeatureStates.SelectedWeapon,
        Callback = function(choice)
            _G.FeatureStates.SelectedWeapon = choice
        end
    })
    
    killAuraSection:AddToggle({
        Name = "Kill Aura",
        Default = _G.FeatureStates.KillAuraEnabled,
        Callback = function(state)
            _G.FeatureStates.KillAuraEnabled = state
            if state then
                task.spawn(function()
                    while _G.FeatureStates.KillAuraEnabled do
                        local char = Character
                        if char and char:FindFirstChild("HumanoidRootPart") and char:FindFirstChild("Humanoid") then
                            local root = char.HumanoidRootPart
                            local humanoid = char.Humanoid
                            local tool = char:FindFirstChildOfClass("Tool")
                            
                            if not tool or tool.Name ~= _G.FeatureStates.SelectedWeapon then
                                local backpack = LocalPlayer:FindFirstChild("Backpack")
                                if backpack then
                                    local item = backpack:FindFirstChild(_G.FeatureStates.SelectedWeapon)
                                    if item then
                                        humanoid:EquipTool(item)
                                    end
                                end
                            end
                            
                            for _, mob in ipairs(Workspace:GetChildren()) do
                                if mob:FindFirstChild("Humanoid") and mob:FindFirstChild("HumanoidRootPart") and not Players:FindFirstChild(mob.Name) then
                                    local MobKeywords = {"brainrot", "brain", "rot"}
                                    local mobName = mob.Name:lower()
                                    local isTarget = false
                                    
                                    for _, keyword in ipairs(MobKeywords) do
                                        if mobName:find(keyword) then
                                            isTarget = true
                                            break
                                        end
                                    end
                                    
                                    if isTarget then
                                        local dist = (mob.HumanoidRootPart.Position - root.Position).Magnitude
                                        if dist <= _G.FeatureStates.KillAuraRange and tool then
                                            pcall(function() tool:Activate() end)
                                        end
                                    end
                                end
                            end
                        end
                        task.wait(0.05)
                    end
                end)
            end
        end
    })
    
    killAuraSection:AddSlider({
        Name = "Range",
        Min = 10,
        Max = 60,
        Default = _G.FeatureStates.KillAuraRange,
        Callback = function(v)
            _G.FeatureStates.KillAuraRange = v
        end
    })
    
    -- Status display
    StatusSection:AddParagraph({
        Title = "Your Status",
        Content = "[+] Show Plots\n[+] Show Rebirth\n[+] Show Money\n[+] Show Playtime",
        Buttons = {
            {
                Icon = "info",
                Title = "Show Status",
                Callback = function()
                    local message = "Your Status\n"
                    message = message .. "Plots: " .. (GetMyPlot() and GetMyPlot().Name or "No Plot") .. "\n"
                    message = message .. "Rebirth: " .. GetRebirth() .. "\n"
                    message = message .. "Money: " .. GetMoney() .. "\n"
                    message = message .. "Playtime: " .. FormatTime(os.time() - tick())
                    SoulsHub:Notify({
                        Title = "Souls Hub Status",
                        Content = message,
                        Duration = 5,
                        Icon = "user-check"
                    })
                end
            }
        }
    })
    
    -- Auto Collect
    Auto:DrawSection({
        Name = "Auto Collect",
        Position = "LEFT"
    }):AddSlider({
        Name = "Collection Delay (sec)",
        Min = 1,
        Max = 60,
        Default = _G.FeatureStates.AutoCollectDelay,
        Callback = function(val)
            _G.FeatureStates.AutoCollectDelay = val
        end
    })
    
    Auto:DrawSection({
        Name = "Auto Collect",
        Position = "LEFT"
    }):AddToggle({
        Name = "Auto Collect Money",
        Default = _G.FeatureStates.AutoCollect,
        Callback = function(state)
            _G.FeatureStates.AutoCollect = state
            if state then
                task.spawn(function()
                    while _G.FeatureStates.AutoCollect do
                        local nearestPlot = GetNearestPlot()
                        if nearestPlot then
                            CollectFromPlot(nearestPlot)
                        end
                        task.wait(_G.FeatureStates.AutoCollectDelay)
                    end
                end)
            end
        end
    })
    
    Auto:DrawSection({
        Name = "Auto Collect",
        Position = "LEFT"
    }):AddToggle({
        Name = "Auto Collect Money V2",
        Default = _G.FeatureStates.AutoCollectV2,
        Callback = function(state)
            _G.FeatureStates.AutoCollectV2 = state
            if state then
                task.spawn(function()
                    while _G.FeatureStates.AutoCollectV2 do
                        local args = {
                            {
                                [2] = "\004"
                            }
                        }
                        pcall(function()
                            local bn = GetBridgeNet2()
                            if bn and bn:FindFirstChild("dataRemoteEvent") then
                                bn.dataRemoteEvent:FireServer(unpack(args))
                            else
                                ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))
                            end
                        end)
                        task.wait(1)
                    end
                end)
            end
        end
    })
end

-- Player Tab Sections
do
    local MovementSection = Player:DrawSection({
        Name = "Movement",
        Position = "LEFT"
    })
    
    local VisualSection = Player:DrawSection({
        Name = "Visual",
        Position = "RIGHT"
    })
    
    -- Movement features
    MovementSection:AddToggle({
        Name = "WalkSpeed Hack",
        Default = _G.FeatureStates.WalkSpeedEnabled,
        Callback = function(state)
            _G.FeatureStates.WalkSpeedEnabled = state
            if state then
                local humanoid = Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = 100
                end
            else
                local humanoid = Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = 16
                end
            end
        end
    })
    
    MovementSection:AddSlider({
        Name = "WalkSpeed Value",
        Min = 16,
        Max = 200,
        Default = 100,
        Callback = function(val)
            _G.FeatureStates.WalkSpeed = val
            if _G.FeatureStates.WalkSpeedEnabled then
                local humanoid = Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = val
                end
            end
        end
    })
    
    MovementSection:AddToggle({
        Name = "Jump Power Hack",
        Default = _G.FeatureStates.JumpEnabled,
        Callback = function(state)
            _G.FeatureStates.JumpEnabled = state
            if state then
                local humanoid = Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.JumpPower = 100
                end
            else
                local humanoid = Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.JumpPower = 50
                end
            end
        end
    })
    
    MovementSection:AddSlider({
        Name = "JumpPower Value",
        Min = 50,
        Max = 300,
        Default = 100,
        Callback = function(val)
            _G.FeatureStates.JumpPower = val
            if _G.FeatureStates.JumpEnabled then
                local humanoid = Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.JumpPower = val
                end
            end
        end
    })
    
    MovementSection:AddToggle({
        Name = "NoClip",
        Default = _G.FeatureStates.NoClipEnabled,
        Callback = function(state)
            _G.FeatureStates.NoClipEnabled = state
            if state then
                task.spawn(function()
                    while _G.FeatureStates.NoClipEnabled do
                        for _, part in ipairs(Character:GetDescendants()) do
                            if part:IsA("BasePart") and part.CanCollide then
                                part.CanCollide = false
                            end
                        end
                        task.wait(0.2)
                    end
                end)
            end
        end
    })
    
    -- Visual features
    VisualSection:AddToggle({
        Name = "Auto Equip Best Brainrot",
        Default = _G.FeatureStates.AutoEquipBest,
        Callback = function(state)
            _G.FeatureStates.AutoEquipBest = state
            if state then
                task.spawn(function()
                    while _G.FeatureStates.AutoEquipBest do
                        pcall(function()
                            local remotes = GetRemotesFolder()
                            if remotes and remotes:FindFirstChild("EquipBestBrainrots") then
                                remotes.EquipBestBrainrots:FireServer()
                            else
                                ReplicatedStorage.Remotes.EquipBestBrainrots:FireServer()
                            end
                        end)
                        task.wait(1)
                    end
                end)
            end
        end
    })
    
    VisualSection:AddSlider({
        Name = "Equip Delay (sec)",
        Min = 0.5,
        Max = 10,
        Default = 1,
        Callback = function(val)
            _G.FeatureStates.AutoEquipDelay = val
        end
    })
end

-- Shop Tab Sections
do
    local SeedSection = Shop:DrawSection({
        Name = "Seeds",
        Position = "LEFT"
    })
    
    local GearSection = Shop:DrawSection({
        Name = "Gears",
        Position = "RIGHT"
    })
    
    -- Seed buying
    SeedSection:AddDropdown({
        Name = "Select Seeds",
        Values = AllSeeds,
        Multi = true,
        Default = {},
        Callback = function(values)
            _G.FeatureStates.SelectedSeeds = values
        end
    })
    
    SeedSection:AddToggle({
        Name = "Auto Buy Selected Seeds",
        Default = _G.FeatureStates.AutoBuySeed,
        Callback = function(state)
            _G.FeatureStates.AutoBuySeed = state
            if state then
                task.spawn(function()
                    while _G.FeatureStates.AutoBuySeed do
                        for _, seed in ipairs(_G.FeatureStates.SelectedSeeds) do
                            pcall(function()
                                local bn = GetBridgeNet2()
                                if bn and bn:FindFirstChild("dataRemoteEvent") then
                                    bn.dataRemoteEvent:FireServer({{seed, "\b"}})
                                else
                                    ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent"):FireServer({{seed, "\b"}})
                                end
                            end)
                            task.wait(0.5)
                        end
                        task.wait(1)
                    end
                end)
            end
        end
    })
    
    SeedSection:AddToggle({
        Name = "Auto Buy All Seeds",
        Default = _G.FeatureStates.AutoBuyAllSeed,
        Callback = function(state)
            _G.FeatureStates.AutoBuyAllSeed = state
            if state then
                task.spawn(function()
                    while _G.FeatureStates.AutoBuyAllSeed do
                        for _, seed in ipairs(AllSeeds) do
                            pcall(function()
                                local bn = GetBridgeNet2()
                                if bn and bn:FindFirstChild("dataRemoteEvent") then
                                    bn.dataRemoteEvent:FireServer({{seed, "\b"}})
                                else
                                    ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent"):FireServer({{seed, "\b"}})
                                end
                            end)
                            task.wait(0.5)
                        end
                        task.wait(1)
                    end
                end)
            end
        end
    })
    
    -- Gear buying
    GearSection:AddDropdown({
        Name = "Select Gears",
        Values = AllGears,
        Multi = true,
        Default = {},
        Callback = function(values)
            _G.FeatureStates.SelectedGears = values
        end
    })
    
    GearSection:AddToggle({
        Name = "Auto Buy Selected Gears",
        Default = _G.FeatureStates.AutoBuyGear,
        Callback = function(state)
            _G.FeatureStates.AutoBuyGear = state
            if state then
                task.spawn(function()
                    while _G.FeatureStates.AutoBuyGear do
                        for _, gear in ipairs(_G.FeatureStates.SelectedGears) do
                            pcall(function()
                                local bn = GetBridgeNet2()
                                if bn and bn:FindFirstChild("dataRemoteEvent") then
                                    bn.dataRemoteEvent:FireServer({{gear, " "}})
                                else
                                    ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent"):FireServer({{gear, " "}})
                                end
                            end)
                            task.wait(0.5)
                        end
                        task.wait(1)
                    end
                end)
            end
        end
    })
    
    GearSection:AddToggle({
        Name = "Auto Buy All Gears",
        Default = _G.FeatureStates.AutoBuyAllGear,
        Callback = function(state)
            _G.FeatureStates.AutoBuyAllGear = state
            if state then
                task.spawn(function()
                    while _G.FeatureStates.AutoBuyAllGear do
                        for _, gear in ipairs(AllGears) do
                            pcall(function()
                                local bn = GetBridgeNet2()
                                if bn and bn:FindFirstChild("dataRemoteEvent") then
                                    bn.dataRemoteEvent:FireServer({{gear, " "}})
                                else
                                    ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent"):FireServer({{gear, " "}})
                                end
                            end)
                            task.wait(0.5)
                        end
                        task.wait(1)
                    end
                end)
            end
        end
    })
end

-- Sell Tab Sections
do
    local SellSection = Sell:DrawSection({
        Name = "Auto Sell",
        Position = "LEFT"
    })
    
    local SellBothSection = Sell:DrawSection({
        Name = "Sell Both",
        Position = "RIGHT"
    })
    
    SellSection:AddToggle({
        Name = "Sell Brainrot All",
        Default = _G.FeatureStates.SellBrainrot,
        Callback = function(state)
            _G.FeatureStates.SellBrainrot = state
        end
    })
    
    SellSection:AddToggle({
        Name = "Sell Plants All",
        Default = _G.FeatureStates.SellPlant,
        Callback = function(state)
            _G.FeatureStates.SellPlant = state
        end
    })
    
    SellBothSection:AddToggle({
        Name = "Sell Both All",
        Default = _G.FeatureStates.SellEverything,
        Callback = function(state)
            _G.FeatureStates.SellEverything = state
        end
    })
    
    -- Selling loop
    task.spawn(function()
        while task.wait(0.69) do
            if _G.FeatureStates.SellBrainrot or _G.FeatureStates.SellPlant or _G.FeatureStates.SellEverything then
                pcall(function()
                    local remotes = GetRemotesFolder()
                    if remotes and remotes:FindFirstChild("ItemSell") then
                        remotes.ItemSell:FireServer()
                    else
                        ReplicatedStorage.Remotes.ItemSell:FireServer()
                    end
                end)
            end
        end
    end)
end

-- Information Tab Sections
do
    local DiscordSection = Info:DrawSection({
        Name = "Discord Server",
        Position = "LEFT"
    })
    
    local InfoSection = Info:DrawSection({
        Name = "Information",
        Position = "RIGHT"
    })
    
    -- Discord information
    local InviteCode = "5MWnDsEnbw"
    local DiscordAPI = "https://discord.com/api/v10/invites/" .. InviteCode .. "?with_counts=true&with_expiration=true"
    
    DiscordSection:AddButton({
        Name = "Join Discord",
        Callback = function()
            setclipboard("https://discord.gg/" .. InviteCode)
            SoulsHub:Notify({
                Title = "Copied!",
                Content = "Discord invite copied to clipboard",
                Duration = 2,
                Icon = "clipboard-check"
            })
        end
    })
    
    -- Information
    InfoSection:AddParagraph({
        Title = "Script Information",
        Content = "Souls Hub - Plants vs Brainrots\nVersion 1.0\nDeveloped by the community\nAll features preserved\n\nThis script combines all the best features\nfrom multiple sources into one ultimate tool."
    })
    
    InfoSection:AddParagraph({
        Title = "Usage Tips",
        Content = "1. Use on private servers for best experience\n2. Adjust settings to your preference\n3. Save your configs for future use\n4. Toggle features as needed"
    })
    
    -- Server info
    InfoSection:AddParagraph({
        Title = "Server Info",
        Content = "Server uptime: " .. FormatTime(os.time() - tick()),
        Buttons = {
            {
                Icon = "refresh",
                Title = "Refresh",
                Callback = function()
                    InfoSection:GetParagraph(1):SetContent("Server uptime: " .. FormatTime(os.time() - tick()))
                end
            }
        }
    })
end

-- Global settings
do
    local Settings = Info:DrawSection({
        Name = "Settings",
        Position = "LEFT"
    })
    
    Settings:AddToggle({
        Name = "Rainbow Highlight",
        Default = false,
        Callback = function(state)
            _G.RAINBOW = state
        end
    })
    
    Settings:AddSlider({
        Name = "Rainbow Speed",
        Min = 0.01,
        Max = 1,
        Round = 2,
        Default = 0.1,
        Callback = function(v)
            _G.RAINBOW_SPEED = v
        end
    })
    
    -- Rainbow highlight effect
    task.spawn(function()
        local x = 0
        while true do
            task.wait(_G.RAINBOW_SPEED or 0.1)
            if _G.RAINBOW then
                SoulsHub:ChangeHighlightColor(Color3.fromHSV(x, 1, 1))
                x = x + 2/255
                if x >= 1 then
                    x = 0
                end
            end
        end
    end)
end

-- Final UI setup
SoulsHub:ChangeHighlightColor(SoulsHub.Colors.Highlight)
Window:Draw()

-- Additional helper functions
local function GetNearestPlot()
    local nearestPlot = nil
    local minDist = math.huge
    local success, plots = pcall(function()
        return Workspace:FindFirstChild("Plots")
    end)
    
    if not success or not plots then return nil end
    
    for _, plot in ipairs(plots:GetChildren()) do
        if plot:IsA("Folder") then
            local center = plot:FindFirstChild("Center") or plot:FindFirstChildWhichIsA("BasePart")
            if center then
                local dist = (HumanoidRootPart.Position - center.Position).Magnitude
                if dist < minDist then
                    minDist = dist
                    nearestPlot = plot
                end
            end
        end
    end
    return nearestPlot
end

local function CollectFromPlot(plot)
    if not plot then return end
    local brainrotsFolder = plot:FindFirstChild("Brainrots")
    if not brainrotsFolder then return end
    for i = 1, 17 do
        local slot = brainrotsFolder:FindFirstChild(tostring(i))
        if slot and slot:FindFirstChild("Brainrot") then
            local brainrot = slot:FindFirstChild("Brainrot")
            if brainrot:FindFirstChild("BrainrotHitbox") then
                local hitbox = brainrot.BrainrotHitbox
                local offset = Vector3.new(0, 1, 3)
                HumanoidRootPart.CFrame = CFrame.new(hitbox.Position + offset, hitbox.Position)
                task.wait(0.2)
                pcall(function()
                    local remotes = GetRemotesFolder()
                    if remotes and remotes:FindFirstChild("AttacksServer") and remotes.AttacksServer:FindFirstChild("WeaponAttack") then
                        remotes.AttacksServer.WeaponAttack:FireServer({ { target = hitbox } })
                    else
                        ReplicatedStorage.Remotes.AttacksServer.WeaponAttack:FireServer({ { target = hitbox } })
                    end
                end)
            end
        end
    end
end
