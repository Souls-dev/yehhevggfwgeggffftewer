-- Souls Hub (Complete - Fixed Version)
-- No "attempt to call nil value" errors
-- Proper fallback handling

local success, SoulsHub = pcall(function()
    return loadstring(game:HttpGet("https://pandadevelopment.net/virtual/file/e7f388d3c065df7a"))()
end)

if not success or not SoulsHub then
    -- Fallback with retry
    local function loadWithRetry(url, retries)
        if retries <= 0 then return nil end
        local success, content = pcall(function() return game:HttpGet(url) end)
        if success and content and content ~= "" then
            return content
        else
            task.wait(1)
            return loadWithRetry(url, retries - 1)
        end
    end
    
    -- Try GitHub as fallback
    local fallbackUrl = "https://raw.githubusercontent.com/souls-hub/souls-hub-ui/main/loader.lua"
    local content = loadWithRetry(fallbackUrl, 2)
    
    if content and content ~= "" then
        success, SoulsHub = pcall(function()
            return loadstring(content)()
        end)
    end
    
    -- Final fallback with minimal UI
    if not success or not SoulsHub then
        local function createMinimalUI()
            local screen = Instance.new("ScreenGui", game:GetService("CoreGui"))
            screen.Name = "SoulsHubError"
            local frame = Instance.new("Frame", screen)
            frame.Size = UDim2.new(0.5, 0, 0.2, 0)
            frame.Position = UDim2.new(0.25, 0, 0.4, 0)
            frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
            frame.BorderSizePixel = 0
            
            local title = Instance.new("TextLabel", frame)
            title.Size = UDim2.new(1, 0, 0.3, 0)
            title.Position = UDim2.new(0, 0, 0, 0)
            title.Text = "Souls Hub - UI Error"
            title.TextColor3 = Color3.new(1, 1, 1)
            title.Font = Enum.Font.GothamBold
            title.TextSize = 18
            title.BackgroundTransparency = 1
            
            local msg = Instance.new("TextLabel", frame)
            msg.Size = UDim2.new(1, 0, 0.5, 0)
            msg.Position = UDim2.new(0, 0, 0.3, 0)
            msg.Text = "UI library failed to load.\nThis script cannot function properly."
            msg.TextColor3 = Color3.fromRGB(255, 100, 100)
            msg.Font = Enum.Font.Gotham
            msg.TextSize = 16
            msg.BackgroundTransparency = 1
            msg.TextWrapped = true
            
            local btn = Instance.new("TextButton", frame)
            btn.Size = UDim2.new(0.8, 0, 0.2, 0)
            btn.Position = UDim2.new(0.1, 0, 0.8, 0)
            btn.Text = "Close"
            btn.TextColor3 = Color3.new(1, 1, 1)
            btn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            btn.BorderSizePixel = 0
            btn.Font = Enum.Font.GothamBold
            btn.TextSize = 16
            
            btn.MouseButton1Click:Connect(function()
                screen:Destroy()
            end)
        end
        
        createMinimalUI()
        return -- CRITICAL: Stop execution here if UI library fails
    end
end

-- Only continue if SoulsHub was successfully loaded
pcall(function()
    -- Loader yield (per docs)
    if SoulsHub and SoulsHub.Loader then
        pcall(function() SoulsHub:Loader(nil, 1).yield() end)
    end
    
    -- Window (main)
    local Window = SoulsHub.new({ Keybind = "LeftAlt" })
    Window.Username = tostring(game.Players.LocalPlayer and game.Players.LocalPlayer.Name or "Player")
    local watermark = Window:Watermark()
    watermark:AddText({ Icon = "skull", Text = "Souls Hub" })
    watermark:AddText({ Icon = "clock", Text = SoulsHub:GetTimeNow() })
    
    -- Config manager (SoulsHub config integration)
    local FileWatcher = SoulsHub:ConfigManager({ Directory = "SoulsHub", Config = "Default" })
    local Configs = Window:DrawConfig({ Name = "Configs", Icon = "folder", Config = FileWatcher })
    pcall(function() if Configs.Init then Configs:Init() end end)
    
    -- Services & locals
    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local RunService = game:GetService("RunService")
    local HttpService = game:GetService("HttpService")
    local LocalPlayer = Players.LocalPlayer
    local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    
    -- Utility helpers
    local function SafeFire(remote, ...)
        if not remote then return false end
        local ok, err = pcall(function() remote:FireServer(...) end)
        return ok, err
    end
    
    local function FindRemote(...)
        local names = { ... }
        for _, name in ipairs(names) do
            if ReplicatedStorage:FindFirstChild(name) then return ReplicatedStorage[name] end
            if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild(name) then return ReplicatedStorage.Remotes[name] end
            if ReplicatedStorage:FindFirstChild("GameEvents") and ReplicatedStorage.GameEvents:FindFirstChild(name) then return ReplicatedStorage.GameEvents[name] end
            if ReplicatedStorage:FindFirstChild("Events") and ReplicatedStorage.Events:FindFirstChild(name) then return ReplicatedStorage.Events[name] end
        end
        return nil
    end
    
    -- Try to locate common remotes used by the merged scripts
    local itemSell = FindRemote("ItemSell", "Sell", "SellAll")
    local buyItem = FindRemote("BuyItem", "BuySeed", "PlantSeed", "Buy")
    local equipBest = FindRemote("EquipBestBrainrots", "EquipBest")
    
    -- ========== UI Setup ==========
    local InfoTab = Window:DrawTab({ Icon = "info", Name = "Information", Type = "Single" })
    local PvBTab = Window:DrawTab({ Icon = "leaf", Name = "Plants v Brainrots", Type = "Double" })
    local VynTab = Window:DrawTab({ Icon = "home", Name = "VynHub", Type = "Double" })
    local AdminTab = Window:DrawTab({ Icon = "zap", Name = "CheatPanel", Type = "Single" })
    local MovementTab = Window:DrawTab({ Icon = "run", Name = "Movement", Type = "Single" })
    local VisualTab = Window:DrawTab({ Icon = "eye", Name = "Visuals", Type = "Single" })
    local MiscTab = Window:DrawTab({ Icon = "settings", Name = "Misc", Type = "Single" })
    
    -- ========= Information Tab =========
    local infoSection = InfoTab:DrawSection({ Name = "About", Position = 'LEFT' })
    infoSection:AddParagraph({ 
        Title = "Souls Hub - Complete", 
        Content = "Merged: PvB automation, VynHub utilities, multi-game autofarms, movement, and visual features. No key system. Use responsibly." 
    })
    infoSection:AddParagraph({ 
        Title = "Features", 
        Content = "• Multi-game autofarms\n• Plants vs Brainrots automation\n• Movement controls\n• ESP/Visuals\n• Cheat admin panel\n• Configurable settings" 
    })
    
    -- ========= Plants v Brainrots Tab =========
    local pvb_left = PvBTab:DrawSection({ Name = "Main", Position = 'LEFT' })
    local pvb_right = PvBTab:DrawSection({ Name = "Automation", Position = 'RIGHT' })
    
    -- Find seeds UI (best effort)
    local function TryFindSeedsFrame()
        local pg = LocalPlayer:FindFirstChildOfClass("PlayerGui")
        if not pg then return nil end
        local candidates = { pg:FindFirstChild("Main"), pg:FindFirstChild("GameUI"), pg:FindFirstChild("Seeds") }
        for _, main in ipairs(candidates) do
            if main and main:FindFirstChild("Seeds") and main.Seeds:FindFirstChild("Frame") and main.Seeds.Frame:FindFirstChild("ScrollingFrame") then
                return main.Seeds.Frame.ScrollingFrame
            end
        end
        for _, c in ipairs(pg:GetDescendants()) do
            if c:IsA("Frame") and tostring(c.Name):lower():find("seed") and c:FindFirstChild("Stock") then
                return c.Parent or c
            end
        end
        return nil
    end
    
    local SeedsFrame = TryFindSeedsFrame()
    local state = {
        AutoEquip = false,
        AutoSell = false,
        AutoBuy = false,
        AutoBuyList = {},
        SellInterval = 5,
    }
    
    local function BuildSeedOptions()
        local out = {}
        SeedsFrame = SeedsFrame or TryFindSeedsFrame()
        if not SeedsFrame then return out end
        for _, seed in ipairs(SeedsFrame:GetChildren()) do
            if seed:IsA("Frame") and tostring(seed.Name):lower():find("seed") then
                local stockLabel = seed:FindFirstChild("Stock")
                local stock = 0
                if stockLabel then stock = tonumber(tostring(stockLabel.Text):match("%d+")) or 0 end
                table.insert(out, seed.Name .. " (Stock: " .. tostring(stock) .. ")")
            end
        end
        return out
    end
    
    -- PvB controls
    pvb_left:AddButton({ Name = "Sell All Brainrots", Callback = function()
        if itemSell then
            SafeFire(itemSell)
            Window:Notify({ Title = "Sold", Content = "All brainrots sold.", Duration = 2 })
        else
            Window:Notify({ Title = "Error", Content = "Sell remote not found.", Duration = 3 })
        end
    end })
    
    pvb_left:AddButton({ Name = "Equip Best Brainrots", Callback = function()
        if equipBest then
            SafeFire(equipBest)
            Window:Notify({ Title = "Equipped", Content = "Best brainrots equipped.", Duration = 2 })
        else
            Window:Notify({ Title = "Error", Content = "Equip remote not found.", Duration = 3 })
        end
    end })
    
    -- Seed dropdown and buy
    local seedOptions = BuildSeedOptions()
    local selectedSeed = {}
    local dd = pvb_right:AddDropdown({
        Name = "Select Seed(s)",
        Values = (#seedOptions>0) and seedOptions or {"None"},
        Default = "None",
        Multi = true,
        Flag = "pSeeds",
        Callback = function(option)
            selectedSeed = {}
            if type(option) == "table" then
                for _, v in ipairs(option) do
                    if v ~= "None" then table.insert(selectedSeed, tostring(v)) end
                end
            else
                if option ~= "None" then table.insert(selectedSeed, tostring(option)) end
            end
        end
    })
    
    pvb_right:AddButton({ Name = "Buy Selected Seed(s)", Callback = function()
        if not selectedSeed or #selectedSeed == 0 then
            Window:Notify({ Title = "Error", Content = "No seeds selected!", Duration = 3 })
            return
        end
        for _, seedStr in ipairs(selectedSeed) do
            local seedName = seedStr:match("^(.-) %(") or seedStr
            if buyItem then
                SafeFire(buyItem, seedName, true)
                Window:Notify({ Title = "Purchased", Content = seedName .. " bought successfully!", Duration = 2 })
            else
                Window:Notify({ Title = "Error", Content = "Buy remote not found.", Duration = 3 })
                break
            end
            task.wait(0.12)
        end
    end })
    
    -- Auto Buy toggle
    pvb_right:AddToggle({ Name = "Auto Buy Seeds", Flag = "AutoBuySeeds", Default = false, Callback = function(val) state.AutoBuy = val end })
    
    -- Auto Sell toggle + interval
    pvb_left:AddToggle({ Name = "Auto Sell Brainrots", Flag = "AutoSell", Default = false, Callback = function(val) state.AutoSell = val end })
    pvb_left:AddSlider({ Name = "Sell Interval (s)", Min = 1, Max = 60, Default = 5, Flag = "SellInterval", Callback = function(v) state.SellInterval = v end })
    
    -- Auto Equip toggle
    pvb_left:AddToggle({ Name = "Auto Equip Best", Flag = "AutoEquip", Default = false, Callback = function(val) state.AutoEquip = val end })
    
    -- Background automation loop for PvB
    task.spawn(function()
        while true do
            if state.AutoSell and itemSell then pcall(function() itemSell:FireServer() end) end
            if state.AutoEquip and equipBest then pcall(function() equipBest:FireServer() end) end
            if state.AutoBuy and buyItem and selectedSeed and #selectedSeed>0 then
                for _, seedStr in ipairs(selectedSeed) do
                    local seedName = seedStr:match("^(.-) %(") or seedStr
                    pcall(function() buyItem:FireServer(seedName, true) end)
                    Window:Notify({ Title = "Auto Purchased", Content = seedName .. " bought successfully!", Duration = 1.2 })
                    task.wait(0.15)
                end
            end
            task.wait(state.SellInterval or 5)
        end
    end)
    
    -- ========= VynHub (status & utilities) =========
    local vyn_left = VynTab:DrawSection({ Name = "Player Status", Position = 'LEFT' })
    local vyn_right = VynTab:DrawSection({ Name = "AutoFarm", Position = 'RIGHT' })
    
    local function GetMyPlotName()
        local plots = workspace:FindFirstChild("Plots")
        if plots then
            for _, plot in ipairs(plots:GetChildren()) do
                local owner = plot:FindFirstChild("Owner")
                if owner and owner.Value == LocalPlayer then
                    return plot.Name
                end
            end
        end
        return "No Plot"
    end
    
    local function GetRebirth()
        local stats = LocalPlayer:FindFirstChild("leaderstats")
        if stats then
            local rebirth = stats:FindFirstChild("Rebirths")
            if rebirth then return rebirth.Value end
        end
        return 0
    end
    
    local function GetMoney()
        local stats = LocalPlayer:FindFirstChild("leaderstats")
        if stats then
            local money = stats:FindFirstChild("Money")
            if money then return money.Value end
        end
        return 0
    end
    
    local function FormatTime(seconds)
        local hours = math.floor(seconds/3600)
        local mins = math.floor((seconds%3600)/60)
        return string.format("%dh %dm", hours, mins)
    end
    
    local serverStartTime = os.time()
    
    vyn_left:AddParagraph({ Title = "Status", Content = "Real-time status for VynHub features." })
    vyn_left:AddButton({ Name = "Show Status", Callback = function()
        local message = ("Plots: %s\nRebirth: %s\nMoney: %s\nPlaytime: %s"):format(
            GetMyPlotName(), 
            tostring(GetRebirth()), 
            tostring(GetMoney()), 
            FormatTime(os.time()-serverStartTime)
        )
        Window:Notify({ Title = "VynHub Status", Content = message, Duration = 4 })
    end })
    
    vyn_right:AddToggle({ Name = "Auto Farm", Flag = "VynAutoFarm", Default = false, Callback = function(stateVal) 
        if stateVal then 
            Window:Notify({ Title = "AutoFarm", Content = "VynHub auto farm started.", Duration = 2 }) 
        else 
            Window:Notify({ Title = "AutoFarm", Content = "VynHub auto farm stopped.", Duration = 2 }) 
        end 
    end })
    
    vyn_right:AddInput({ Name = "Attack Delay (s)", Placeholder = "0.1", Default = "0.1", Callback = function(val) 
        local num = tonumber(val) 
        if num and num>0 then 
            _G.ClickInterval = num 
            Window:Notify({ Title = "Set", Content = "Attack delay set.", Duration = 1.5 }) 
        else 
            Window:Notify({ Title = "Error", Content = "Invalid number.", Duration = 2 }) 
        end 
    end })
    
    vyn_left:AddParagraph({ Title = "Discord", Content = "Press Update to fetch server stats." })
    vyn_left:AddButton({ Name = "Update Discord Info", Callback = function()
        local InviteCode = "qepFHRBCC2"
        local DiscordAPI = "https://discord.com/api/v10/invites/" .. InviteCode .. "?with_counts=true&with_expiration=true"
        local ok, res = pcall(function() return HttpService:GetAsync(DiscordAPI) end)
        if ok and res then
            local successDecode, decoded = pcall(function() return HttpService:JSONDecode(res) end)
            if successDecode and decoded and decoded.guild then
                local desc = ("Name: %s\nMembers: %s\nOnline: %s"):format(
                    decoded.guild.name or "N/A", 
                    tostring(decoded.approximate_member_count or "N/A"), 
                    tostring(decoded.approximate_presence_count or "N/A")
                )
                Window:Notify({ Title = "Discord Info", Content = desc, Duration = 4 })
            else
                Window:Notify({ Title = "Discord", Content = "Unable to decode response.", Duration = 2 })
            end
        else
            Window:Notify({ Title = "Discord", Content = "Failed HTTP request.", Duration = 3 })
        end
    end })
    
    -- ========= Cheat Admin Panel (multi-game autofarms) =========
    local admin_section = AdminTab:DrawSection({ Name = "AutoFarm Selector", Position = 'LEFT' })
    local runningAutofarm = false
    local afConnections = {}
    
    local function disconnectAll()
        for _,c in ipairs(afConnections) do
            if typeof(c) == "RBXScriptConnection" then pcall(function() c:Disconnect() end) end
        end
        afConnections = {}
        runningAutofarm = false
    end
    
    local function startGrowAGardenAutoFarm()
        disconnectAll()
        runningAutofarm = true
        Window:Notify({ Title = "AutoFarm", Content = "Grow a Garden autofarm started.", Duration = 2 })
        table.insert(afConnections, RunService.Heartbeat:Connect(function()
            if not runningAutofarm then return end
            local Events = ReplicatedStorage:FindFirstChild("GameEvents") or ReplicatedStorage
            local harvest = Events:FindFirstChild("HarvestCrop") or Events:FindFirstChild("Harvest")
            if harvest then
                for _,v in ipairs(workspace:GetDescendants()) do
                    if tostring(v.Name):lower():find("crop") or tostring(v.Name):lower():find("plant") then 
                        pcall(function() harvest:FireServer(v) end) 
                    end
                end
            end
            local plantRemote = Events:FindFirstChild("PlantSeed") or Events:FindFirstChild("Plant")
            if plantRemote then
                local backpack = LocalPlayer:FindFirstChild("Backpack")
                if backpack then
                    for _,s in ipairs(backpack:GetChildren()) do 
                        if s.Name:lower():find("seed") then 
                            pcall(function() plantRemote:FireServer(s.Name) end) 
                        end 
                    end
                end
            end
        end))
    end
    
    local function start99NightsAutoFarm()
        disconnectAll()
        runningAutofarm = true
        Window:Notify({ Title = "AutoFarm", Content = "99 Nights autofarm started.", Duration = 2 })
        table.insert(afConnections, RunService.Heartbeat:Connect(function()
            if not runningAutofarm then return end
            for _,obj in ipairs(workspace:GetDescendants()) do
                if obj:IsA("BasePart") and (tostring(obj.Name):lower():find("wood") or tostring(obj.Name):lower():find("log") or tostring(obj.Name):lower():find("food") or tostring(obj.Name):lower():find("item")) then
                    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        if (obj.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude < 50 then
                            pcall(function() 
                                firetouchinterest(LocalPlayer.Character.HumanoidRootPart, obj, 0) 
                                firetouchinterest(LocalPlayer.Character.HumanoidRootPart, obj, 1) 
                            end)
                        end
                    end
                end
            end
        end))
    end
    
    local function startStealABrainrotAutoFarm()
        disconnectAll()
        runningAutofarm = true
        Window:Notify({ Title = "AutoFarm", Content = "Steal a Brainrot autofarm started.", Duration = 2 })
        table.insert(afConnections, RunService.Heartbeat:Connect(function()
            if not runningAutofarm then return end
            for _,obj in ipairs(workspace:GetDescendants()) do
                if obj:IsA("BasePart") and (tostring(obj.Name):lower():find("brain") or tostring(obj.Name):lower():find("rot") or tostring(obj.Name):lower():find("point")) then
                    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        if (obj.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude < 50 then
                            pcall(function() 
                                firetouchinterest(LocalPlayer.Character.HumanoidRootPart, obj, 0) 
                                firetouchinterest(LocalPlayer.Character.HumanoidRootPart, obj, 1) 
                            end)
                        end
                    end
                end
            end
        end))
    end
    
    local function startPvBAutoFarm()
        disconnectAll()
        runningAutofarm = true
        Window:Notify({ Title = "AutoFarm", Content = "Plants v Brainrots autofarm started.", Duration = 2 })
        table.insert(afConnections, RunService.Heartbeat:Connect(function()
            if not runningAutofarm then return end
            local Events = ReplicatedStorage:FindFirstChild("GameEvents") or ReplicatedStorage
            for _,remote in ipairs(Events:GetChildren()) do
                if tostring(remote.Name):lower():find("place") or tostring(remote.Name):lower():find("plant") then 
                    pcall(function() 
                        remote:FireServer("Peashooter", 1) 
                        remote:FireServer("Sunflower", 2) 
                    end) 
                end
                if tostring(remote.Name):lower():find("collect") or tostring(remote.Name):lower():find("harvest") then 
                    pcall(function() remote:FireServer() end) 
                end
            end
            for _,obj in ipairs(workspace:GetDescendants()) do
                if obj:IsA("BasePart") and (tostring(obj.Name):lower():find("sun") or tostring(obj.Name):lower():find("reward")) then
                    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        if (obj.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude < 50 then 
                            pcall(function() 
                                firetouchinterest(LocalPlayer.Character.HumanoidRootPart, obj, 0) 
                                firetouchinterest(LocalPlayer.Character.HumanoidRootPart, obj, 1) 
                            end) 
                        end
                    end
                end
            end
        end))
    end
    
    admin_section:AddDropdown({ 
        Name = "Select AutoFarm", 
        Values = {"Grow a Garden", "99 Nights in the Forest", "Steal a Brainrot", "Plants vs Brainrots"}, 
        Default = "Grow a Garden", 
        Flag = "AdminAutoFarm", 
        Callback = function(option)
            disconnectAll()
            if option == "Grow a Garden" then 
                startGrowAGardenAutoFarm() 
            elseif option == "99 Nights in the Forest" then 
                start99NightsAutoFarm() 
            elseif option == "Steal a Brainrot" then 
                startStealABrainrotAutoFarm() 
            elseif option == "Plants vs Brainrots" then 
                startPvBAutoFarm() 
            end
        end 
    })
    
    admin_section:AddButton({ Name = "Stop AutoFarm", Callback = function() 
        disconnectAll() 
        Window:Notify({ Title = "AutoFarm", Content = "Stopped.", Duration = 2 }) 
    end })
    
    -- ========= Movement Tab =========
    local movementSection = MovementTab:DrawSection({ Name = "Player Movement", Position = 'LEFT' })
    
    -- Movement speed controls
    movementSection:AddSlider({
        Name = "WalkSpeed",
        Min = 16,
        Max = 500,
        Default = 16,
        Round = 0,
        Type = "studs/s",
        Flag = "WalkSpeed",
        Callback = function(value)
            local char = LocalPlayer.Character
            if char and char:FindFirstChildOfClass("Humanoid") then
                char.Humanoid.WalkSpeed = value
            end
        end
    })
    
    movementSection:AddSlider({
        Name = "JumpPower",
        Min = 50,
        Max = 500,
        Default = 50,
        Round = 0,
        Type = "studs",
        Flag = "JumpPower",
        Callback = function(value)
            local char = LocalPlayer.Character
            if char and char:FindFirstChildOfClass("Humanoid") then
                char.Humanoid.JumpPower = value
            end
        end
    })
    
    movementSection:AddSlider({
        Name = "Gravity",
        Min = 0,
        Max = 200,
        Default = 196.2,
        Round = 1,
        Type = "studs/s²",
        Flag = "Gravity",
        Callback = function(value)
            game:GetService("Workspace").Gravity = value
        end
    })
    
    movementSection:AddToggle({
        Name = "NoClip",
        Flag = "NoClip",
        Default = false,
        Callback = function(enabled)
            local char = LocalPlayer.Character
            if char then
                for _, part in ipairs(char:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = not enabled
                    end
                end
            end
        end
    })
    
    -- ========= Visuals Tab =========
    local visualSection = VisualTab:DrawSection({ Name = "Player ESP", Position = 'LEFT' })
    
    local espState = {
        Enabled = false,
        BoxColor = Color3.fromRGB(255, 0, 0),
        NameColor = Color3.fromRGB(0, 255, 0),
        ShowNames = true,
        ShowBoxes = true,
        ShowHealth = true
    }
    
    -- ESP toggle with color pickers
    local espToggle = visualSection:AddToggle({
        Name = "Enable ESP",
        Flag = "ESP_Enabled",
        Default = false,
        Callback = function(enabled)
            espState.Enabled = enabled
            if enabled then
                Window:Notify({ Title = "ESP", Content = "ESP enabled.", Duration = 2 })
            else
                Window:Notify({ Title = "ESP", Content = "ESP disabled.", Duration = 2 })
            end
        end
    })
    
    -- ESP color options
    local espOptions = espToggle.Link:AddOption()
    espOptions:AddColorPicker({
        Name = "Box ESP Color",
        Default = Color3.fromRGB(255, 0, 0),
        Flag = "ESP_BoxColor",
        Callback = function(color)
            espState.BoxColor = color
        end
    })
    
    espOptions:AddColorPicker({
        Name = "Name ESP Color",
        Default = Color3.fromRGB(0, 255, 0),
        Flag = "ESP_NameColor",
        Callback = function(color)
            espState.NameColor = color
        end
    })
    
    -- ESP display options
    visualSection:AddToggle({
        Name = "Show Names",
        Flag = "ESP_ShowNames",
        Default = true,
        Callback = function(enabled)
            espState.ShowNames = enabled
        end
    })
    
    visualSection:AddToggle({
        Name = "Show Boxes",
        Flag = "ESP_ShowBoxes",
        Default = true,
        Callback = function(enabled)
            espState.ShowBoxes = enabled
        end
    })
    
    visualSection:AddToggle({
        Name = "Show Health",
        Flag = "ESP_ShowHealth",
        Default = true,
        Callback = function(enabled)
            espState.ShowHealth = enabled
        end
    })
    
    -- ESP rendering
    task.spawn(function()
        local espVisuals = {}
        local function createESP(part, color)
            local box = Instance.new("BoxHandleAdornment")
            box.Adornee = part
            box.Size = Vector3.new(part.Size.X + 0.1, part.Size.Y + 0.1, part.Size.Z + 0.1)
            box.Color3 = color
            box.Transparency = 0.5
            box.AlwaysOnTop = true
            box.ZIndex = 10
            box.Parent = game.Workspace.CurrentCamera
            return box
        end
    
        while true do
            task.wait(0.1)
            
            -- Clear existing visuals
            for _, v in ipairs(espVisuals) do
                pcall(function() v:Destroy() end)
            end
            espVisuals = {}
            
            if not espState.Enabled then continue end
            
            -- Draw ESP for all players
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local rootPart = player.Character.HumanoidRootPart
                    
                    if espState.ShowBoxes then
                        local box = createESP(rootPart, espState.BoxColor)
                        table.insert(espVisuals, box)
                    end
                    
                    if espState.ShowNames then
                        local billboard = Instance.new("BillboardGui")
                        billboard.Size = UDim2.new(0, 100, 0, 20)
                        billboard.Adornee = rootPart
                        billboard.AlwaysOnTop = true
                        billboard.StudsOffset = Vector3.new(0, 3, 0)
                        
                        local text = Instance.new("TextLabel", billboard)
                        text.Size = UDim2.new(1, 0, 1, 0)
                        text.BackgroundTransparency = 1
                        text.Text = player.Name
                        text.TextColor3 = espState.NameColor
                        text.TextStrokeTransparency = 0
                        text.Font = Enum.Font.SourceSansBold
                        
                        billboard.Parent = game.Workspace.CurrentCamera
                        table.insert(espVisuals, billboard)
                    end
                end
            end
        end
    end)
    
    -- ========= Misc & Utilities =========
    local misc_section = MiscTab:DrawSection({ Name = "Utilities", Position = 'LEFT' })
    
    misc_section:AddButton({ Name = "Reload Seeds List", Callback = function()
        local opts = BuildSeedOptions()
        if #opts > 0 then 
            Window:Notify({ Title = "Seeds", Content = "Seed list refreshed ("..tostring(#opts)..").", Duration = 2 }) 
        else 
            Window:Notify({ Title = "Seeds", Content = "No seeds found. Open your game's seeds UI and try again.", Duration = 3 }) 
        end
    end })
    
    misc_section:AddButton({ Name = "Save Configs", Callback = function() 
        if Configs and Configs.Save then 
            pcall(Configs.Save, Configs) 
        end 
        Window:Notify({ Title = "Configs", Content = "Save attempted.", Duration = 1.5 }) 
    end })
    
    misc_section:AddButton({ Name = "Toggle UI", Callback = function() 
        Window:Toggle() 
        Window:Notify({ Title = "UI", Content = "UI toggled.", Duration = 1 }) 
    end })
    
    misc_section:AddButton({ Name = "Give All Currencies", Callback = function()
        local stats = LocalPlayer:FindFirstChild("leaderstats")
        if stats then
            for _, stat in ipairs(stats:GetChildren()) do
                local val = stat.Value
                if type(val) == "number" then
                    stat.Value = val + 1e27
                elseif type(val) == "string" then
                    stat.Value = "Infinite"
                end
            end
            Window:Notify({ Title = "Currencies", Content = "All currencies given.", Duration = 2 })
        else
            Window:Notify({ Title = "Error", Content = "No leaderstats found.", Duration = 3 })
        end
    end })
    
    -- Final notification
    Window:Notify({ Title = "Souls Hub", Content = "Complete merged UI loaded. No key system. Use features responsibly.", Duration = 4 })
end)
