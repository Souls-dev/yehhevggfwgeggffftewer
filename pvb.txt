
-- Souls Hub | Plants vs Brainrots (converted from Pvb.txt)
-- ALL FEATURES PRESERVED. Discord invite links and avatar images removed.

local replicated = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Clear old GUI (Fluent remnants)
do 
	if LocalPlayer.PlayerGui:FindFirstChild("Roblox/Fluent") then  
		LocalPlayer.PlayerGui:FindFirstChild("Roblox/Fluent"):Destroy() 
	end 
	if LocalPlayer.PlayerGui:FindFirstChild("ScreenGuis") then  
		LocalPlayer.PlayerGui.ScreenGuis:Destroy() 
	end
end

-- Anti-AFK
do
	local GC = getconnections or get_signal_cons
	if GC then
		for i,v in ipairs(GC(LocalPlayer.Idled)) do 
			if v["Disable"] then v["Disable"](v) 
			elseif v["Disconnect"] then v["Disconnect"](v) end 
		end
	end
end

-- Folder Setup
local mainFolder = "h4xscirpt"
local path = mainFolder.."/PlantsVsBrainrots"
local ConfigName = path.."/"..LocalPlayer.Name.."-config.json"

-- Default Settings
local DefaultSettings = {
	AutoEquipBest = false,
	AutoEquipDelay = 1,
	AutoBuySeed = false,
	AutoBuyGear = false,
	BuyAllSeeds = false,
	BuyAllGears = false,
	SelectedSeeds = {},
	SelectedGears = {},
	BuyAmount = 10,
	DiscordEnabled = false,
	DiscordURL = "",
	WhiteScreen = false
}

local Settings = {}

-- Load/Save Config
do 
	if not isfolder(mainFolder) then makefolder(mainFolder) end
	if not isfolder(path) then makefolder(path) end

	if isfile(ConfigName) then
		local success, result = pcall(function()
			return HttpService:JSONDecode(readfile(ConfigName))
		end)

		if success and type(result) == "table" then
			Settings = result
		else
			Settings = DefaultSettings
		end
	else
		Settings = DefaultSettings
		writefile(ConfigName, HttpService:JSONEncode(Settings))
	end

	for key, value in pairs(DefaultSettings) do
		if Settings[key] == nil then
			Settings[key] = value
		end
	end
end

local function saveConfig()
	if not isfolder(path) then makefolder(path) end
	writefile(ConfigName, HttpService:JSONEncode(Settings))
end

-- Game Data
local AllSeeds = {
	"Cactus Seed",
	"Carnivorous Plant Seed",
	"Cocotank Seed",
	"Dragon Fruit Seed",
	"Eggplant Seed",
	"Grape Seed",
	"Mr Carrot Seed",
	"Pumpkin Seed",
	"Shroombino Seed",
	"Strawberry Seed",
	"Sunflower Seed",
	"Tomatrio Seed",
	"Watermelon Seed"
}

local AllGears = {
	"Banana Gun",
	"Carrot Launcher",
	"Frost Blower",
	"Frost Grenade",
	"Water Bucket"
}

-- Webhook System (kept but invite links removed)
local discordWebhook = {}
local http_request = http_request or syn and syn.request or request
local webhookSupported = http_request ~= nil
local lastSentTime = 0
local COOLDOWN_TIME = 15

local function getRandomColor()
	return math.random(0, 0xFFFFFF)
end

discordWebhook.getBackpackData = function()
	local brainrots = {}
	local plants = {}
	local seeds = {}
	local gears = {}

	local backpack = LocalPlayer:FindFirstChild("Backpack")
	if not backpack then return brainrots, plants, seeds, gears end

	local gearLookup = {}
	for _, gear in pairs(AllGears) do
		gearLookup[gear] = true
	end

	for _, item in pairs(backpack:GetChildren()) do
		if item:IsA("Tool") then
			local itemName = item.Name
			if itemName:match("%[%d+%s*kg%]") then
				table.insert(brainrots, itemName)
			elseif itemName:find("Seed") then
				table.insert(seeds, itemName)
			elseif gearLookup[itemName] then
				table.insert(gears, itemName)
			else
				table.insert(plants, itemName)
			end
		end
	end

	return brainrots, plants, seeds, gears
end

discordWebhook.sendToDiscord = function()
	if not Settings.DiscordEnabled or not webhookSupported or Settings.DiscordURL == "" then return end

	local currentTime = tick()
	if currentTime - lastSentTime < COOLDOWN_TIME then
		print("Cooldown active, skipping webhook")
		return
	end
	lastSentTime = currentTime

	local brainrots, plants, seeds, gears = discordWebhook.getBackpackData()
	local brainrotCount = #brainrots
	local plantCount = #plants
	local seedCount = #seeds
	local gearCount = #gears

	local brainrotText = (brainrotCount > 0) and table.concat(brainrots, "\n") or "None"
	local plantText = (plantCount > 0) and table.concat(plants, "\n") or "None"
	local seedText = (seedCount > 0) and table.concat(seeds, "\n") or "None"
	local gearText = (gearCount > 0) and table.concat(gears, "\n") or "None"

	local embed = {
		title = "Plants vs Brainrots - Backpack Inventory",
		color = getRandomColor(),
		fields = {
			{ name = "Player", value = LocalPlayer.Name, inline = false },
			{ name = string.format("Brainrots (%d)", brainrotCount), value = "```" .. brainrotText .. "```", inline = false },
			{ name = string.format("Plants (%d)", plantCount), value = "```" .. plantText .. "```", inline = false },
			{ name = string.format("Seeds (%d)", seedCount), value = "```" .. seedText .. "```", inline = false },
			{ name = string.format("Gears (%d)", gearCount), value = "```" .. gearText .. "```", inline = false },
			{ name = "Total Count", value = string.format("Total Items: %d", brainrotCount + plantCount + seedCount + gearCount), inline = false }
		},
		footer = { text = "Souls Hub - Plants vs Brainrots  â€¢  " .. os.date("%H:%M:%S") },
		timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
	}

	local payload = HttpService:JSONEncode({
		username = "SoulsHub PvB",
		embeds = {embed}
	})

	local success, response = pcall(function()
		return http_request({
			Url = Settings.DiscordURL,
			Method = "POST",
			Headers = {["Content-Type"] = "application/json"},
			Body = payload
		})
	end)

	if success then
		print("Webhook sent successfully")
	else
		warn("Webhook failed: " .. tostring(response))
	end
end

-- Functions (auto loops)
local func = {}

func['AutoEquipBest'] = function()
	while _G.AutoEquipBest do 
		task.wait(Settings.AutoEquipDelay or 1)
		pcall(function()
			replicated:WaitForChild("Remotes"):WaitForChild("EquipBestBrainrots"):FireServer()
		end)
	end
end

func['AutoBuySeed'] = function()
	while _G.AutoBuySeed do 
		task.wait(0.1)
		pcall(function()
			local seedsToBuy = {}
			if Settings.BuyAllSeeds then
				seedsToBuy = AllSeeds
			else
				for _, seed in pairs(Settings.SelectedSeeds) do
					table.insert(seedsToBuy, seed)
				end
			end

			local amount = Settings.BuyAmount or 10
			for _, seed in pairs(seedsToBuy) do
				for i = 1, amount do
					replicated:WaitForChild("Remotes"):WaitForChild("BuyItem"):FireServer(seed)
					task.wait(0.01)
				end
			end
		end)
		task.wait(0.01)
	end
end

func['AutoBuyGear'] = function()
	while _G.AutoBuyGear do 
		task.wait(0.1)
		pcall(function()
			local gearsToBuy = {}
			if Settings.BuyAllGears then
				gearsToBuy = AllGears
			else
				for _, gear in pairs(Settings.SelectedGears) do
					table.insert(gearsToBuy, gear)
				end
			end

			local amount = Settings.BuyAmount or 10
			for _, gear in pairs(gearsToBuy) do
				for i = 1, amount do
					replicated:WaitForChild("Remotes"):WaitForChild("BuyGear"):FireServer(gear)
					task.wait(0.01)
				end
			end
		end)
		task.wait(0.01)
	end
end

func['WhiteScreen'] = function()
	if _G.WhiteScreen then
		RunService:Set3dRenderingEnabled(false)
	else
		RunService:Set3dRenderingEnabled(true)
	end
end

-- Load Souls Hub UI
local ok, SoulsHub = pcall(function()
	return loadstring(game:HttpGet("https://pandadevelopment.net/virtual/file/e7f388d3c065df7a"))()
end)

if not ok or not SoulsHub then
	warn("Failed to load Souls Hub UI library.")
	return
end

SoulsHub:Loader(nil, 1).yield()

-- Create Window
local Window = SoulsHub.new({
	Keybind = "LeftAlt",
})
Window:Watermark()
Window.Username = LocalPlayer.Name
Window:Update({
	ExpireDate = SoulsHub:GetDate(tick() + 84000)
})

-- Config manager (basic)
local FileWatcher = SoulsHub:ConfigManager({
	Directory = "SoulsHub",
	Config = "PvB-Configs"
});
local Configs = Window:DrawConfig({
	Name = "Configs",
	Icon = "folder",
	Config = FileWatcher
});
Configs:Init()

-- Tabs & Sections
local farmTab = Window:DrawTab({ Icon = "sprout", Name = "Farm", Type = "Double" })
local shopTab = Window:DrawTab({ Icon = "shopping-cart", Name = "Shop", Type = "Double" })
local webhookTab = Window:DrawTab({ Icon = "message-circle", Name = "Webhook", Type = "Single" })
local settingsTab = Window:DrawTab({ Icon = "settings", Name = "Settings", Type = "Single" })

-- Farm Section
local farmSection = farmTab:DrawSection({ Name = "Auto Equip", Position = "LEFT" })
farmSection:AddToggle({
	Name = "Auto Equip Best Brainrots",
	Flag = "AutoEquipBest",
	Default = Settings.AutoEquipBest,
	Callback = function(val)
		Settings.AutoEquipBest = val
		_G.AutoEquipBest = val
		saveConfig()
		if val then task.spawn(func['AutoEquipBest']) end
	end
})
farmSection:AddSlider({
	Name = "Equip Delay (seconds)",
	Min = 0.5, Max = 10, Default = Settings.AutoEquipDelay or 1, Round = 1,
	Flag = "AutoEquipDelay",
	Callback = function(val)
		Settings.AutoEquipDelay = val
		saveConfig()
	end
})

farmSection:AddButton({
	Name = "Manual Equip Best",
	Callback = function()
		pcall(function()
			replicated:WaitForChild("Remotes"):WaitForChild("EquipBestBrainrots"):FireServer()
		end)
	end
})

-- Shop Section
local shopLeft = shopTab:DrawSection({ Name = "Seeds Shop", Position = "LEFT" })
local shopRight = shopTab:DrawSection({ Name = "Gears Shop", Position = "RIGHT" })

shopLeft:AddParagraph({ Title = "Buy Speed", Content = "Seeds will be bought in bulk for faster purchase" })
shopLeft:AddSlider({
	Name = "Buy Amount (per cycle)",
	Min = 1, Max = 50, Default = Settings.BuyAmount or 10, Round = 1,
	Flag = "BuyAmount",
	Callback = function(val)
		Settings.BuyAmount = val
		saveConfig()
	end
})

shopLeft:AddToggle({
	Name = "Buy All Seeds",
	Default = Settings.BuyAllSeeds,
	Flag = "BuyAllSeeds",
	Callback = function(val)
		Settings.BuyAllSeeds = val
		saveConfig()
	end
})

local seedsDropdownValues = AllSeeds
shopLeft:AddDropdown({
	Name = "Select Seeds to Buy",
	Values = seedsDropdownValues,
	Default = Settings.SelectedSeeds or {},
	Multi = true,
	Flag = "SelectedSeeds",
	Callback = function(t)
		-- SoulsHub returns table of selected values when Multi = true
		local sel = {}
		for _, v in pairs(t) do
			table.insert(sel, v)
		end
		Settings.SelectedSeeds = sel
		saveConfig()
	end
})

shopLeft:AddToggle({
	Name = "Auto Buy Seeds",
	Default = Settings.AutoBuySeed,
	Flag = "AutoBuySeed",
	Callback = function(val)
		Settings.AutoBuySeed = val
		_G.AutoBuySeed = val
		saveConfig()
		if val then task.spawn(func['AutoBuySeed']) end
	end
})

shopLeft:AddButton({
	Name = "Buy Seeds Now (Fast)",
	Callback = function()
		pcall(function()
			local seedsToBuy = Settings.BuyAllSeeds and AllSeeds or Settings.SelectedSeeds
			local amount = Settings.BuyAmount or 10
			for _, seed in pairs(seedsToBuy) do
				for i = 1, amount do
					replicated:WaitForChild("Remotes"):WaitForChild("BuyItem"):FireServer(seed)
				end
			end
		end)
	end
})

-- Gears side
shopRight:AddDropdown({
	Name = "Select Gears to Buy",
	Values = AllGears,
	Default = Settings.SelectedGears or {},
	Multi = true,
	Flag = "SelectedGears",
	Callback = function(t)
		local sel = {}
		for _, v in pairs(t) do
			table.insert(sel, v)
		end
		Settings.SelectedGears = sel
		saveConfig()
	end
})

shopRight:AddToggle({
	Name = "Buy All Gears",
	Default = Settings.BuyAllGears,
	Flag = "BuyAllGears",
	Callback = function(val)
		Settings.BuyAllGears = val
		saveConfig()
	end
})

shopRight:AddToggle({
	Name = "Auto Buy Gears",
	Default = Settings.AutoBuyGear,
	Flag = "AutoBuyGear",
	Callback = function(val)
		Settings.AutoBuyGear = val
		_G.AutoBuyGear = val
		saveConfig()
		if val then task.spawn(func['AutoBuyGear']) end
	end
})

shopRight:AddButton({
	Name = "Buy Gears Now (Fast)",
	Callback = function()
		pcall(function()
			local gearsToBuy = Settings.BuyAllGears and AllGears or Settings.SelectedGears
			local amount = Settings.BuyAmount or 10
			for _, gear in pairs(gearsToBuy) do
				for i = 1, amount do
					replicated:WaitForChild("Remotes"):WaitForChild("BuyGear"):FireServer(gear)
				end
			end
		end)
	end
})

-- Webhook Tab
local webhookSection = webhookTab:DrawSection({ Name = "Discord Webhook", Position = "LEFT" })
webhookSection:AddParagraph({ Title = "Note", Content = "Webhook kept as an optional feature. No invite links included. Provide a webhook URL to enable." })

webhookSection:AddToggle({
	Name = "Enable Discord Webhook",
	Default = Settings.DiscordEnabled,
	Flag = "DiscordEnabled",
	Callback = function(val)
		Settings.DiscordEnabled = val
		saveConfig()
	end
})

webhookSection:AddInput({
	Name = "Webhook URL",
	Default = Settings.DiscordURL,
	Placeholder = "Paste Discord webhook URL (optional)",
	Flag = "DiscordURL",
	Callback = function(val)
		Settings.DiscordURL = val or ""
		saveConfig()
	end
})

webhookSection:AddButton({
	Name = "Send Backpack Data Now",
	Callback = function()
		if not Settings.DiscordEnabled or Settings.DiscordURL == "" then
			return
		end
		discordWebhook.sendToDiscord()
	end
})

webhookSection:AddButton({
	Name = "Preview Backpack",
	Callback = function()
		local brainrots, plants, seeds, gears = discordWebhook.getBackpackData()
		local text = string.format("Brainrots: %d\nPlants: %d\nSeeds: %d\nGears: %d", #brainrots, #plants, #seeds, #gears)
		print(text)
	end
})

-- Settings Tab
local settingsSection = settingsTab:DrawSection({ Name = "Performance", Position = "LEFT" })
settingsSection:AddToggle({
	Name = "White Screen Mode",
	Default = Settings.WhiteScreen,
	Flag = "WhiteScreen",
	Callback = function(val)
		Settings.WhiteScreen = val
		_G.WhiteScreen = val
		saveConfig()
		func['WhiteScreen']()
	end
})

local infoSection = settingsTab:DrawSection({ Name = "Information", Position = "RIGHT" })
infoSection:AddButton({
	Name = "Script Info",
	Callback = function()
		local info = string.format("Script: PvB (Souls Hub)\nPlayer: %s\nWebhook Support: %s\nSeeds: %d\nGears: %d",
			LocalPlayer.Name,
			webhookSupported and "Supported" or "Not Supported",
			#AllSeeds,
			#AllGears
		)
		print(info)
	end
})

-- Finalize
SoulsHub.Colors.Highlight = SoulsHub.Colors.Highlight -- keep existing highlight
SoulsHub:ChangeHighlightColor(SoulsHub.Colors.Highlight)

print("Souls Hub | Plants vs Brainrots loaded!")
