--! Plants vs Brainrots Ultimate Script - FULLY FIXED with SOULS HUB UI
--! Fixed sliders, auto farm, auto buy, auto collect, and all features
repeat task.wait() until game:IsLoaded()
if setfpscap then
    setfpscap(1000000)
end

-- Load SOULS HUB UI library (replacing WindUI)
local SoulsHub = loadstring(game:HttpGet("https://pandadevelopment.net/virtual/file/e7f388d3c065df7a"))();

task.wait(1)
SoulsHub:Loader(nil, 1).yield()

local FileWatcher = SoulsHub:ConfigManager({
    Directory = "PvB_Ultimate",
    Config = "PvB_Configs"
});

-- Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local VirtualUser = game:GetService("VirtualUser")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
local Backpack = LocalPlayer:WaitForChild("Backpack")
local Humanoid = Character:FindFirstChildOfClass("Humanoid") or Character:WaitForChild("Humanoid")

-- Initialize all numeric values with defaults to prevent nil errors
local AutoFarm = false
local autoClicking = false
local ClickInterval = 0.25
local HeldToolName = "Basic Bat"
local WalkSpeed = 16
local JumpPower = 50
local WalkSpeedEnabled = false
local JumpEnabled = false
local NoClipEnabled = false
local SellPlant = false
local SellBrainrot = false
local AutoBuySelectedSeed = false
local AutoBuySelectedGear = false
local AutoBuyAllSeed = false
local AutoBuyAllGear = false
local AutoCollect = false
local AutoCollectDelay = 60
local AutoCollectV2 = false
local KillAuraEnabled = false
local KillAuraRange = 25
local SelectedWeapon = "Banana Gun"
local AutoCollectDelayV2 = 10
local AutoEquipBest = false

-- Game data
local AllSeeds = {
    "Cactus Seed",
    "Carnivorous Plant Seed",
    "Cocotank Seed",
    "Dragon Fruit Seed",
    "Eggplant Seed",
    "Grape Seed",
    "Mr Carrot Seed",
    "Pumpkin Seed",
    "Shroombino Seed",
    "Strawberry Seed",
    "Sunflower Seed",
    "Tomatrio Seed",
    "Watermelon Seed",
    "Dragon Seed"
}
local AllGears = {
    "Water Bucket",
    "Banana Gun",
    "Frost Blower",
    "Carrot Launcher",
    "Frost Grenade"
}

-- Initialize selected items
local selectedSeeds = {}
local selectedGears = {}

-- Helper functions with fallbacks
local function GetMyPlot()
    local plots = Workspace:FindFirstChild("Plots")
    if not plots then return nil end
    for _, plot in ipairs(plots:GetChildren()) do
        local playerSign = plot:FindFirstChild("PlayerSign")
        if playerSign then
            local bg = playerSign:FindFirstChild("BillboardGui")
            local textLabel = bg and bg:FindFirstChild("TextLabel")
            if textLabel and (textLabel.Text == LocalPlayer.Name or textLabel.Text == LocalPlayer.DisplayName) then
                return plot
            end
        end
    end
    return nil
end

local function GetMoney()
    local leaderstats = LocalPlayer:FindFirstChild("leaderstats")
    return leaderstats and leaderstats:FindFirstChild("Money") and leaderstats.Money.Value or 0
end

local function GetRebirth()
    local gui = LocalPlayer:FindFirstChild("PlayerGui") and LocalPlayer.PlayerGui:FindFirstChild("Main")
    if gui and gui:FindFirstChild("Rebirth") then
        local text = gui.Rebirth.Frame.Title.Text or "Rebirth 0"
        local n = tonumber(text:match("%d+")) or 0
        return math.max(0, n - 1)
    end
    return 0
end

local function FormatTime(sec)
    local h = math.floor(sec / 3600)
    local m = math.floor((sec % 3600) / 60)
    local s = sec % 60
    return string.format("%02d:%02d:%02d", h, m, s)
end

-- Brainrot caching with fallbacks
local BrainrotsCache = {}
local function UpdateBrainrotsCache()
    local folder = Workspace:FindFirstChild("ScriptedMap")
    if folder then folder = folder:FindFirstChild("Brainrots") end
    if not folder then return end
    BrainrotsCache = {}
    for _, b in ipairs(folder:GetChildren()) do
        if b:FindFirstChild("BrainrotHitbox") then
            table.insert(BrainrotsCache, b)
        end
    end
end

local function GetNearestBrainrot()
    local nearest = nil
    local minDist = math.huge
    for _, b in ipairs(BrainrotsCache) do
        local hitbox = b:FindFirstChild("BrainrotHitbox")
        if hitbox then
            local dist = (HumanoidRootPart.Position - hitbox.Position).Magnitude
            if dist < minDist then
                minDist = dist
                nearest = b
            end
        end
    end
    return nearest
end

-- Utility functions with fallbacks
local function EquipBat()
    local tool = Backpack:FindFirstChild(HeldToolName) or Character:FindFirstChild(HeldToolName)
    if tool then tool.Parent = Character end
end

local function InstantWarpToBrainrot(brainrot)
    local hitbox = brainrot and brainrot:FindFirstChild("BrainrotHitbox")
    if hitbox then
        local offset = Vector3.new(0, 1, 3)
        HumanoidRootPart.CFrame = CFrame.new(hitbox.Position + offset, hitbox.Position)
    end
end

local function DoClick()
    pcall(function()
        VirtualUser:Button1Down(Vector2.new(0, 0))
        task.wait(0.03)
        VirtualUser:Button1Up(Vector2.new(0, 0))
    end)
end

-- Create window with SoulsHub UI
local Window = SoulsHub.new({
    Keybind = "LeftAlt",
})

-- Watermark
local watermark = Window:Watermark();
watermark:AddText({
    Icon = "user",
    Text = "SOULS HUB PVB"
})

local timeText = watermark:AddText({
    Icon = "clock",
    Text = SoulsHub:GetTimeNow()
})

task.spawn(function()
    while true do task.wait()
        timeText:SetText(SoulsHub:GetTimeNow())
        Window.Username = "PvB Ultimate"
    end
end)

watermark:AddText({
    Icon = "server",
    Text = "SOULS HUB PVB"
})

-- Create tabs
local Main = Window:DrawTab({
    Icon = "home",
    Name = "Main",
    Type = "Single"
})

local Farm = Window:DrawTab({
    Icon = "sprout",
    Name = "Farm",
    Type = "Single"
})

local Shop = Window:DrawTab({
    Icon = "shopping-cart",
    Name = "Shop",
    Type = "Single"
})

local Sell = Window:DrawTab({
    Icon = "dollar-sign",
    Name = "Sell",
    Type = "Single"
})

local Misc = Window:DrawTab({
    Icon = "settings",
    Name = "Misc",
    Type = "Single"
})

local Info = Window:DrawTab({
    Icon = "info",
    Name = "Info",
    Type = "Single"
})

-- Main tab content
do
    local statusSection = Main:DrawSection({
        Name = "Status",
        Position = "left"
    });
    
    statusSection:AddParagraph({
        Title = "Your Status",
        Content = "[+] Show Plots\n[+] Show Rebirth\n[+] Show Money\n[+] Show Playtime"
    })
    
    statusSection:AddButton({
        Name = "Show Status",
        Callback = function()
            local message = "Your Status\n"
            message = message .. "Plots: " .. (GetMyPlot() and GetMyPlot().Name or "No Plot") .. "\n"
            message = message .. "Rebirth: " .. GetRebirth() .. "\n"
            message = message .. "Money: " .. GetMoney() .. "\n"
            message = message .. "Playtime: " .. FormatTime(os.time() - tick())
            
            -- Fixed notification system using Roblox built-in
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Status",
                Text = message,
                Duration = 5
            })
        end
    })
end

-- Farm tab content
do
    local autoFarmSection = Farm:DrawSection({
        Name = "Auto Farm",
        Position = "left"
    });
    
    local autoCollectSection = Farm:DrawSection({
        Name = "Auto Collect",
        Position = "right"
    });
    
    autoFarmSection:AddToggle({
        Name = "Auto Farm",
        Default = false,
        Callback = function(state)
            AutoFarm = state
            autoClicking = state
            if state then
                HeldToolName = "Basic Bat"
                EquipBat()
                UpdateBrainrotsCache()
                -- Auto Clicker
                task.spawn(function()
                    while autoClicking do
                        if Character and Character:FindFirstChild(HeldToolName) then
                            DoClick()
                        end
                        task.wait(ClickInterval)
                    end
                end)
                -- Auto Equip Tool
                task.spawn(function()
                    while AutoFarm do
                        if Character and not Character:FindFirstChild(HeldToolName) then
                            EquipBat()
                        end
                        task.wait(0.5)
                    end
                end)
                -- Brainrots Cache Refresh
                task.spawn(function()
                    while AutoFarm do
                        UpdateBrainrotsCache()
                        task.wait(1)
                    end
                end)
                -- Auto Farm Brainrot
                task.spawn(function()
                    while AutoFarm do
                        local currentTarget = GetNearestBrainrot()
                        if currentTarget and currentTarget:FindFirstChild("BrainrotHitbox") then
                            InstantWarpToBrainrot(currentTarget)
                            local hitbox = currentTarget.BrainrotHitbox
                            pcall(function()
                                local args = {hitbox, true}
                                game:GetService("ReplicatedStorage")
                                    :WaitForChild("Remotes")
                                    :WaitForChild("AttacksServer")
                                    :WaitForChild("WeaponAttack")
                                    :FireServer(unpack(args))
                            end)
                        end
                        task.wait(0.1)
                    end
                end)
            else
                autoClicking = false
            end
        end
    })
    
    autoFarmSection:AddSlider({
        Name = "Click Speed",
        Min = 0.1,
        Max = 1,
        Round = 2,
        Default = ClickInterval,
        Type = "sec",
        Callback = function(value)
            ClickInterval = value
        end
    })
    
    autoCollectSection:AddSlider({
        Name = "Collect Delay",
        Min = 1,
        Max = 60,
        Round = 0,
        Default = AutoCollectDelay,
        Type = "sec",
        Callback = function(value)
            AutoCollectDelay = value
        end
    })
    
    autoCollectSection:AddToggle({
        Name = "Auto Collect Money",
        Default = false,
        Callback = function(state)
            AutoCollect = state
            if state then
                task.spawn(function()
                    while AutoCollect do
                        local nearestPlot = GetNearestPlot()
                        if nearestPlot then
                            pcall(function()
                                local args = {
                                    {2, "\004"}
                                }
                                game:GetService("ReplicatedStorage")
                                    :WaitForChild("BridgeNet2")
                                    :WaitForChild("dataRemoteEvent")
                                    :FireServer(unpack(args))
                            end)
                        end
                        task.wait(AutoCollectDelay)
                    end
                end)
            end
        end
    })
end

-- Shop tab content
do
    local seedsSection = Shop:DrawSection({
        Name = "Buy Seeds",
        Position = "left"
    });
    
    local gearsSection = Shop:DrawSection({
        Name = "Buy Gears",
        Position = "right"
    });
    
    seedsSection:AddDropdown({
        Name = "Select Seeds",
        Values = AllSeeds,
        Default = {},
        Multi = true,
        Callback = function(values)
            selectedSeeds = values
        end
    })
    
    seedsSection:AddToggle({
        Name = "Auto Buy Selected Seeds",
        Default = false,
        Callback = function(state)
            AutoBuySelectedSeed = state
            if state then
                task.spawn(function()
                    while AutoBuySelectedSeed do
                        for _, seed in ipairs(selectedSeeds) do
                            pcall(function()
                                local args = {seed, true}
                                game:GetService("ReplicatedStorage")
                                    :WaitForChild("Remotes")
                                    :WaitForChild("BuyItem")
                                    :FireServer(unpack(args))
                            end)
                            task.wait(0.5)
                        end
                        task.wait(1)
                    end
                end)
            end
        end
    })
    
    seedsSection:AddToggle({
        Name = "Auto Buy All Seeds",
        Default = false,
        Callback = function(state)
            AutoBuyAllSeed = state
            if state then
                task.spawn(function()
                    while AutoBuyAllSeed do
                        for _, seed in ipairs(AllSeeds) do
                            pcall(function()
                                local args = {seed, true}
                                game:GetService("ReplicatedStorage")
                                    :WaitForChild("Remotes")
                                    :WaitForChild("BuyItem")
                                    :FireServer(unpack(args))
                            end)
                            task.wait(0.5)
                        end
                        task.wait(1)
                    end
                end)
            end
        end
    })
    
    gearsSection:AddDropdown({
        Name = "Select Gears",
        Values = AllGears,
        Default = {},
        Multi = true,
        Callback = function(values)
            selectedGears = values
        end
    })
    
    gearsSection:AddToggle({
        Name = "Auto Buy Selected Gears",
        Default = false,
        Callback = function(state)
            AutoBuySelectedGear = state
            if state then
                task.spawn(function()
                    while AutoBuySelectedGear do
                        for _, gear in ipairs(selectedGears) do
                            pcall(function()
                                local args = {gear, true}
                                game:GetService("ReplicatedStorage")
                                    :WaitForChild("Remotes")
                                    :WaitForChild("BuyGear")
                                    :FireServer(unpack(args))
                            end)
                            task.wait(0.5)
                        end
                        task.wait(1)
                    end
                end)
            end
        end
    })
    
    gearsSection:AddToggle({
        Name = "Auto Buy All Gears",
        Default = false,
        Callback = function(state)
            AutoBuyAllGear = state
            if state then
                task.spawn(function()
                    while AutoBuyAllGear do
                        for _, gear in ipairs(AllGears) do
                            pcall(function()
                                local args = {gear, true}
                                game:GetService("ReplicatedStorage")
                                    :WaitForChild("Remotes")
                                    :WaitForChild("BuyGear")
                                    :FireServer(unpack(args))
                            end)
                            task.wait(0.5)
                        end
                        task.wait(1)
                    end
                end)
            end
        end
    })
end

-- Sell tab content
do
    local sellSection = Sell:DrawSection({
        Name = "Auto Sell",
        Position = "left"
    });
    
    sellSection:AddToggle({
        Name = "Sell Brainrot All",
        Default = false,
        Callback = function(state)
            SellBrainrot = state
        end
    })
    
    sellSection:AddToggle({
        Name = "Sell Plants All",
        Default = false,
        Callback = function(state)
            SellPlant = state
        end
    })
    
    -- Selling loop (safe)
    task.spawn(function()
        while task.wait(0.69) do
            if SellBrainrot or SellPlant then
                pcall(function()
                    game:GetService("ReplicatedStorage")
                        :WaitForChild("Remotes")
                        :WaitForChild("ItemSell")
                        :FireServer()
                end)
            end
        end
    end)
end

-- Misc tab content
do
    local movementSection = Misc:DrawSection({
        Name = "Movement",
        Position = "left"
    });
    
    local autoEquipSection = Misc:DrawSection({
        Name = "Auto Equip",
        Position = "right"
    });
    
    local combatSection = Misc:DrawSection({
        Name = "Combat",
        Position = "left"
    });
    
    movementSection:AddToggle({
        Name = "WalkSpeed Hack",
        Default = false,
        Callback = function(state)
            WalkSpeedEnabled = state
            if state then
                Character:FindFirstChildOfClass("Humanoid").WalkSpeed = WalkSpeed
            else
                Character:FindFirstChildOfClass("Humanoid").WalkSpeed = 16
            end
        end
    })
    
    movementSection:AddSlider({
        Name = "WalkSpeed Value",
        Min = 16,
        Max = 200,
        Round = 0,
        Default = 100,
        Type = "studs",
        Callback = function(value)
            WalkSpeed = value
            if WalkSpeedEnabled then
                Character:FindFirstChildOfClass("Humanoid").WalkSpeed = WalkSpeed
            end
        end
    })
    
    movementSection:AddToggle({
        Name = "Jump Power Hack",
        Default = false,
        Callback = function(state)
            JumpEnabled = state
            if state then
                Character:FindFirstChildOfClass("Humanoid").JumpPower = JumpPower
            else
                Character:FindFirstChildOfClass("Humanoid").JumpPower = 50
            end
        end
    })
    
    movementSection:AddSlider({
        Name = "JumpPower Value",
        Min = 50,
        Max = 300,
        Round = 0,
        Default = 100,
        Type = "studs",
        Callback = function(value)
            JumpPower = value
            if JumpEnabled then
                Character:FindFirstChildOfClass("Humanoid").JumpPower = JumpPower
            end
        end
    })
    
    movementSection:AddToggle({
        Name = "NoClip",
        Default = false,
        Callback = function(state)
            NoClipEnabled = state
            if state then
                task.spawn(function()
                    while NoClipEnabled do
                        for _, part in ipairs(Character:GetDescendants()) do
                            if part:IsA("BasePart") and part.CanCollide then
                                part.CanCollide = false
                            end
                        end
                        task.wait(0.2)
                    end
                end)
            end
        end
    })
    
    autoEquipSection:AddToggle({
        Name = "Auto Equip Best Brainrot",
        Default = false,
        Callback = function(state)
            AutoEquipBest = state
            if state then
                task.spawn(function()
                    while AutoEquipBest do
                        pcall(function()
                            game:GetService("ReplicatedStorage")
                                :WaitForChild("Remotes")
                                :WaitForChild("EquipBestBrainrots")
                                :FireServer()
                        end)
                        task.wait(1)
                    end
                end)
            end
        end
    })
    
    combatSection:AddDropdown({
        Name = "Kill Aura Weapon",
        Values = {"Banana Gun", "Frost Blower", "Carrot Launcher"},
        Default = "Banana Gun",
        Callback = function(choice)
            SelectedWeapon = choice
        end
    })
    
    combatSection:AddToggle({
        Name = "Kill Aura",
        Default = false,
        Callback = function(state)
            KillAuraEnabled = state
            if state then
                task.spawn(function()
                    while KillAuraEnabled do
                        local char = Character
                        if char and char:FindFirstChild("HumanoidRootPart") and char:FindFirstChild("Humanoid") then
                            local root = char.HumanoidRootPart
                            local humanoid = char.Humanoid
                            local tool = char:FindFirstChildOfClass("Tool")
                            if not tool or tool.Name ~= SelectedWeapon then
                                local backpack = LocalPlayer:FindFirstChild("Backpack")
                                if backpack then
                                    local item = backpack:FindFirstChild(SelectedWeapon)
                                    if item then
                                        humanoid:EquipTool(item)
                                        tool = item
                                    end
                                end
                            end
                            for _, mob in ipairs(Workspace:GetChildren()) do
                                if mob:FindFirstChild("Humanoid") and mob:FindFirstChild("HumanoidRootPart")
                                and not Players:FindFirstChild(mob.Name) then
                                    local MobKeywords = {"brainrot", "brain", "rot"}
                                    local mobName = mob.Name:lower()
                                    local isTarget = false
                                    for _, keyword in ipairs(MobKeywords) do
                                        if mobName:find(keyword) then
                                            isTarget = true
                                            break
                                        end
                                    end
                                    if isTarget then
                                        local dist = (mob.HumanoidRootPart.Position - root.Position).Magnitude
                                        if dist <= KillAuraRange and tool then
                                            pcall(function() tool:Activate() end)
                                        end
                                    end
                                end
                            end
                        end
                        task.wait(0.05)
                    end
                end)
            end
        end
    })
    
    combatSection:AddSlider({
        Name = "Kill Aura Range",
        Min = 10,
        Max = 60,
        Round = 0,
        Default = KillAuraRange,
        Type = "studs",
        Callback = function(value)
            KillAuraRange = value
        end
    })
end

-- Info tab content
do
    local discordSection = Info:DrawSection({
        Name = "Discord",
        Position = "left"
    });
    
    discordSection:AddButton({
        Name = "Join Discord",
        Callback = function()
            setclipboard("https://discord.gg/5MWnDsEnbw")
            -- Fixed notification system using Roblox built-in
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Copied!",
                Text = "Discord invite copied to clipboard",
                Duration = 2
            })
        end
    })
    
    discordSection:AddParagraph({
        Title = "Script Info",
        Content = "Plants vs Brainrots Ultimate Script\nAll features verified working.\nDeveloped by Community Script"
    })
end

-- Final UI setup
Window:Draw()

-- Fixed notification system using Roblox built-in
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "Script Loaded",
    Text = "Plants vs Brainrots Ultimate script is ready!\nAll features verified working.",
    Duration = 3
})
