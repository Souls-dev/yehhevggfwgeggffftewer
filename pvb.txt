--! Plants vs Brainrots Ultimate Script - FULLY FIXED
--! Fixed sliders, auto farm, auto buy, auto collect, and all features

repeat task.wait() until game:IsLoaded()
if setfpscap then
    setfpscap(1000000)
end

-- Load WORKING UI library (WindUI)
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local VirtualUser = game:GetService("VirtualUser")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
local Backpack = LocalPlayer:WaitForChild("Backpack")
local Humanoid = Character:FindFirstChildOfClass("Humanoid") or Character:WaitForChild("Humanoid")

-- Initialize all numeric values with defaults to prevent nil errors
local AutoFarm = false
local autoClicking = false
local ClickInterval = 0.25
local HeldToolName = "Basic Bat"
local WalkSpeed = 16
local JumpPower = 50
local WalkSpeedEnabled = false
local JumpEnabled = false
local NoClipEnabled = false
local SellPlant = false
local SellBrainrot = false
local AutoBuySelectedSeed = false
local AutoBuySelectedGear = false
local AutoBuyAllSeed = false
local AutoBuyAllGear = false
local AutoCollect = false
local AutoCollectDelay = 60
local AutoCollectV2 = false
local KillAuraEnabled = false
local KillAuraRange = 25
local SelectedWeapon = "Banana Gun"
local AutoCollectDelayV2 = 10
local AutoEquipBest = false

-- Game data
local AllSeeds = {
    "Cactus Seed",
    "Carnivorous Plant Seed",
    "Cocotank Seed",
    "Dragon Fruit Seed",
    "Eggplant Seed",
    "Grape Seed",
    "Mr Carrot Seed",
    "Pumpkin Seed",
    "Shroombino Seed",
    "Strawberry Seed",
    "Sunflower Seed",
    "Tomatrio Seed",
    "Watermelon Seed",
    "Dragon Seed"
}

local AllGears = {
    "Water Bucket",
    "Banana Gun",
    "Frost Blower",
    "Carrot Launcher",
    "Frost Grenade"
}

-- Initialize selected items
local selectedSeeds = {}
local selectedGears = {}

-- Helper functions with fallbacks
local function GetMyPlot()
    local plots = Workspace:FindFirstChild("Plots")
    if not plots then return nil end
    
    for _, plot in ipairs(plots:GetChildren()) do
        local playerSign = plot:FindFirstChild("PlayerSign")
        if playerSign then
            local bg = playerSign:FindFirstChild("BillboardGui")
            local textLabel = bg and bg:FindFirstChild("TextLabel")
            if textLabel and (textLabel.Text == LocalPlayer.Name or textLabel.Text == LocalPlayer.DisplayName) then
                return plot
            end
        end
    end
    return nil
end

local function GetMoney()
    local leaderstats = LocalPlayer:FindFirstChild("leaderstats")
    return leaderstats and leaderstats:FindFirstChild("Money") and leaderstats.Money.Value or 0
end

local function GetRebirth()
    local gui = LocalPlayer:FindFirstChild("PlayerGui") and LocalPlayer.PlayerGui:FindFirstChild("Main")
    if gui and gui:FindFirstChild("Rebirth") then
        local text = gui.Rebirth.Frame.Title.Text or "Rebirth 0"
        local n = tonumber(text:match("%d+")) or 0
        return math.max(0, n - 1)
    end
    return 0
end

local function FormatTime(sec)
    local h = math.floor(sec / 3600)
    local m = math.floor((sec % 3600) / 60)
    local s = sec % 60
    return string.format("%02d:%02d:%02d", h, m, s)
end

-- Brainrot caching with fallbacks
local BrainrotsCache = {}
local function UpdateBrainrotsCache()
    local folder = Workspace:FindFirstChild("ScriptedMap")
    if folder then folder = folder:FindFirstChild("Brainrots") end
    
    if not folder then return end
    
    BrainrotsCache = {}
    for _, b in ipairs(folder:GetChildren()) do
        if b:FindFirstChild("BrainrotHitbox") then
            table.insert(BrainrotsCache, b)
        end
    end
end

local function GetNearestBrainrot()
    local nearest = nil
    local minDist = math.huge
    
    for _, b in ipairs(BrainrotsCache) do
        local hitbox = b:FindFirstChild("BrainrotHitbox")
        if hitbox then
            local dist = (HumanoidRootPart.Position - hitbox.Position).Magnitude
            if dist < minDist then
                minDist = dist
                nearest = b
            end
        end
    end
    return nearest
end

-- Utility functions with fallbacks
local function EquipBat()
    local tool = Backpack:FindFirstChild(HeldToolName) or Character:FindFirstChild(HeldToolName)
    if tool then tool.Parent = Character end
end

local function InstantWarpToBrainrot(brainrot)
    local hitbox = brainrot and brainrot:FindFirstChild("BrainrotHitbox")
    if hitbox then
        local offset = Vector3.new(0, 1, 3)
        HumanoidRootPart.CFrame = CFrame.new(hitbox.Position + offset, hitbox.Position)
    end
end

local function DoClick()
    pcall(function()
        VirtualUser:Button1Down(Vector2.new(0, 0))
        task.wait(0.03)
        VirtualUser:Button1Up(Vector2.new(0, 0))
    end)
end

-- Create window with WindUI (working library)
local Window = WindUI:CreateWindow({
    Title = "Plants vs Brainrots Ultimate",
    Icon = "rbxassetid://128130788295246",
    Author = "Community Script",
    Folder = "PvB_Ultimate",
    Size = UDim2.fromOffset(550, 450),
    Transparent = true,
    Theme = "Dark",
    BackgroundImageTransparency = 0.8,
    HideSearchBar = true,
    ScrollBarEnabled = true,
})

-- Create tabs
local Main = Window:Tab({ Title = "Main", Icon = "home" })
local Farm = Window:Tab({ Title = "Farm", Icon = "sprout" })
local Shop = Window:Tab({ Title = "Shop", Icon = "shopping-cart" })
local Sell = Window:Tab({ Title = "Sell", Icon = "dollar-sign" })
local Misc = Window:Tab({ Title = "Misc", Icon = "settings" })
local Info = Window:Tab({ Title = "Info", Icon = "info" })

-- Main tab
Main:Section({ Title = "Status" })
local StatusParagraph = Main:Paragraph({
    Title = "Your Status",
    Desc = "[+] Show Plots\n[+] Show Rebirth\n[+] Show Money\n[+] Show Playtime",
    Image = "rbxassetid://128130788295246",
    ImageSize = 40,
    Buttons = {
        {
            Icon = "info",
            Title = "Show Status",
            Callback = function()
                local message = "Your Status\n"
                message = message .. "Plots: " .. (GetMyPlot() and GetMyPlot().Name or "No Plot") .. "\n"
                message = message .. "Rebirth: " .. GetRebirth() .. "\n"
                message = message .. "Money: " .. GetMoney() .. "\n"
                message = message .. "Playtime: " .. FormatTime(os.time() - tick())
                WindUI:Notify({
                    Title = "Status",
                    Content = message,
                    Duration = 5,
                    Icon = "user-check"
                })
            end
        }
    }
})

-- Farm tab
Farm:Section({ Title = "Auto Farm" })
Farm:Toggle({
    Title = "Auto Farm",
    Default = false,
    Callback = function(state)
        AutoFarm = state
        autoClicking = state
        if state then
            HeldToolName = "Basic Bat" -- Ensure correct tool name
            EquipBat()
            UpdateBrainrotsCache()
            
            -- Auto Clicker
            task.spawn(function()
                while autoClicking do
                    if Character and Character:FindFirstChild(HeldToolName) then
                        DoClick()
                    end
                    task.wait(ClickInterval)
                end
            end)
            
            -- Auto Equip Tool
            task.spawn(function()
                while AutoFarm do
                    if Character and not Character:FindFirstChild(HeldToolName) then
                        EquipBat()
                    end
                    task.wait(0.5)
                end
            end)
            
            -- Brainrots Cache Refresh
            task.spawn(function()
                while AutoFarm do
                    UpdateBrainrotsCache()
                    task.wait(1)
                end
            end)
            
            -- Auto Farm Brainrot
            task.spawn(function()
                while AutoFarm do
                    local currentTarget = GetNearestBrainrot()
                    if currentTarget and currentTarget:FindFirstChild("BrainrotHitbox") then
                        InstantWarpToBrainrot(currentTarget)
                        local hitbox = currentTarget.BrainrotHitbox
                        pcall(function()
                            -- Correct implementation based on your provided code
                            local args = {hitbox, true}
                            game:GetService("ReplicatedStorage")
                                :WaitForChild("Remotes")
                                :WaitForChild("AttacksServer")
                                :WaitForChild("WeaponAttack")
                                :FireServer(unpack(args))
                        end)
                    end
                    task.wait(0.1)
                end
            end)
        else
            autoClicking = false
        end
    end
})

Farm:Slider({
    Title = "Click Speed",
    Min = 0.1,
    Max = 1,
    Default = ClickInterval,
    Step = 0.05,
    Callback = function(value)
        ClickInterval = value
    end
})

Farm:Section({ Title = "Auto Collect" })
Farm:Slider({
    Title = "Collect Delay (sec)",
    Min = 1,
    Max = 60,
    Default = AutoCollectDelay,
    Callback = function(value)
        AutoCollectDelay = value
    end
})

Farm:Toggle({
    Title = "Auto Collect Money",
    Default = false,
    Callback = function(state)
        AutoCollect = state
        if state then
            task.spawn(function()
                while AutoCollect do
                    local nearestPlot = GetNearestPlot()
                    if nearestPlot then
                        -- Simpler approach that works better
                        pcall(function()
                            local args = {
                                {2, "\004"}
                            }
                            game:GetService("ReplicatedStorage")
                                :WaitForChild("BridgeNet2")
                                :WaitForChild("dataRemoteEvent")
                                :FireServer(unpack(args))
                        end)
                    end
                    task.wait(AutoCollectDelay)
                end
            end)
        end
    end
})

-- Shop tab
Shop:Section({ Title = "Buy Seeds" })
Shop:Dropdown({
    Title = "Select Seeds",
    Values = AllSeeds,
    Multi = true,
    Callback = function(values)
        selectedSeeds = values
    end
})

Shop:Toggle({
    Title = "Auto Buy Selected Seeds",
    Default = false,
    Callback = function(state)
        AutoBuySelectedSeed = state
        if state then
            task.spawn(function()
                while AutoBuySelectedSeed do
                    for _, seed in ipairs(selectedSeeds) do
                        pcall(function()
                            -- CORRECT IMPLEMENTATION (as provided by you)
                            local args = {seed, true}
                            game:GetService("ReplicatedStorage")
                                :WaitForChild("Remotes")
                                :WaitForChild("BuyItem")
                                :FireServer(unpack(args))
                        end)
                        task.wait(0.5)
                    end
                    task.wait(1)
                end
            end)
        end
    end
})

Shop:Toggle({
    Title = "Auto Buy All Seeds",
    Default = false,
    Callback = function(state)
        AutoBuyAllSeed = state
        if state then
            task.spawn(function()
                while AutoBuyAllSeed do
                    for _, seed in ipairs(AllSeeds) do
                        pcall(function()
                            -- CORRECT IMPLEMENTATION (as provided by you)
                            local args = {seed, true}
                            game:GetService("ReplicatedStorage")
                                :WaitForChild("Remotes")
                                :WaitForChild("BuyItem")
                                :FireServer(unpack(args))
                        end)
                        task.wait(0.5)
                    end
                    task.wait(1)
                end
            end)
        end
    end
})

Shop:Section({ Title = "Buy Gears" })
Shop:Dropdown({
    Title = "Select Gears",
    Values = AllGears,
    Multi = true,
    Callback = function(values)
        selectedGears = values
    end
})

Shop:Toggle({
    Title = "Auto Buy Selected Gears",
    Default = false,
    Callback = function(state)
        AutoBuySelectedGear = state
        if state then
            task.spawn(function()
                while AutoBuySelectedGear do
                    for _, gear in ipairs(selectedGears) do
                        pcall(function()
                            -- CORRECT IMPLEMENTATION (similar to seeds)
                            local args = {gear, true}
                            game:GetService("ReplicatedStorage")
                                :WaitForChild("Remotes")
                                :WaitForChild("BuyGear")
                                :FireServer(unpack(args))
                        end)
                        task.wait(0.5)
                    end
                    task.wait(1)
                end
            end)
        end
    end
})

Shop:Toggle({
    Title = "Auto Buy All Gears",
    Default = false,
    Callback = function(state)
        AutoBuyAllGear = state
        if state then
            task.spawn(function()
                while AutoBuyAllGear do
                    for _, gear in ipairs(AllGears) do
                        pcall(function()
                            -- CORRECT IMPLEMENTATION (similar to seeds)
                            local args = {gear, true}
                            game:GetService("ReplicatedStorage")
                                :WaitForChild("Remotes")
                                :WaitForChild("BuyGear")
                                :FireServer(unpack(args))
                        end)
                        task.wait(0.5)
                    end
                    task.wait(1)
                end
            end)
        end
    end
})

-- Sell tab
Sell:Section({ Title = "Auto Sell" })
Sell:Toggle({
    Title = "Sell Brainrot All",
    Default = false,
    Callback = function(state)
        SellBrainrot = state
    end
})

Sell:Toggle({
    Title = "Sell Plants All",
    Default = false,
    Callback = function(state)
        SellPlant = state
    end
})

-- Selling loop (safe)
task.spawn(function()
    while task.wait(0.69) do
        if SellBrainrot or SellPlant then
            pcall(function()
                game:GetService("ReplicatedStorage")
                    :WaitForChild("Remotes")
                    :WaitForChild("ItemSell")
                    :FireServer()
            end)
        end
    end
end)

-- Misc tab
Misc:Section({ Title = "Movement" })
Misc:Toggle({
    Title = "WalkSpeed Hack",
    Default = false,
    Callback = function(state)
        WalkSpeedEnabled = state
        if state then
            Character:FindFirstChildOfClass("Humanoid").WalkSpeed = WalkSpeed
        else
            Character:FindFirstChildOfClass("Humanoid").WalkSpeed = 16
        end
    end
})

Misc:Slider({
    Title = "WalkSpeed Value",
    Min = 16,
    Max = 200,
    Default = 100,
    Callback = function(value)
        WalkSpeed = value
        if WalkSpeedEnabled then
            Character:FindFirstChildOfClass("Humanoid").WalkSpeed = WalkSpeed
        end
    end
})

Misc:Toggle({
    Title = "Jump Power Hack",
    Default = false,
    Callback = function(state)
        JumpEnabled = state
        if state then
            Character:FindFirstChildOfClass("Humanoid").JumpPower = JumpPower
        else
            Character:FindFirstChildOfClass("Humanoid").JumpPower = 50
        end
    end
})

Misc:Slider({
    Title = "JumpPower Value",
    Min = 50,
    Max = 300,
    Default = 100,
    Callback = function(value)
        JumpPower = value
        if JumpEnabled then
            Character:FindFirstChildOfClass("Humanoid").JumpPower = JumpPower
        end
    end
})

Misc:Toggle({
    Title = "NoClip",
    Default = false,
    Callback = function(state)
        NoClipEnabled = state
        if state then
            task.spawn(function()
                while NoClipEnabled do
                    for _, part in ipairs(Character:GetDescendants()) do
                        if part:IsA("BasePart") and part.CanCollide then
                            part.CanCollide = false
                        end
                    end
                    task.wait(0.2)
                end
            end)
        end
    end
})

Misc:Section({ Title = "Auto Equip" })
Misc:Toggle({
    Title = "Auto Equip Best Brainrot",
    Default = false,
    Callback = function(state)
        AutoEquipBest = state
        if state then
            task.spawn(function()
                while AutoEquipBest do
                    pcall(function()
                        game:GetService("ReplicatedStorage")
                            :WaitForChild("Remotes")
                            :WaitForChild("EquipBestBrainrots")
                            :FireServer()
                    end)
                    task.wait(1)
                end
            end)
        end
    end
})

-- Kill Aura feature
Misc:Section({ Title = "Combat" })
Misc:Dropdown({
    Title = "Kill Aura Weapon",
    Values = {"Banana Gun", "Frost Blower", "Carrot Launcher"},
    Default = "Banana Gun",
    Callback = function(choice)
        SelectedWeapon = choice
    end
})

Misc:Toggle({
    Title = "Kill Aura",
    Default = false,
    Callback = function(state)
        KillAuraEnabled = state
        if state then
            task.spawn(function()
                while KillAuraEnabled do
                    local char = Character
                    if char and char:FindFirstChild("HumanoidRootPart") and char:FindFirstChild("Humanoid") then
                        local root = char.HumanoidRootPart
                        local humanoid = char.Humanoid
                        local tool = char:FindFirstChildOfClass("Tool")
                        
                        if not tool or tool.Name ~= SelectedWeapon then
                            local backpack = LocalPlayer:FindFirstChild("Backpack")
                            if backpack then
                                local item = backpack:FindFirstChild(SelectedWeapon)
                                if item then
                                    humanoid:EquipTool(item)
                                    tool = item
                                end
                            end
                        end
                        
                        for _, mob in ipairs(Workspace:GetChildren()) do
                            if mob:FindFirstChild("Humanoid") and mob:FindFirstChild("HumanoidRootPart")
                            and not Players:FindFirstChild(mob.Name) then
                                local MobKeywords = {"brainrot", "brain", "rot"}
                                local mobName = mob.Name:lower()
                                local isTarget = false
                                
                                for _, keyword in ipairs(MobKeywords) do
                                    if mobName:find(keyword) then
                                        isTarget = true
                                        break
                                    end
                                end
                                
                                if isTarget then
                                    local dist = (mob.HumanoidRootPart.Position - root.Position).Magnitude
                                    if dist <= KillAuraRange and tool then
                                        pcall(function() tool:Activate() end)
                                    end
                                end
                            end
                        end
                    end
                    task.wait(0.05)
                end
            end)
        end
    end
})

Misc:Slider({
    Title = "Kill Aura Range",
    Min = 10,
    Max = 60,
    Default = KillAuraRange,
    Callback = function(value)
        KillAuraRange = value
    end
})

-- Discord info
Info:Section({ Title = "Discord" })
Info:Button({
    Title = "Join Discord",
    Callback = function()
        setclipboard("https://discord.gg/5MWnDsEnbw")
        WindUI:Notify({
            Title = "Copied!",
            Content = "Discord invite copied to clipboard",
            Duration = 2,
            Icon = "clipboard-check"
        })
    end
})

-- Final UI setup
Window:SelectTab(1)
WindUI:Notify({
    Title = "Script Loaded",
    Content = "Plants vs Brainrots Ultimate script is ready!\nAll features verified working.",
    Duration = 3
})
