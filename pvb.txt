-- [[ Souls Hub - Ultimate Game Automation ]]
-- [[ Merged: Plants vs Brainrots, VynHub, Cheat Admin Panel, Movement, ESP, and more ]]
-- [[ Created with SoulsHub UI Library (sensitive but working) ]]
-- [[ Key System REMOVED - Instant Load ]]

local pcall, task, table, string, math = pcall, task, table, string, math
local game, workspace, players, repStorage = game, workspace, game:GetService("Players"), game:GetService("ReplicatedStorage")
local runService, httpService = game:GetService("RunService"), game:GetService("HttpService")
local localPlayer = players.LocalPlayer
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()

-- Load Souls Hub UI library with fallback
local success, SoulsHub = pcall(function()
    return loadstring(game:HttpGet("https://pandadevelopment.net/virtual/file/e7f388d3c065df7a"))()
end)

if not success or not SoulsHub then
    success, SoulsHub = pcall(function()
        return loadstring(game:HttpGet("https://raw.githubusercontent.com/SomeGitHubUser/SoulsHub/main/library.lua"))()
    end)
    
    if not success or not SoulsHub then
        return
    end
end

-- Initialize Souls Hub with proper loader
if SoulsHub and SoulsHub.Loader then
    pcall(function() SoulsHub:Loader(nil, 1).yield() end)
end

-- Create main window with configuration
local Window = SoulsHub.new({ Keybind = "LeftAlt" })
Window.Username = tostring(localPlayer.Name or "Player")

-- Watermark setup
local watermark = Window:Watermark()
watermark:AddText({ Icon = "skull", Text = "Souls Hub" })
watermark:AddText({ Icon = "clock", Text = SoulsHub:GetTimeNow() })

-- Configuration manager
local FileWatcher = SoulsHub:ConfigManager({ 
    Directory = "SoulsHub", 
    Config = "Default" 
})
local Configs = Window:DrawConfig({ 
    Name = "Configs", 
    Icon = "folder", 
    Config = FileWatcher 
})
pcall(function() if Configs.Init then Configs:Init() end end)

-- Utility functions for safe remote calls and element finding
local function SafeFire(remote, ...)
    if not remote then return false end
    local success, err = pcall(function() remote:FireServer(...) end)
    return success, err
end

local function FindRemote(...)
    local names = { ... }
    for _, name in ipairs(names) do
        if repStorage:FindFirstChild(name) then return repStorage[name] end
        if repStorage:FindFirstChild("Remotes") and repStorage.Remotes:FindFirstChild(name) then return repStorage.Remotes[name] end
        if repStorage:FindFirstChild("GameEvents") and repStorage.GameEvents:FindFirstChild(name) then return repStorage.GameEvents[name] end
        if repStorage:FindFirstChild("Events") and repStorage.Events:FindFirstChild(name) then return repStorage.Events[name] end
    end
    return nil
end

local function FindInWorkspace(pattern)
    local results = {}
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj.Name:lower():find(pattern) then
            table.insert(results, obj)
        end
    end
    return results
end

-- Game-specific remotes (with fallbacks)
local itemSell = FindRemote("ItemSell", "Sell", "SellAll")
local buyItem = FindRemote("BuyItem", "BuySeed", "PlantSeed", "Buy")
local equipBest = FindRemote("EquipBestBrainrots", "EquipBest")
local harvestRemote = FindRemote("HarvestCrop", "Harvest")
local plantRemote = FindRemote("PlantSeed", "Plant")
local craftRemote = FindRemote("CraftItem")
local interactRemote = FindRemote("Interact")

-- Autofarm state management
local autofarmActive = false
local autofarmConnections = {}
local function disconnectAll()
    for _, conn in ipairs(autofarmConnections) do
        if typeof(conn) == "RBXScriptConnection" then
            pcall(function() conn:Disconnect() end)
        end
    end
    autofarmConnections = {}
    autofarmActive = false
end

-- ========= UI SETUP =========
local InfoTab = Window:DrawTab({ Icon = "info", Name = "Information", Type = "Single" })
local PvBTab = Window:DrawTab({ Icon = "leaf", Name = "Plants v Brainrots", Type = "Double" })
local VynTab = Window:DrawTab({ Icon = "home", Name = "VynHub", Type = "Double" })
local AutoFarmTab = Window:DrawTab({ Icon = "zap", Name = "AutoFarm", Type = "Single" })
local MovementTab = Window:DrawTab({ Icon = "run", Name = "Movement", Type = "Single" })
local EspTab = Window:DrawTab({ Icon = "eye", Name = "ESP", Type = "Single" })
local MiscTab = Window:DrawTab({ Icon = "settings", Name = "Misc", Type = "Single" })

-- ========= INFORMATION TAB =========
local infoSection = InfoTab:DrawSection({ Name = "About", Position = 'LEFT' })
infoSection:AddParagraph({ 
    Title = "Souls Hub - Ultimate", 
    Content = "Merged: PvB automation, VynHub utilities, multi-game autofarms, movement, and ESP. No key system. Use responsibly." 
})
infoSection:AddParagraph({ 
    Title = "Credits", 
    Content = "Adapted from multiple scripts and merged into SoulsHub UI." 
})

-- ========= PLANTS vs BRAINROTS TAB =========
local pvbLeft = PvBTab:DrawSection({ Name = "Main", Position = 'LEFT' })
local pvbRight = PvBTab:DrawSection({ Name = "Automation", Position = 'RIGHT' })

-- Find seeds frame function with fallbacks
local function TryFindSeedsFrame()
    local pg = localPlayer:FindFirstChildOfClass("PlayerGui")
    if not pg then return nil end
    local candidates = { pg:FindFirstChild("Main"), pg:FindFirstChild("GameUI"), pg:FindFirstChild("Seeds") }
    for _, main in ipairs(candidates) do
        if main and main:FindFirstChild("Seeds") and main.Seeds:FindFirstChild("Frame") and main.Seeds.Frame:FindFirstChild("ScrollingFrame") then
            return main.Seeds.Frame.ScrollingFrame
        end
    end
    for _, c in ipairs(pg:GetDescendants()) do
        if c:IsA("Frame") and tostring(c.Name):lower():find("seed") and c:FindFirstChild("Stock") then
            return c.Parent or c
        end
    end
    return nil
end

local SeedsFrame = TryFindSeedsFrame()
local state = {
    AutoEquip = false,
    AutoSell = false,
    AutoBuy = false,
    AutoBuyList = {},
    SellInterval = 5,
}

-- PvB controls with remote fallbacks
pvbLeft:AddButton({
    Name = "Sell All Brainrots",
    Callback = function()
        if itemSell then
            SafeFire(itemSell)
        end
    end
})

pvbLeft:AddButton({
    Name = "Equip Best Brainrots",
    Callback = function()
        if equipBest then
            SafeFire(equipBest)
        end
    end
})

-- Seed dropdown with automatic refresh
local function BuildSeedOptions()
    local out = {}
    SeedsFrame = TryFindSeedsFrame()
    if not SeedsFrame then return out end
    for _, seed in ipairs(SeedsFrame:GetChildren()) do
        if seed:IsA("Frame") and tostring(seed.Name):lower():find("seed") then
            local stockLabel = seed:FindFirstChild("Stock")
            local stock = 0
            if stockLabel then 
                stock = tonumber(tostring(stockLabel.Text):match("%d+")) or 0 
            end
            table.insert(out, seed.Name .. " (Stock: " .. tostring(stock) .. ")")
        end
    end
    return out
end

local seedOptions = BuildSeedOptions()
local selectedSeed = {}
local seedDropdown = pvbRight:AddDropdown({
    Name = "Select Seed(s)",
    Values = (#seedOptions > 0) and seedOptions or {"None"},
    Default = "None",
    Multi = true,
    Flag = "pSeeds",
    Callback = function(option)
        selectedSeed = {}
        if type(option) == "table" then
            for _, v in ipairs(option) do
                if v ~= "None" then table.insert(selectedSeed, tostring(v)) end
            end
        else
            if option ~= "None" then table.insert(selectedSeed, tostring(option)) end
        end
    end
})

pvbRight:AddButton({
    Name = "Buy Selected Seed(s)",
    Callback = function()
        if not selectedSeed or #selectedSeed == 0 then return end
        for _, seedStr in ipairs(selectedSeed) do
            local seedName = seedStr:match("^(.-) %(") or seedStr
            if buyItem then
                SafeFire(buyItem, seedName, true)
            end
            task.wait(0.12)
        end
    end
})

-- Automation toggles
pvbRight:AddToggle({
    Name = "Auto Buy Seeds",
    Flag = "AutoBuySeeds",
    Default = false,
    Callback = function(val) state.AutoBuy = val end
})

pvbLeft:AddToggle({
    Name = "Auto Sell Brainrots",
    Flag = "AutoSell",
    Default = false,
    Callback = function(val) state.AutoSell = val end
})

pvbLeft:AddSlider({
    Name = "Sell Interval (s)",
    Min = 1,
    Max = 60,
    Default = 5,
    Flag = "SellInterval",
    Callback = function(v) state.SellInterval = v end
})

pvbLeft:AddToggle({
    Name = "Auto Equip Best",
    Flag = "AutoEquip",
    Default = false,
    Callback = function(val) state.AutoEquip = val end
})

-- Background automation loop for PvB with error handling
task.spawn(function()
    while true do
        if state.AutoSell and itemSell then
            pcall(function() itemSell:FireServer() end)
        end
        if state.AutoEquip and equipBest then
            pcall(function() equipBest:FireServer() end)
        end
        if state.AutoBuy and buyItem and selectedSeed and #selectedSeed > 0 then
            for _, seedStr in ipairs(selectedSeed) do
                local seedName = seedStr:match("^(.-) %(") or seedStr
                pcall(function() buyItem:FireServer(seedName, true) end)
                task.wait(0.15)
            end
        end
        task.wait(state.SellInterval or 5)
    end
end)

-- ========= VYNHUB TAB =========
local vynLeft = VynTab:DrawSection({ Name = "Player Status", Position = 'LEFT' })
local vynRight = VynTab:DrawSection({ Name = "AutoFarm", Position = 'RIGHT' })

-- Status functions with fallbacks
local function GetMyPlotName()
    local plot = workspace:FindFirstChild("Plots")
    if plot then
        return "Your Plot"
    end
    return "Unknown Plot"
end

local function GetRebirth()
    local stats = localPlayer:FindFirstChild("leaderstats")
    if stats then
        local rebirth = stats:FindFirstChild("Rebirths") or stats:FindFirstChild("Rebirth")
        if rebirth then
            return rebirth.Value
        end
    end
    return 0
end

local function GetMoney()
    local stats = localPlayer:FindFirstChild("leaderstats")
    if stats then
        local money = stats:FindFirstChild("Money") or stats:FindFirstChild("Coins") or stats:FindFirstChild("Cash")
        if money then
            return money.Value
        end
    end
    return 0
end

local function FormatTime(seconds)
    local hours = math.floor(seconds/3600)
    local mins = math.floor((seconds%3600)/60)
    return string.format("%dh %dm", hours, mins)
end

local serverStartTime = os.time()

vynLeft:AddParagraph({
    Title = "Status",
    Content = "Placeholders for plot, rebirth, money and playtime."
})

vynLeft:AddButton({
    Name = "Show Status",
    Callback = function()
        local message = string.format("Plots: %s\nRebirth: %s\nMoney: %s\nPlaytime: %s", 
            GetMyPlotName(), 
            tostring(GetRebirth()), 
            tostring(GetMoney()), 
            FormatTime(os.time() - serverStartTime))
    end
})

vynRight:AddToggle({
    Name = "Auto Farm",
    Flag = "VynAutoFarm",
    Default = false,
    Callback = function(stateVal) end
})

vynRight:AddInput({
    Name = "Attack Delay (s)",
    Placeholder = "0.1",
    Default = "0.1",
    Callback = function(val)
        local num = tonumber(val)
        if num and num > 0 then
            _G.ClickInterval = num
        end
    end
})

-- Discord info with fallbacks
vynLeft:AddParagraph({
    Title = "Discord",
    Content = "Press Update to fetch server stats (may fail if HTTP requests disabled)."
})

vynLeft:AddButton({
    Name = "Update Discord Info",
    Callback = function()
        local InviteCode = "qepFHRBCC2"
        local DiscordAPI = "https://discord.com/api/v10/invites/" .. InviteCode .. "?with_counts=true&with_expiration=true"
        local ok, res = pcall(function() return httpService:GetAsync(DiscordAPI) end)
        if ok and res then
            local successDecode, decoded = pcall(function() return httpService:JSONDecode(res) end)
            if successDecode and decoded and decoded.guild then
                local desc = string.format("Name: %s\nMembers: %s\nOnline: %s", 
                    decoded.guild.name or "N/A", 
                    tostring(decoded.approximate_member_count or "N/A"), 
                    tostring(decoded.approximate_presence_count or "N/A"))
            end
        end
    end
})

-- ========= AUTOFARM TAB =========
local autofarmSection = AutoFarmTab:DrawSection({ Name = "AutoFarm Selector", Position = 'LEFT' })

-- AutoFarm implementations with fallbacks
local function startGrowAGardenAutoFarm()
    disconnectAll()
    autofarmActive = true
    table.insert(autofarmConnections, runService.Heartbeat:Connect(function()
        if not autofarmActive then return end
        
        -- Harvest crops
        if harvestRemote then
            for _, v in ipairs(FindInWorkspace("crop")) do
                pcall(function() harvestRemote:FireServer(v) end)
            end
        end
        
        -- Plant seeds
        if plantRemote then
            local backpack = localPlayer:FindFirstChild("Backpack")
            if backpack then
                for _, seed in ipairs(backpack:GetChildren()) do
                    if seed.Name:lower():find("seed") then
                        pcall(function() plantRemote:FireServer(seed.Name) end)
                    end
                end
            end
        end
        
        -- Collect drops
        for _, drop in ipairs(FindInWorkspace("drop")) do
            if drop:IsA("BasePart") and character and character:FindFirstChild("HumanoidRootPart") then
                pcall(function()
                    firetouchinterest(character.HumanoidRootPart, drop, 0)
                    firetouchinterest(character.HumanoidRootPart, drop, 1)
                end)
            end
        end
        
        -- Sell items
        if itemSell then
            pcall(function() itemSell:FireServer() end)
        end
    end))
end

local function start99NightsAutoFarm()
    disconnectAll()
    autofarmActive = true
    table.insert(autofarmConnections, runService.Heartbeat:Connect(function()
        if not autofarmActive then return end
        
        -- Collect resources
        for _, obj in ipairs(FindInWorkspace("wood")) do
            if obj:IsA("BasePart") and character and character:FindFirstChild("HumanoidRootPart") then
                if (obj.Position - character.HumanoidRootPart.Position).Magnitude < 50 then
                    pcall(function()
                        firetouchinterest(character.HumanoidRootPart, obj, 0)
                        firetouchinterest(character.HumanoidRootPart, obj, 1)
                    end)
                end
            end
        end
        
        -- Craft items
        if craftRemote then
            pcall(function() craftRemote:FireServer("WoodenAxe") end)
        end
    end))
end

local function startStealABrainrotAutoFarm()
    disconnectAll()
    autofarmActive = true
    table.insert(autofarmConnections, runService.Heartbeat:Connect(function()
        if not autofarmActive then return end
        
        -- Collect brainrot items
        for _, obj in ipairs(FindInWorkspace("brainrot")) do
            if obj:IsA("BasePart") and character and character:FindFirstChild("HumanoidRootPart") then
                if (obj.Position - character.HumanoidRootPart.Position).Magnitude < 50 then
                    pcall(function()
                        firetouchinterest(character.HumanoidRootPart, obj, 0)
                        firetouchinterest(character.HumanoidRootPart, obj, 1)
                    end)
                end
            end
        end
        
        -- Interact with brainrot
        if interactRemote then
            pcall(function() interactRemote:FireServer() end)
        end
    end))
end

local function startPvBAutoFarm()
    disconnectAll()
    autofarmActive = true
    table.insert(autofarmConnections, runService.Heartbeat:Connect(function()
        if not autofarmActive then return end
        
        -- Place plants
        local events = repStorage:FindFirstChild("GameEvents") or repStorage
        for _, remote in ipairs(events:GetChildren()) do
            if remote.Name:lower():find("place") or remote.Name:lower():find("plant") then
                pcall(function()
                    remote:FireServer("Peashooter", 1)
                    remote:FireServer("Sunflower", 2)
                end)
            end
            if remote.Name:lower():find("collect") or remote.Name:lower():find("harvest") then
                pcall(function()
                    remote:FireServer()
                end)
            end
        end
        
        -- Collect sun and rewards
        for _, obj in ipairs(FindInWorkspace("sun")) do
            if obj:IsA("BasePart") and character and character:FindFirstChild("HumanoidRootPart") then
                if (obj.Position - character.HumanoidRootPart.Position).Magnitude < 50 then
                    pcall(function()
                        firetouchinterest(character.HumanoidRootPart, obj, 0)
                        firetouchinterest(character.HumanoidRootPart, obj, 1)
                    end)
                end
            end
        end
    end))
end

-- AutoFarm selector dropdown
autofarmSection:AddDropdown({
    Name = "Select AutoFarm",
    Values = {
        "Grow a Garden", 
        "99 Nights in the Forest", 
        "Steal a Brainrot", 
        "Plants vs Brainrots"
    },
    Default = "Grow a Garden",
    Flag = "AdminAutoFarm",
    Callback = function(option)
        disconnectAll()
        if option == "Grow a Garden" then 
            startGrowAGardenAutoFarm() 
        elseif option == "99 Nights in the Forest" then 
            start99NightsAutoFarm() 
        elseif option == "Steal a Brainrot" then 
            startStealABrainrotAutoFarm() 
        elseif option == "Plants vs Brainrots" then 
            startPvBAutoFarm() 
        end
    end
})

autofarmSection:AddButton({
    Name = "Stop AutoFarm",
    Callback = function()
        disconnectAll()
    end
})

-- ========= MOVEMENT TAB =========
local movementSection = MovementTab:DrawSection({ Name = "Player Movement", Position = 'LEFT' })

-- WalkSpeed slider with fallbacks
movementSection:AddSlider({
    Name = "WalkSpeed",
    Range = {16, 300},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = 16,
    Callback = function(value)
        if character and character:FindFirstChildOfClass("Humanoid") then
            character:FindFirstChildOfClass("Humanoid").WalkSpeed = value
        end
    end
})

-- JumpPower slider with fallbacks
movementSection:AddSlider({
    Name = "JumpPower",
    Range = {50, 500},
    Increment = 1,
    Suffix = "Jump",
    CurrentValue = 50,
    Callback = function(value)
        if character and character:FindFirstChildOfClass("Humanoid") then
            character:FindFirstChildOfClass("Humanoid").JumpPower = value
        end
    end
})

-- NoClip toggle with fallbacks
movementSection:AddToggle({
    Name = "No Clip",
    Flag = "NoClip",
    Default = false,
    Callback = function(state)
        if character then
            for _, part in ipairs(character:GetChildren()) do
                if part:IsA("BasePart") then
                    pcall(function() part.CanCollide = not state end)
                end
            end
        end
    end
})

-- ========= ESP TAB =========
local espSection = EspTab:DrawSection({ Name = "Player ESP", Position = 'LEFT' })
local espState = {
    Enabled = false,
    ShowNames = true,
    ShowBoxes = true,
    ShowHealth = true,
    BoxColor = Color3.fromRGB(255, 0, 0),
    NameColor = Color3.fromRGB(0, 255, 0)
}

-- ESP toggle with conditional options
local espToggle = espSection:AddToggle({
    Name = "Enable ESP",
    Flag = "esp_enabled",
    Default = false,
    Callback = function(state)
        espState.Enabled = state
    end
})

-- Link ESP options to the main toggle
espToggle.Link:AddOption():AddColorPicker({
    Name = "Box ESP Color",
    Default = Color3.fromRGB(255, 0, 0),
    Flag = "esp_box_color",
    Callback = function(color)
        espState.BoxColor = color
    end
})

espToggle.Link:AddOption():AddColorPicker({
    Name = "Name ESP Color",
    Default = Color3.fromRGB(0, 255, 0),
    Flag = "esp_name_color",
    Callback = function(color)
        espState.NameColor = color
    end
})

espSection:AddToggle({
    Name = "Show Names",
    Flag = "esp_show_names",
    Default = true,
    Callback = function(state)
        espState.ShowNames = state
    end
})

espSection:AddToggle({
    Name = "Show Boxes",
    Flag = "esp_show_boxes",
    Default = true,
    Callback = function(state)
        espState.ShowBoxes = state
    end
})

espSection:AddToggle({
    Name = "Show Health",
    Flag = "esp_show_health",
    Default = true,
    Callback = function(state)
        espState.ShowHealth = state
    end
})

-- ESP rendering system with error handling
local espVisuals = {}

local function createBoxESP(character, color)
    local box = Instance.new("BoxHandleAdornment", workspace.CurrentCamera)
    box.Adornee = character
    box.Color3 = color
    box.Transparency = 0.5
    box.AlwaysOnTop = true
    box.ZIndex = 1
    box.Extents = character.PrimaryPart.Size
    box.CFrame = character.PrimaryPart.CFrame
    return box
end

local function createNameESP(character, name, color)
    local billboardGui = Instance.new("BillboardGui", workspace.CurrentCamera)
    billboardGui.Size = UDim2.new(0, 100, 0, 20)
    billboardGui.Adornee = character.PrimaryPart
    billboardGui.AlwaysOnTop = true
    billboardGui.ExtentsOffset = Vector3.new(0, character.PrimaryPart.Size.Y / 2 + 1, 0)

    local textLabel = Instance.new("TextLabel", billboardGui)
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.TextScaled = true
    textLabel.TextColor3 = color
    textLabel.TextStrokeTransparency = 0
    textLabel.Font = Enum.Font.SourceSansBold
    textLabel.Text = name
    
    return billboardGui
end

local function createHealthESP(character, health, maxHealth, color)
    local billboardGui = Instance.new("BillboardGui", workspace.CurrentCamera)
    billboardGui.Size = UDim2.new(0, 100, 0, 10)
    billboardGui.Adornee = character.PrimaryPart
    billboardGui.AlwaysOnTop = true
    billboardGui.ExtentsOffset = Vector3.new(0, character.PrimaryPart.Size.Y / 2 + 2, 0)

    local healthBar = Instance.new("Frame", billboardGui)
    healthBar.Size = UDim2.new(1, 0, 1, 0)
    healthBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)

    local currentHealth = Instance.new("Frame", healthBar)
    currentHealth.Size = UDim2.new(health / maxHealth, 0, 1, 0)
    currentHealth.BackgroundColor3 = color
    
    return billboardGui
end

-- Main ESP drawing function
local function drawESP()
    for _, visual in ipairs(espVisuals) do
        pcall(function() visual:Destroy() end)
    end
    espVisuals = {}

    if not espState.Enabled then return end

    for _, player in ipairs(players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChildOfClass("Humanoid") and player.Character:FindFirstChild("HumanoidRootPart") then
            local character = player.Character
            local humanoid = character:FindFirstChildOfClass("Humanoid")

            if espState.ShowBoxes then
                table.insert(espVisuals, createBoxESP(character, espState.BoxColor))
            end
            
            if espState.ShowNames then
                table.insert(espVisuals, createNameESP(character, player.Name, espState.NameColor))
            end
            
            if espState.ShowHealth and humanoid then
                table.insert(espVisuals, createHealthESP(character, humanoid.Health, humanoid.MaxHealth, espState.NameColor))
            end
        end
    end
end

-- Start ESP rendering loop
task.spawn(function()
    while true do
        task.wait()
        if espState.Enabled then
            pcall(drawESP)
        end
    end
end)

-- ========= MISC TAB =========
local miscSection = MiscTab:DrawSection({ Name = "Utilities", Position = 'LEFT' })

-- Duplicate tool functionality
miscSection:AddButton({
    Name = "Duplicate Held Tool",
    Callback = function()
        local char = localPlayer.Character
        if char then
            local tool = char:FindFirstChildOfClass("Tool")
            if tool then
                local clone = tool:Clone()
                local newID = "ID_" .. tostring(math.floor(tick() * 1000))
                clone:SetAttribute("UniqueID", newID)
                clone.Parent = localPlayer:FindFirstChild("Backpack")
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid:EquipTool(clone)
                end
            end
        end
    end
})

-- Kill player functionality
miscSection:AddButton({
    Name = "Kill Yourself",
    Callback = function()
        local char = localPlayer.Character
        if char and char:FindFirstChildOfClass("Humanoid") then
            char:FindFirstChildOfClass("Humanoid").Health = 0
        end
    end
})

-- Give all currencies
miscSection:AddButton({
    Name = "Give All Currencies",
    Callback = function()
        local stats = localPlayer:FindFirstChild("leaderstats")
        if stats then
            for _, stat in ipairs(stats:GetChildren()) do
                local t = typeof(stat.Value)
                if t == "number" then
                    stat.Value = stat.Value + 1e27
                elseif t == "string" then
                    stat.Value = "infinite"
                elseif t == "boolean" then
                    stat.Value = true
                end
            end
        end
    end
})

-- Save configs
miscSection:AddButton({
    Name = "Save Configs",
    Callback = function()
        if Configs and Configs.Save then
            pcall(Configs.Save, Configs)
        end
    end
})

-- Final setup
Window:Update({
    ExpireDate = SoulsHub:GetDate(tick() + 84000)
})

-- Start the UI
Window:Draw()
