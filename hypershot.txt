-- SOULS HUB - Hypershot Advanced (Undetected Edition)
-- Created specifically for the Souls Hub UI library with undetected features
local SoulsHub = loadstring(game:HttpGet("https://pandadevelopment.net/virtual/file/e7f388d3c065df7a"))();
task.wait(1)
SoulsHub:Loader(nil, 1).yield()

local FileWatcher = SoulsHub:ConfigManager({
    Directory = "SoulsHub",
    Config = "HypershotConfigs"
});

local Window = SoulsHub.new({
    Keybind = "LeftAlt",
});

-- Initialize feature states
local feature_state = {
    -- Movement
    walk_speed = 16.0,
    jump_power = 50.0,
    
    -- Visuals
    esp_enabled = false,
    esp_mode = "3D Box",
    esp_color = Color3.fromRGB(255, 255, 255),
    max_distance = 300,
    box_width = 2.5,
    box_height = 5.5,
    box_transparency = 0.8,
    
    -- Game mechanics
    inf_ammo = false,
    no_cooldown = false,
    no_spread = false,
    auto_respawn = false,
    anti_aim = false,
    
    -- Subtle features (safe)
    fullbright = false,
    auto_repair = false
}

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

-- Watermark
local watermark = Window:Watermark();
watermark:AddText({
    Icon = "user",
    Text = "SOULS HUB"
})
local vim = watermark:AddText({
    Icon = "clock",
    Text = SoulsHub:GetTimeNow()
})
task.spawn(function()
    while true do
        task.wait()
        vim:SetText(SoulsHub:GetTimeNow())
        Window.Username = "SOULS HUB"
    end
end)

Window:Update({
    ExpireDate = SoulsHub:GetDate(tick() + 2592000) -- 30 days
})

watermark:AddText({
    Icon = "server",
    Text = "v3.0"
})

-- Create UI tabs
local Movement = Window:DrawTab({
    Icon = "run",
    Name = "Movement",
    Type = "Single"
});

local Visuals = Window:DrawTab({
    Icon = "eye",
    Name = "Visuals",
    Type = "Double"
});

local GameMechanics = Window:DrawTab({
    Icon = "settings",
    Name = "Game Mechanics",
    Type = "Double"
});

local Utility = Window:DrawTab({
    Icon = "tool",
    Name = "Utility",
    Type = "Single"
});

local Configs = Window:DrawConfig({
    Name = "Configs",
    Icon = "folder",
    Config = FileWatcher
});
Configs:Init();

-- =============== MOVEMENT TAB ===============
local movementSection = Movement:DrawSection({
    Name = "Player Movement",
    Position = "LEFT"
});

movementSection:AddSlider({
    Name = "Walk Speed",
    Min = 16,
    Max = 22,
    Default = feature_state.walk_speed,
    Round = 1,
    Type = "studs/s",
    Callback = function(value)
        feature_state.walk_speed = value
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            -- Human-like randomization to avoid detection
            local random_offset = (math.random() - 0.5) * 0.8
            LocalPlayer.Character.Humanoid.WalkSpeed = value + random_offset
        end
    end
});

movementSection:AddSlider({
    Name = "Jump Power",
    Min = 50,
    Max = 60,
    Default = feature_state.jump_power,
    Round = 1,
    Type = "studs",
    Callback = function(value)
        feature_state.jump_power = value
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            -- Human-like randomization to avoid detection
            local random_offset = (math.random() - 0.5) * 1.5
            LocalPlayer.Character.Humanoid.JumpPower = value + random_offset
        end
    end
});

-- =============== VISUALS TAB ===============
local visualsMain = Visuals:DrawSection({
    Name = "ESP",
    Position = "LEFT"
});

local visualsOptions = Visuals:DrawSection({
    Name = "Settings",
    Position = "RIGHT"
});

-- ESP main features
local espToggle = visualsMain:AddToggle({
    Name = "ESP Enabled",
    Default = feature_state.esp_enabled,
    Callback = function(state)
        feature_state.esp_enabled = state
    end
});

espToggle.Link:AddHelper({
    Text = "Subtle player information display"
});

visualsMain:AddDropdown({
    Name = "ESP Mode",
    Values = {"Dot", "3D Box"},
    Default = feature_state.esp_mode,
    Callback = function(value)
        feature_state.esp_mode = value
    end
});

visualsMain:AddToggle({
    Name = "Show Names",
    Default = true,
    Callback = function(state)
        feature_state.show_names = state
    end
});

visualsMain:AddToggle({
    Name = "Show Health",
    Default = true,
    Callback = function(state)
        feature_state.show_health = state
    end
});

-- ESP settings
visualsOptions:AddColorPicker({
    Name = "ESP Color",
    Default = feature_state.esp_color,
    Callback = function(color)
        feature_state.esp_color = color
    end
});

visualsOptions:AddSlider({
    Name = "Max Distance",
    Min = 100,
    Max = 500,
    Default = feature_state.max_distance,
    Round = 0,
    Type = "studs",
    Callback = function(value)
        feature_state.max_distance = value
    end
});

visualsOptions:AddSlider({
    Name = "Transparency",
    Min = 0.6,
    Max = 1.0,
    Default = feature_state.box_transparency,
    Round = 2,
    Type = "",
    Callback = function(value)
        feature_state.box_transparency = value
    end
});

local boxOptions = visualsOptions:AddToggle({
    Name = "3D Box Settings",
    Default = false,
    Callback = function(state)
        -- Just a category toggle
    end
}).Link:AddOption();

boxOptions:AddSlider({
    Name = "Box Width",
    Min = 2.0,
    Max = 3.5,
    Default = feature_state.box_width,
    Round = 1,
    Type = "x",
    Callback = function(value)
        feature_state.box_width = value
    end
});

boxOptions:AddSlider({
    Name = "Box Height",
    Min = 4.5,
    Max = 7.0,
    Default = feature_state.box_height,
    Round = 1,
    Type = "x",
    Callback = function(value)
        feature_state.box_height = value
    end
});

-- =============== GAME MECHANICS TAB ===============
local mechanicsMain = GameMechanics:DrawSection({
    Name = "Game Mechanics",
    Position = "LEFT"
});

local mechanicsOptions = GameMechanics:DrawSection({
    Name = "Advanced",
    Position = "RIGHT"
});

-- Core mechanics
mechanicsMain:AddToggle({
    Name = "Infinite Ammo",
    Default = feature_state.inf_ammo,
    Callback = function(state)
        feature_state.inf_ammo = state
    end
});

mechanicsMain:AddToggle({
    Name = "No Ability Cooldown",
    Default = feature_state.no_cooldown,
    Callback = function(state)
        feature_state.no_cooldown = state
    end
});

mechanicsMain:AddToggle({
    Name = "No Spread",
    Default = feature_state.no_spread,
    Callback = function(state)
        feature_state.no_spread = state
    end
});

mechanicsMain:AddToggle({
    Name = "Auto Respawn",
    Default = feature_state.auto_respawn,
    Callback = function(state)
        feature_state.auto_respawn = state
    end
});

mechanicsMain:AddToggle({
    Name = "Anti-Aim",
    Default = feature_state.anti_aim,
    Callback = function(state)
        feature_state.anti_aim = state
    end
});

-- =============== UTILITY TAB ===============
local utilitySection = Utility:DrawSection({
    Name = "Game Utilities",
    Position = "LEFT"
});

utilitySection:AddToggle({
    Name = "Full Bright",
    Default = feature_state.fullbright,
    Callback = function(state)
        feature_state.fullbright = state
        
        if state then
            Lighting.Brightness = 1.6
            Lighting.ClockTime = 13
            Lighting.FogEnd = 100000
            Lighting.GlobalShadows = false
        else
            Lighting.Brightness = 1
            Lighting.ClockTime = 12
            Lighting.FogEnd = 500
            Lighting.GlobalShadows = true
        end
    end
});

utilitySection:AddToggle({
    Name = "Auto Repair",
    Default = feature_state.auto_repair,
    Callback = function(state)
        feature_state.auto_repair = state
    end
});

-- =============== ESP SYSTEM ===============
local esp_objects = {}

local function create_esp(player)
    if esp_objects[player] then return end
    
    local esp = {}
    -- Box
    esp.box = Drawing.new("Square")
    esp.box.Visible = false
    esp.box.Color = Color3.fromRGB(255, 255, 255)
    esp.box.Thickness = 1.5
    esp.box.Transparency = 0.8
    esp.box.Filled = false
    -- Name
    esp.name = Drawing.new("Text")
    esp.name.Visible = false
    esp.name.Color = Color3.fromRGB(255, 255, 255)
    esp.name.Size = 14
    esp.name.Center = true
    esp.name.Outline = true
    esp.name.Text = player.Name
    -- Health
    esp.health_bg = Drawing.new("Square")
    esp.health_bg.Visible = false
    esp.health_bg.Color = Color3.fromRGB(0, 0, 0)
    esp.health_bg.Filled = true
    esp.health_bg.Transparency = 0.5
    esp.health_bar = Drawing.new("Square")
    esp.health_bar.Visible = false
    esp.health_bar.Color = Color3.fromRGB(0, 255, 0)
    esp.health_bar.Filled = true
    esp.health_bar.Transparency = 1
    esp_objects[player] = esp
end

-- =============== MAIN LOOP ===============
RunService.Heartbeat:Connect(function()
    -- ESP
    if feature_state.esp_enabled then
        for player, esp in pairs(esp_objects) do
            if player == LocalPlayer or not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
                esp.box.Visible = false
                esp.name.Visible = false
                esp.health_bg.Visible = false
                esp.health_bar.Visible = false
                continue
            end
            
            local character = player.Character
            local root_part = character.HumanoidRootPart
            local humanoid = character:FindFirstChild("Humanoid")
            local screen_pos, on_screen = Camera:WorldToViewportPoint(root_part.Position)
            
            if on_screen then
                local distance = (root_part.Position - Camera.CFrame.Position).Magnitude
                
                if distance <= feature_state.max_distance then
                    local scale_factor = 1000 / distance
                    local size = Vector2.new(scale_factor * 4, scale_factor * 6)
                    
                    -- Human-like ESP with subtle randomness
                    local random_offset = Vector2.new((math.random() - 0.5) * 0.3, (math.random() - 0.5) * 0.3)
                    
                    -- Box
                    esp.box.Visible = true
                    esp.box.Size = size
                    esp.box.Position = Vector2.new(screen_pos.X - size.X / 2 + random_offset.X, screen_pos.Y - size.Y / 2 + random_offset.Y)
                    esp.box.Color = feature_state.esp_color
                    esp.box.Transparency = feature_state.box_transparency
                    
                    -- Name
                    esp.name.Visible = true
                    esp.name.Position = Vector2.new(screen_pos.X, screen_pos.Y - size.Y / 2 - 20)
                    esp.name.Text = player.Name
                    
                    -- Health
                    if humanoid then
                        local health_percentage = humanoid.Health / humanoid.MaxHealth
                        local health_color = Color3.fromRGB(255 * (1 - health_percentage), 255 * health_percentage, 0)
                        esp.health_bg.Visible = true
                        esp.health_bg.Size = Vector2.new(4, size.Y)
                        esp.health_bg.Position = Vector2.new(screen_pos.X - size.X / 2 - 8, screen_pos.Y - size.Y / 2)
                        esp.health_bar.Visible = true
                        esp.health_bar.Size = Vector2.new(2, size.Y * health_percentage)
                        esp.health_bar.Position = Vector2.new(screen_pos.X - size.X / 2 - 7, screen_pos.Y + size.Y / 2 - (size.Y * health_percentage))
                        esp.health_bar.Color = health_color
                    end
                else
                    esp.box.Visible = false
                    esp.name.Visible = false
                    esp.health_bg.Visible = false
                    esp.health_bar.Visible = false
                end
            else
                esp.box.Visible = false
                esp.name.Visible = false
                esp.health_bg.Visible = false
                esp.health_bar.Visible = false
            end
        end
    end
    
    -- Game Mechanics
    if feature_state.inf_ammo then
        for _, tool in ipairs(LocalPlayer.Backpack:GetChildren()) do
            if tool:IsA("Tool") and tool:FindFirstChild("Ammo") then
                tool.Ammo.Value = 999
            end
        end
    end
    
    if feature_state.no_cooldown then
        for _, tool in ipairs(LocalPlayer.Backpack:GetChildren()) do
            if tool:IsA("Tool") and tool:FindFirstChild("Cooldown") then
                tool.Cooldown.Value = 0
            end
        end
    end
    
    if feature_state.no_spread then
        for _, tool in ipairs(LocalPlayer.Backpack:GetChildren()) do
            if tool:IsA("Tool") and tool:FindFirstChild("Spread") then
                tool.Spread.Value = 0
            end
        end
    end
    
    if feature_state.auto_respawn then
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") and LocalPlayer.Character.Humanoid.Health <= 0 then
            task.wait(1.5 + math.random() * 0.5)
            game:GetService("ReplicatedStorage").Network.Remotes.Spawn:FireServer()
        end
    end
    
    if feature_state.anti_aim then
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local random_yaw = math.random(-10, 10)
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.Angles(0, math.rad(random_yaw), 0)
        end
    end
    
    if feature_state.auto_repair then
        for _, part in ipairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") and part:FindFirstChild("Health") then
                part.Health.Value = part.MaxHealth.Value
            end
        end
    end
end)

-- Initialize ESP for existing players
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        create_esp(player)
    end
end

-- Player Events
Players.PlayerAdded:Connect(function(player)
    create_esp(player)
end)

Players.PlayerRemoving:Connect(function(player)
    if esp_objects[player] then
        for _, drawing in pairs(esp_objects[player]) do
            drawing:Remove()
        end
        esp_objects[player] = nil
    end
end)

-- Final notification
task.spawn(function()
    task.wait(1)
    SoulsHub:Notify({
        Title = "SOULS HUB",
        Content = "Hypershot script initialized successfully!",
        Duration = 5
    })
end)

-- Final draw
Window:Draw()
