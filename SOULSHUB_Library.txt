-- SOULSHUB UI Library

local SOULSHUB = {}

-- Services
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")

-- Core UI elements (from SOULSHUB(1).lua)
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "SOULS_HUB"
screenGui.Parent = game:GetService("CoreGui")

local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 700, 0, 380)
mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
mainFrame.BackgroundTransparency = 0.1
mainFrame.BorderSizePixel = 0
mainFrame.ClipsDescendants = true
mainFrame.ZIndex = 1
mainFrame.Visible = false
mainFrame.Parent = screenGui

local outline = Instance.new("UIStroke")
outline.Color = Color3.new(1, 1, 1)
outline.Thickness = 2
outline.Transparency = 0.1
outline.Parent = mainFrame

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 16)
corner.Parent = mainFrame

local gradient = Instance.new("UIGradient")
gradient.Rotation = 90
gradient.Transparency = NumberSequence.new({
    NumberSequenceKeypoint.new(0, 0.6),
    NumberSequenceKeypoint.new(1, 0.8)
})
gradient.Parent = mainFrame

local toggleBtn = Instance.new("TextButton")
toggleBtn.Name = "ToggleButton"
toggleBtn.Size = UDim2.new(0, 140, 0, 40)
toggleBtn.Position = UDim2.new(0.5, -70, 0, 20)
toggleBtn.AnchorPoint = Vector2.new(0.5, 0)
toggleBtn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
toggleBtn.BackgroundTransparency = 0.3
toggleBtn.Text = "TOGGLE MENU"
toggleBtn.TextColor3 = Color3.new(1, 1, 1)
toggleBtn.Font = Enum.Font.GothamBold
toggleBtn.TextSize = 14
toggleBtn.Visible = false
toggleBtn.ZIndex = 10
toggleBtn.Parent = screenGui

local toggleTextOutline = Instance.new("UIStroke")
toggleTextOutline.Color = Color3.new(0, 0, 0)
toggleTextOutline.Thickness = 1
toggleTextOutline.Transparency = 0
toggleTextOutline.Parent = toggleBtn

local toggleCorner = Instance.new("UICorner")
toggleCorner.CornerRadius = UDim.new(0, 12)
toggleCorner.Parent = toggleBtn

local toggleOutline = Instance.new("UIStroke")
toggleOutline.Color = Color3.new(1, 1, 1)
toggleOutline.Thickness = 1
toggleOutline.Transparency = 0.2
toggleOutline.Parent = toggleBtn

local function makeDraggable(frame)
    local dragging = false
    local dragInput, dragStart, startPos

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
        end
    end)

    frame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
            dragInput = nil
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            dragInput = input
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
end
makeDraggable(mainFrame)
makeDraggable(toggleBtn)

local closeBtn = Instance.new("TextButton")
closeBtn.Name = "CloseButton"
closeBtn.Size = UDim2.new(0, 30, 0, 30)
closeBtn.Position = UDim2.new(1, -35, 0, 10)
closeBtn.AnchorPoint = Vector2.new(1, 0)
closeBtn.BackgroundTransparency = 1
closeBtn.Text = "X"
closeBtn.TextColor3 = Color3.new(1, 1, 1)
closeBtn.TextSize = 20
closeBtn.Font = Enum.Font.GothamBold
closeBtn.ZIndex = 3
closeBtn.Parent = mainFrame

local closeTextOutline = Instance.new("UIStroke")
closeTextOutline.Color = Color3.new(0, 0, 0)
closeTextOutline.Thickness = 1
closeTextOutline.Transparency = 0
closeTextOutline.Parent = closeBtn

local titleFont = Enum.Font.GothamBold
local titleText = Instance.new("TextLabel")
titleText.Name = "Title"
titleText.Size = UDim2.new(0, 200, 0, 30)
titleText.Position = UDim2.new(0, 20, 0, 10)
titleText.BackgroundTransparency = 1
titleText.Text = "SOULS HUB"
titleText.TextColor3 = Color3.new(1, 1, 1)
titleText.TextSize = 24
titleText.Font = titleFont
titleText.TextXAlignment = Enum.TextXAlignment.Left
titleText.ZIndex = 2
titleText.Parent = mainFrame

local titleTextOutline = Instance.new("UIStroke")
titleTextOutline.Color = Color3.new(0, 0, 0)
titleTextOutline.Thickness = 1
titleTextOutline.Transparency = 0
titleTextOutline.Parent = titleText

local titleGlow = Instance.new("UIGradient")
titleGlow.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
    ColorSequenceKeypoint.new(0.5, Color3.new(0.85, 0.85, 0.85)),
    ColorSequenceKeypoint.new(1, Color3.new(1, 1, 1))
})
titleGlow.Rotation = -45
titleGlow.Transparency = NumberSequence.new(0.6)
titleGlow.Parent = titleText

local topSeparator = Instance.new("Frame")
topSeparator.Name = "TopSeparator"
topSeparator.Size = UDim2.new(1, -40, 0, 1)
topSeparator.Position = UDim2.new(0, 20, 0, 50)
topSeparator.BackgroundColor3 = Color3.new(1, 1, 1)
topSeparator.BorderSizePixel = 0
topSeparator.ZIndex = 2
topSeparator.Parent = mainFrame

local verticalSeparator = Instance.new("Frame")
verticalSeparator.Name = "VerticalSeparator"
verticalSeparator.Size = UDim2.new(0, 1, 1, -120)
verticalSeparator.Position = UDim2.new(0, 170, 0, 70)
verticalSeparator.BackgroundColor3 = Color3.new(1, 1, 1)
verticalSeparator.BorderSizePixel = 0
verticalSeparator.ZIndex = 2
verticalSeparator.Parent = mainFrame

local tabContainer = Instance.new("Frame")
tabContainer.Name = "Tabs"
tabContainer.Size = UDim2.new(0, 150, 0, 280)
tabContainer.Position = UDim2.new(0, 15, 0, 70)
tabContainer.BackgroundTransparency = 1
tabContainer.ZIndex = 2
tabContainer.Parent = mainFrame

local contentContainer = Instance.new("Frame")
contentContainer.Name = "Content"
contentContainer.Size = UDim2.new(0, 500, 0, 280)
contentContainer.Position = UDim2.new(1, -515, 0, 70)
contentContainer.BackgroundTransparency = 1
contentContainer.ZIndex = 2
contentContainer.Parent = mainFrame

local function createTab(tabName)
    local tab = Instance.new("TextButton")
    tab.Name = tabName
    tab.Size = UDim2.new(0, 140, 0, 30)
    tab.Position = UDim2.new(0, 0, 0, #tabContainer:GetChildren() * 35)
    tab.BackgroundTransparency = 1
    tab.Text = tabName
    tab.TextColor3 = Color3.new(1, 1, 1)
    tab.TextSize = 18
    tab.Font = Enum.Font.GothamBold
    tab.TextTransparency = 0.5
    tab.ZIndex = 3

    local tabTextOutline = Instance.new("UIStroke")
    tabTextOutline.Color = Color3.new(0, 0, 0)
    tabTextOutline.Thickness = 1
    tabTextOutline.Transparency = 0.5
    tabTextOutline.Parent = tab

    local outline = Instance.new("UIStroke")
    outline.Color = Color3.new(1, 1, 1)
    outline.Thickness = 1
    outline.Transparency = 0.5
    outline.Parent = tab

    local content = Instance.new("ScrollingFrame")
    content.Name = tabName.."Content"
    content.Size = UDim2.new(1, 0, 1, 0)
    content.BackgroundTransparency = 1
    content.Visible = false
    content.ScrollBarThickness = 5
    content.AutomaticCanvasSize = Enum.AutomaticSize.Y
    content.Parent = contentContainer

    tab.Parent = tabContainer
    return tab, content
end

local function addCategory(parent, text)
    local category = Instance.new("TextLabel")
    category.Name = text.."Category"
    category.Size = UDim2.new(0, 200, 0, 20)
    category.Position = UDim2.new(0, 0, 0, #parent:GetChildren() * 45)
    category.BackgroundTransparency = 1
    category.Text = text
    category.TextColor3 = Color3.new(1, 1, 1)
    category.TextSize = 16
    category.Font = titleFont
    category.TextXAlignment = Enum.TextXAlignment.Left
    category.ZIndex = 3

    local categoryTextOutline = Instance.new("UIStroke")
    categoryTextOutline.Color = Color3.new(0, 0, 0)
    categoryTextOutline.Thickness = 1
    categoryTextOutline.Transparency = 0
    categoryTextOutline.Parent = category

    category.Parent = parent
end

local function createButton(parent, buttonText, func)
    local button = Instance.new("TextButton")
    button.Name = buttonText
    button.Size = UDim2.new(0, 200, 0, 40)
    button.Position = UDim2.new(0, 0, 0, #parent:GetChildren() * 45)
    button.BackgroundTransparency = 1
    button.Text = buttonText
    button.TextColor3 = Color3.new(1, 1, 1)
    button.Font = Enum.Font.GothamBold
    button.TextSize = 14
    button.ZIndex = 3

    local buttonTextOutline = Instance.new("UIStroke")
    buttonTextOutline.Color = Color3.new(0, 0, 0)
    buttonTextOutline.Thickness = 1
    buttonTextOutline.Transparency = 0.3
    buttonTextOutline.Parent = button

    local outline = Instance.new("UIStroke")
    outline.Color = Color3.new(1, 1, 1)
    outline.Thickness = 1
    outline.Transparency = 0.3
    outline.Parent = button

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = button

    button.MouseButton1Click:Connect(function()
        if func then func() end
    end)

    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {
            BackgroundTransparency = 0.85,
            TextColor3 = Color3.new(0.9, 0.9, 0.9)
        }):Play()
    end)

    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {
            BackgroundTransparency = 1,
            TextColor3 = Color3.new(1, 1, 1)
        }):Play()
    end)

    button.Parent = parent
    return button
end

local function createToggle(parent, defaultText, onText, offText, onFunction, offFunction)
    local toggleEnabled = false
    local toggleButton = Instance.new("TextButton")
    toggleButton.Name = "ToggleButton"
    toggleButton.Size = UDim2.new(0, 200, 0, 40)
    toggleButton.Position = UDim2.new(0, 0, 0, #parent:GetChildren() * 45)
    toggleButton.BackgroundTransparency = 1
    toggleButton.Text = defaultText or "TOGGLE"
    toggleButton.TextColor3 = Color3.new(1, 1, 1)
    toggleButton.Font = Enum.Font.GothamBold
    toggleButton.TextSize = 14
    toggleButton.ZIndex = 3

    local toggleTextOutline = Instance.new("UIStroke")
    toggleTextOutline.Color = Color3.new(0, 0, 0)
    toggleTextOutline.Thickness = 1
    toggleTextOutline.Transparency = 0.3
    toggleTextOutline.Parent = toggleButton

    local outline = Instance.new("UIStroke")
    outline.Color = Color3.new(1, 1, 1)
    outline.Thickness = 1
    outline.Transparency = 0.3
    outline.Parent = toggleButton

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = toggleButton

    toggleButton.MouseEnter:Connect(function()
        TweenService:Create(toggleButton, TweenInfo.new(0.2), {
            BackgroundTransparency = 0.85,
            TextColor3 = Color3.new(0.9, 0.9, 0.9)
        }):Play()
    end)

    toggleButton.MouseLeave:Connect(function()
        TweenService:Create(toggleButton, TweenInfo.new(0.2), {
            BackgroundTransparency = 1,
            TextColor3 = Color3.new(1, 1, 1)
        }):Play()
    end)

    toggleButton.MouseButton1Down:Connect(function()
        game:GetService("TweenService"):Create(
            toggleButton,
            TweenInfo.new(0.1),
            {Size = UDim2.new(0, 190, 0, 38)}
        ):Play()
    end)

    toggleButton.MouseButton1Up:Connect(function()
        game:GetService("TweenService"):Create(
            toggleButton,
            TweenInfo.new(0.2),
            {Size = UDim2.new(0, 200, 0, 40)}
        ):Play()
    end)

    toggleButton.MouseButton1Click:Connect(function()
        toggleEnabled = not toggleEnabled

        if toggleEnabled then
            toggleButton.Text = onText or "ON"
            if onFunction then onFunction() end
        else
            toggleButton.Text = offText or "OFF"
            if offFunction then offFunction() end
        end
    end)

    toggleButton.Parent = parent
    return toggleButton
end

local function toggleUI(visible)
    mainFrame.Visible = visible
    toggleBtn.Visible = not visible
    if visible then
        mainFrame:TweenSize(UDim2.new(0, 700, 0, 380), Enum.EasingDirection.Out, Enum.EasingStyle.Quint, 0.3)
    end
end

closeBtn.MouseButton1Click:Connect(function()
    toggleUI(false)
    toggleBtn.Visible = true
end)

toggleBtn.MouseButton1Click:Connect(function()
    toggleUI(true)
    toggleBtn.Visible = false
end)

local function openAnimation()
    toggleBtn.Visible = false
    mainFrame.Visible = true
    mainFrame.Size = UDim2.new(0, 700, 0, 2)
    mainFrame.BackgroundTransparency = 1
    titleText.TextTransparency = 1
    closeBtn.TextTransparency = 1
    topSeparator.Transparency = 1
    verticalSeparator.Transparency = 1

    for _, tab in ipairs(tabContainer:GetChildren()) do
        if tab:IsA("TextButton") then
            tab.TextTransparency = 1
            if tab:FindFirstChild("UIStroke") then
                tab.UIStroke.Transparency = 1
            end
            if tab:FindFirstChild("UIStroke") then
                tab:FindFirstChild("UIStroke").Transparency = 1
            end
        end
    end

    mainFrame:TweenSize(UDim2.new(0, 700, 0, 2), Enum.EasingDirection.Out, Enum.EasingStyle.Quint, 0.5, true, function()
        mainFrame:TweenSize(UDim2.new(0, 700, 0, 380), Enum.EasingDirection.Out, Enum.EasingStyle.Quint, 0.7)
        for i = 1, 0, -0.05 do
            mainFrame.BackgroundTransparency = i * 0.2
            titleText.TextTransparency = i
            closeBtn.TextTransparency = i
            topSeparator.Transparency = i
            verticalSeparator.Transparency = i
            for _, tab in ipairs(tabContainer:GetChildren()) do
                if tab:IsA("TextButton") then
                    tab.TextTransparency = i
                    if tab:FindFirstChild("UIStroke") then
                        tab.UIStroke.Transparency = i
                    end
                    if tab:FindFirstChild("UIStroke") then
                        tab:FindFirstChild("UIStroke").Transparency = i
                    end
                end
            end
            task.wait(0.03)
        end
        -- switchTab("MAIN FEATURES") -- This needs to be handled by the user's script
    end)
end

-- Expose core functions
SOULSHUB.CreateWindow = function(config)
    -- This is a simplified representation. In a real library, this would create the main window.
    -- For this task, we'll assume the mainFrame is the window.
    mainFrame.Visible = true
    openAnimation()
    return {
        CreateTab = function(tabName, imageId)
            local tab, content = createTab(tabName)
            -- Store content frame for later use
            local tabContentFrame = content

            -- Add click event to switch tabs
            tab.MouseButton1Click:Connect(function()
                for _, child in ipairs(contentContainer:GetChildren()) do
                    if child:IsA("ScrollingFrame") then
                        child.Visible = false
                    end
                end
                tabContentFrame.Visible = true

                for _, t in ipairs(tabContainer:GetChildren()) do
                    if t:IsA("TextButton") then
                        t.TextTransparency = 0.5
                        if t:FindFirstChild("UIStroke") then
                            t.UIStroke.Transparency = 0.5
                        end
                    end
                end
                tab.TextTransparency = 0
                if tab:FindFirstChild("UIStroke") then
                    tab.UIStroke.Transparency = 0
                end
            end)

            return {
                CreateButton = function(options)
                    return createButton(tabContentFrame, options.Name, options.Callback)
                end,
                CreateToggle = function(options)
                    return createToggle(tabContentFrame, options.Name, "ON", "OFF", function() if options.Callback then options.Callback(true) end end, function() if options.Callback then options.Callback(false) end end)
                end,
                CreateSlider = function(options)
                    -- Implementation for createSlider
                    local sliderFrame = Instance.new("Frame")
                    sliderFrame.Name = options.Name .. "Slider"
                    sliderFrame.Size = UDim2.new(0, 200, 0, 40)
                    sliderFrame.Position = UDim2.new(0, 0, 0, #tabContentFrame:GetChildren() * 45)
                    sliderFrame.BackgroundTransparency = 1
                    sliderFrame.Parent = tabContentFrame

                    local sliderLabel = Instance.new("TextLabel")
                    sliderLabel.Name = "Label"
                    sliderLabel.Size = UDim2.new(1, 0, 0, 20)
                    sliderLabel.Position = UDim2.new(0, 0, 0, 0)
                    sliderLabel.BackgroundTransparency = 1
                    sliderLabel.Text = options.Name .. ": " .. options.CurrentValue .. (options.Suffix or "")
                    sliderLabel.TextColor3 = Color3.new(1, 1, 1)
                    sliderLabel.Font = Enum.Font.GothamBold
                    sliderLabel.TextSize = 14
                    sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
                    sliderLabel.ZIndex = 3
                    sliderLabel.Parent = sliderFrame

                    local sliderTextOutline = Instance.new("UIStroke")
                    sliderTextOutline.Color = Color3.new(0, 0, 0)
                    sliderTextOutline.Thickness = 1
                    sliderTextOutline.Transparency = 0.3
                    sliderTextOutline.Parent = sliderLabel

                    local sliderBar = Instance.new("Frame")
                    sliderBar.Name = "SliderBar"
                    sliderBar.Size = UDim2.new(1, 0, 0, 5)
                    sliderBar.Position = UDim2.new(0, 0, 0, 25)
                    sliderBar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                    sliderBar.BorderSizePixel = 0
                    sliderBar.ZIndex = 3
                    sliderBar.Parent = sliderFrame

                    local sliderFill = Instance.new("Frame")
                    sliderFill.Name = "SliderFill"
                    sliderFill.Size = UDim2.new(0, 0, 1, 0)
                    sliderFill.Position = UDim2.new(0, 0, 0, 0)
                    sliderFill.BackgroundColor3 = Color3.new(1, 1, 1)
                    sliderFill.BorderSizePixel = 0
                    sliderFill.ZIndex = 4
                    sliderFill.Parent = sliderBar

                    local sliderHandle = Instance.new("ImageLabel")
                    sliderHandle.Name = "SliderHandle"
                    sliderHandle.Size = UDim2.new(0, 15, 0, 15)
                    sliderHandle.Position = UDim2.new(0, 0, 0.5, 0)
                    sliderHandle.AnchorPoint = Vector2.new(0.5, 0.5)
                    sliderHandle.BackgroundColor3 = Color3.new(1, 1, 1)
                    sliderHandle.BackgroundTransparency = 0
                    sliderHandle.Image = "rbxassetid://276669960"
                    sliderHandle.ZIndex = 5
                    sliderHandle.Parent = sliderBar

                    local handleCorner = Instance.new("UICorner")
                    handleCorner.CornerRadius = UDim.new(0, 7)
                    handleCorner.Parent = sliderHandle

                    local handleOutline = Instance.new("UIStroke")
                    handleOutline.Color = Color3.new(0, 0, 0)
                    handleOutline.Thickness = 1
                    handleOutline.Transparency = 0.3
                    handleOutline.Parent = sliderHandle

                    local min = options.Range[1]
                    local max = options.Range[2]
                    local increment = options.Increment or 1
                    local currentValue = options.CurrentValue or min

                    local function updateSlider(value)
                        currentValue = math.clamp(value, min, max)
                        local percentage = (currentValue - min) / (max - min)
                        sliderFill.Size = UDim2.new(percentage, 0, 1, 0)
                        sliderHandle.Position = UDim2.new(percentage, 0, 0.5, 0)
                        sliderLabel.Text = options.Name .. ": " .. math.floor(currentValue / increment) * increment .. (options.Suffix or "")
                        if options.Callback then
                            options.Callback(math.floor(currentValue / increment) * increment)
                        end
                    end

                    updateSlider(currentValue)

                    local draggingSlider = false
                    local function onInputChanged(input)
                        if draggingSlider and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                            local mousePos = UserInputService:GetMouseLocation().X
                            local barPos = sliderBar.AbsolutePosition.X
                            local barWidth = sliderBar.AbsoluteSize.X
                            local newValue = min + (max - min) * ((mousePos - barPos) / barWidth)
                            updateSlider(newValue)
                        end
                    end

                    sliderHandle.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                            draggingSlider = true
                            UserInputService.InputChanged:Connect(onInputChanged)
                        end
                    end)

                    UserInputService.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                            draggingSlider = false
                        end
                    end)

                    return {
                        SetValue = function(value)
                            updateSlider(value)
                        end
                    }
                end,
                CreateInput = function(options)
                    -- Implementation for createInput/Typebox
                    local inputFrame = Instance.new("Frame")
                    inputFrame.Name = options.Name .. "Input"
                    inputFrame.Size = UDim2.new(0, 200, 0, 40)
                    inputFrame.Position = UDim2.new(0, 0, 0, #tabContentFrame:GetChildren() * 45)
                    inputFrame.BackgroundTransparency = 1
                    inputFrame.Parent = tabContentFrame

                    local inputLabel = Instance.new("TextLabel")
                    inputLabel.Name = "Label"
                    inputLabel.Size = UDim2.new(1, 0, 0, 20)
                    inputLabel.Position = UDim2.new(0, 0, 0, 0)
                    inputLabel.BackgroundTransparency = 1
                    inputLabel.Text = options.Name
                    inputLabel.TextColor3 = Color3.new(1, 1, 1)
                    inputLabel.Font = Enum.Font.GothamBold
                    inputLabel.TextSize = 14
                    inputLabel.TextXAlignment = Enum.TextXAlignment.Left
                    inputLabel.ZIndex = 3
                    inputLabel.Parent = inputFrame

                    local inputTextOutline = Instance.new("UIStroke")
                    inputTextOutline.Color = Color3.new(0, 0, 0)
                    inputTextOutline.Thickness = 1
                    inputTextOutline.Transparency = 0.3
                    inputTextOutline.Parent = inputLabel

                    local textBox = Instance.new("TextBox")
                    textBox.Name = "InputBox"
                    textBox.Size = UDim2.new(1, 0, 0, 20)
                    textBox.Position = UDim2.new(0, 0, 0, 20)
                    textBox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                    textBox.BackgroundTransparency = 0.3
                    textBox.PlaceholderText = options.PlaceholderText or ""
                    textBox.Text = options.CurrentValue or ""
                    textBox.TextColor3 = Color3.new(1, 1, 1)
                    textBox.Font = Enum.Font.GothamBold
                    textBox.TextSize = 12
                    textBox.TextXAlignment = Enum.TextXAlignment.Left
                    textBox.ZIndex = 3
                    textBox.Parent = inputFrame

                    local textBoxCorner = Instance.new("UICorner")
                    textBoxCorner.CornerRadius = UDim.new(0, 4)
                    textBoxCorner.Parent = textBox

                    local textBoxOutline = Instance.new("UIStroke")
                    textBoxOutline.Color = Color3.new(1, 1, 1)
                    textBoxOutline.Thickness = 1
                    textBoxOutline.Transparency = 0.3
                    textBoxOutline.Parent = textBox

                    textBox.Focused:Connect(function()
                        if options.RemoveTextAfterFocusLost and textBox.Text == options.PlaceholderText then
                            textBox.Text = ""
                        end
                    end)

                    textBox.FocusLost:Connect(function(enterPressed)
                        if options.OnEnter and not enterPressed then return end
                        if options.NumbersOnly then
                            textBox.Text = string.gsub(textBox.Text, "%D", "")
                        end
                        if options.CharacterLimit and #textBox.Text > options.CharacterLimit then
                            textBox.Text = string.sub(textBox.Text, 1, options.CharacterLimit)
                        end
                        if options.Callback then
                            options.Callback(textBox.Text)
                        end
                        if options.RemoveTextAfterFocusLost and textBox.Text == "" then
                            textBox.Text = options.PlaceholderText
                        end
                    end)

                    return {
                        GetValue = function()
                            return textBox.Text
                        end,
                        SetValue = function(text)
                            textBox.Text = text
                        end
                    }
                end,
                CreateDropdown = function(options)
                    -- Implementation for createDropdown
                    local dropdownFrame = Instance.new("Frame")
                    dropdownFrame.Name = options.Name .. "Dropdown"
                    dropdownFrame.Size = UDim2.new(0, 200, 0, 40)
                    dropdownFrame.Position = UDim2.new(0, 0, 0, #tabContentFrame:GetChildren() * 45)
                    dropdownFrame.BackgroundTransparency = 1
                    dropdownFrame.Parent = tabContentFrame

                    local dropdownLabel = Instance.new("TextLabel")
                    dropdownLabel.Name = "Label"
                    dropdownLabel.Size = UDim2.new(1, 0, 0, 20)
                    dropdownLabel.Position = UDim2.new(0, 0, 0, 0)
                    dropdownLabel.BackgroundTransparency = 1
                    dropdownLabel.Text = options.Name
                    dropdownLabel.TextColor3 = Color3.new(1, 1, 1)
                    dropdownLabel.Font = Enum.Font.GothamBold
                    dropdownLabel.TextSize = 14
                    dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
                    dropdownLabel.ZIndex = 3
                    dropdownLabel.Parent = dropdownFrame

                    local dropdownTextOutline = Instance.new("UIStroke")
                    dropdownTextOutline.Color = Color3.new(0, 0, 0)
                    dropdownTextOutline.Thickness = 1
                    dropdownTextOutline.Transparency = 0.3
                    dropdownTextOutline.Parent = dropdownLabel

                    local dropdownButton = Instance.new("TextButton")
                    dropdownButton.Name = "DropdownButton"
                    dropdownButton.Size = UDim2.new(1, 0, 0, 20)
                    dropdownButton.Position = UDim2.new(0, 0, 0, 20)
                    dropdownButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                    dropdownButton.BackgroundTransparency = 0.3
                    dropdownButton.Text = options.CurrentOption or options.Options[1]
                    dropdownButton.TextColor3 = Color3.new(1, 1, 1)
                    dropdownButton.Font = Enum.Font.GothamBold
                    dropdownButton.TextSize = 12
                    dropdownButton.TextXAlignment = Enum.TextXAlignment.Left
                    dropdownButton.ZIndex = 3
                    dropdownButton.Parent = dropdownFrame

                    local dropdownButtonCorner = Instance.new("UICorner")
                    dropdownButtonCorner.CornerRadius = UDim.new(0, 4)
                    dropdownButtonCorner.Parent = dropdownButton

                    local dropdownButtonOutline = Instance.new("UIStroke")
                    dropdownButtonOutline.Color = Color3.new(1, 1, 1)
                    dropdownButtonOutline.Thickness = 1
                    dropdownButtonOutline.Transparency = 0.3
                    dropdownButtonOutline.Parent = dropdownButton

                    local optionsFrame = Instance.new("ScrollingFrame")
                    optionsFrame.Name = "OptionsFrame"
                    optionsFrame.Size = UDim2.new(1, 0, 0, 0) -- Will be adjusted dynamically
                    optionsFrame.Position = UDim2.new(0, 0, 0, 40)
                    optionsFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                    optionsFrame.BackgroundTransparency = 0.1
                    optionsFrame.BorderSizePixel = 0
                    optionsFrame.ZIndex = 4
                    optionsFrame.Visible = false
                    optionsFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
                    optionsFrame.Parent = dropdownFrame

                    local optionsFrameCorner = Instance.new("UICorner")
                    optionsFrameCorner.CornerRadius = UDim.new(0, 4)
                    optionsFrameCorner.Parent = optionsFrame

                    local optionsFrameOutline = Instance.new("UIStroke")
                    optionsFrameOutline.Color = Color3.new(1, 1, 1)
                    optionsFrameOutline.Thickness = 1
                    optionsFrameOutline.Transparency = 0.3
                    optionsFrameOutline.Parent = optionsFrame

                    local currentSelection = options.MultiSelection and (options.CurrentOption or {}) or (options.CurrentOption or options.Options[1])

                    local function updateDropdownText()
                        if options.MultiSelection then
                            if #currentSelection > 0 then
                                dropdownButton.Text = table.concat(currentSelection, ", ")
                            else
                                dropdownButton.Text = "None Selected"
                            end
                        else
                            dropdownButton.Text = currentSelection
                        end
                    end

                    for i, optionText in ipairs(options.Options) do
                        local optionButton = Instance.new("TextButton")
                        optionButton.Name = optionText
                        optionButton.Size = UDim2.new(1, 0, 0, 20)
                        optionButton.Position = UDim2.new(0, 0, 0, (i - 1) * 20)
                        optionButton.BackgroundTransparency = 1
                        optionButton.Text = optionText
                        optionButton.TextColor3 = Color3.new(1, 1, 1)
                        optionButton.Font = Enum.Font.GothamBold
                        optionButton.TextSize = 12
                        optionButton.TextXAlignment = Enum.TextXAlignment.Left
                        optionButton.ZIndex = 5
                        optionButton.Parent = optionsFrame

                        local optionTextOutline = Instance.new("UIStroke")
                        optionTextOutline.Color = Color3.new(0, 0, 0)
                        optionTextOutline.Thickness = 1
                        optionTextOutline.Transparency = 0.3
                        optionTextOutline.Parent = optionButton

                        optionButton.MouseButton1Click:Connect(function()
                            if options.MultiSelection then
                                local found = false
                                for k, v in ipairs(currentSelection) do
                                    if v == optionText then
                                        table.remove(currentSelection, k)
                                        found = true
                                        break
                                    end
                                end
                                if not found then
                                    table.insert(currentSelection, optionText)
                                end
                                updateDropdownText()
                                if options.Callback then
                                    options.Callback(currentSelection)
                                end
                            else
                                currentSelection = optionText
                                dropdownButton.Text = optionText
                                optionsFrame.Visible = false
                                if options.Callback then
                                    options.Callback(optionText)
                                end
                            end
                        end)

                        optionButton.MouseEnter:Connect(function()
                            TweenService:Create(optionButton, TweenInfo.new(0.1), {
                                BackgroundTransparency = 0.8,
                                TextColor3 = Color3.new(0.9, 0.9, 0.9)
                            }):Play()
                        end)

                        optionButton.MouseLeave:Connect(function()
                            TweenService:Create(optionButton, TweenInfo.new(0.1), {
                                BackgroundTransparency = 1,
                                TextColor3 = Color3.new(1, 1, 1)
                            }):Play()
                        end)
                    end

                    dropdownButton.MouseButton1Click:Connect(function()
                        optionsFrame.Visible = not optionsFrame.Visible
                        if optionsFrame.Visible then
                            optionsFrame.Size = UDim2.new(1, 0, 0, math.min(#options.Options * 20, 100)) -- Max height 100, then scroll
                        end
                    end)

                    updateDropdownText()

                    return {
                        GetValue = function()
                            return currentSelection
                        end,
                        SetValue = function(value)
                            currentSelection = value
                            updateDropdownText()
                        end
                    }
                end,
                CreateLabel = function(text, info)
                    local label = Instance.new("TextLabel")
                    label.Name = "Label"
                    label.Size = UDim2.new(0, 200, 0, 20)
                    label.Position = UDim2.new(0, 0, 0, #tabContentFrame:GetChildren() * 45)
                    label.BackgroundTransparency = 1
                    label.Text = text
                    label.TextColor3 = Color3.new(1, 1, 1)
                    label.Font = Enum.Font.GothamBold
                    label.TextSize = 14
                    label.TextXAlignment = Enum.TextXAlignment.Left
                    label.ZIndex = 3
                    label.Parent = tabContentFrame

                    local labelTextOutline = Instance.new("UIStroke")
                    labelTextOutline.Color = Color3.new(0, 0, 0)
                    labelTextOutline.Thickness = 1
                    labelTextOutline.Transparency = 0.3
                    labelTextOutline.Parent = label

                    return label
                end
            }
        end
    }
end

-- Initial UI setup and animation
if game:GetService("CoreGui"):FindFirstChild("SOULS_HUB") then
    game:GetService("CoreGui").SOULS_HUB:Destroy()
end

-- The openAnimation function is called when CreateWindow is called.

-- Enhance existing buttons (from SOULSHUB(1).lua)
local function enhanceButton(btn)
    if not btn:IsA("TextButton") then return end

    btn.MouseEnter:Connect(function()
        TweenService:Create(btn, TweenInfo.new(0.2), {
            BackgroundTransparency = btn == toggleBtn and 0.5 or 0.85,
            TextColor3 = Color3.new(0.9, 0.9, 0.9)
        }):Play()
    end)

    btn.MouseLeave:Connect(function()
        TweenService:Create(btn, TweenInfo.new(0.2), {
            BackgroundTransparency = btn == toggleBtn and 0.3 or 1,
            TextColor3 = Color3.new(1, 1, 1)
        }):Play()
    end)
end

for _,v in pairs(screenGui:GetDescendants()) do
    enhanceButton(v)
end

-- Return the library table
return SOULSHUB


