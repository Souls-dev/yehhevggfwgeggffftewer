--[[ 
    SOULS HUB UI Library
    Version: 1.0
    Description: A modern and customizable UI library inspired by Rayfield.
    Created by: Manus
]]

--// Services
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")

--// Library Table
local SoulsHub = {}
SoulsHub.__index = SoulsHub

--// Main Container
if CoreGui:FindFirstChild("SOULS_HUB") then
    CoreGui.SOULS_HUB:Destroy()
end

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "SOULS_HUB"
screenGui.Parent = CoreGui
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

--// Main UI Elements
local mainFrame, toggleBtn
local activeTabContent = nil
local tabContainer, contentContainer

--// Helper Functions
local function CreateInstance(className, properties)
    local inst = Instance.new(className)
    for prop, value in pairs(properties) do
        inst[prop] = value
    end
    return inst
end

local function makeDraggable(frame)
    local dragging = false
    local dragInput, dragStart, startPos

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            frame.ZIndex = frame.ZIndex + 1
        end
    end)

    frame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
            frame.ZIndex = frame.ZIndex - 1
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
end

local function switchTab(tabName)
    if activeTabContent then
        activeTabContent.Visible = false
    end
    for _, tabBtn in ipairs(tabContainer:GetChildren()) do
        if tabBtn:IsA("TextButton") then
            local isSelected = (tabBtn.Name == tabName)
            TweenService:Create(tabBtn, TweenInfo.new(0.2), {
                TextTransparency = isSelected and 0 or 0.5
            }):Play()
            TweenService:Create(tabBtn.UIStroke, TweenInfo.new(0.2), {
                Transparency = isSelected and 0 or 0.5
            }):Play()
             TweenService:Create(tabBtn.TextOutline, TweenInfo.new(0.2), {
                Transparency = isSelected and 0 or 0.5
            }):Play()
        end
    end
    local newContent = contentContainer:FindFirstChild(tabName .. "Content")
    if newContent then
        newContent.Visible = true
        activeTabContent = newContent
    end
end

--// Window Creation
function SoulsHub:CreateWindow(config)
    local window = {}
    setmetatable(window, SoulsHub)

    mainFrame = CreateInstance("Frame", {
        Name = "MainFrame",
        Size = UDim2.new(0, 700, 0, 380),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.fromRGB(30, 30, 30),
        BackgroundTransparency = 0.1,
        BorderSizePixel = 0,
        ClipsDescendants = true,
        ZIndex = 1,
        Visible = false,
        Parent = screenGui
    })

    CreateInstance("UIStroke", { Color = Color3.new(1, 1, 1), Thickness = 2, Transparency = 0.1, Parent = mainFrame })
    CreateInstance("UICorner", { CornerRadius = UDim.new(0, 16), Parent = mainFrame })
    CreateInstance("UIGradient", { Rotation = 90, Transparency = NumberSequence.new({ NumberSequenceKeypoint.new(0, 0.6), NumberSequenceKeypoint.new(1, 0.8) }), Parent = mainFrame })

    toggleBtn = CreateInstance("TextButton", {
        Name = "ToggleButton",
        Size = UDim2.new(0, 140, 0, 40),
        Position = UDim2.new(0.5, -70, 0, 20),
        AnchorPoint = Vector2.new(0.5, 0),
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        BackgroundTransparency = 0.3,
        Text = "TOGGLE MENU",
        TextColor3 = Color3.new(1, 1, 1),
        Font = Enum.Font.GothamBold,
        TextSize = 14,
        Visible = true,
        ZIndex = 10,
        Parent = screenGui
    })

    CreateInstance("UIStroke", { Name = "TextOutline", Color = Color3.new(0, 0, 0), Thickness = 1, Transparency = 0, Parent = toggleBtn })
    CreateInstance("UICorner", { CornerRadius = UDim.new(0, 12), Parent = toggleBtn })
    CreateInstance("UIStroke", { Color = Color3.new(1, 1, 1), Thickness = 1, Transparency = 0.2, Parent = toggleBtn })

    makeDraggable(mainFrame)
    makeDraggable(toggleBtn)

    local closeBtn = CreateInstance("TextButton", {
        Name = "CloseButton",
        Size = UDim2.new(0, 30, 0, 30),
        Position = UDim2.new(1, -35, 0, 10),
        AnchorPoint = Vector2.new(1, 0),
        BackgroundTransparency = 1,
        Text = "X",
        TextColor3 = Color3.new(1, 1, 1),
        TextSize = 20,
        Font = Enum.Font.GothamBold,
        ZIndex = 3,
        Parent = mainFrame
    })
    CreateInstance("UIStroke", { Name = "TextOutline", Color = Color3.new(0, 0, 0), Thickness = 1, Transparency = 0, Parent = closeBtn })

    local titleText = CreateInstance("TextLabel", {
        Name = "Title",
        Size = UDim2.new(0, 200, 0, 30),
        Position = UDim2.new(0, 20, 0, 10),
        BackgroundTransparency = 1,
        Text = config.Name or "SOULS HUB",
        TextColor3 = Color3.new(1, 1, 1),
        TextSize = 24,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 2,
        Parent = mainFrame
    })
    CreateInstance("UIStroke", { Name = "TextOutline", Color = Color3.new(0, 0, 0), Thickness = 1, Transparency = 0, Parent = titleText })
    CreateInstance("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
            ColorSequenceKeypoint.new(0.5, Color3.new(0.85, 0.85, 0.85)),
            ColorSequenceKeypoint.new(1, Color3.new(1, 1, 1))
        }),
        Rotation = -45,
        Transparency = NumberSequence.new(0.6),
        Parent = titleText
    })

    local topSeparator = CreateInstance("Frame", {
        Name = "TopSeparator",
        Size = UDim2.new(1, -40, 0, 1),
        Position = UDim2.new(0, 20, 0, 50),
        BackgroundColor3 = Color3.new(1, 1, 1),
        BorderSizePixel = 0,
        ZIndex = 2,
        Parent = mainFrame
    })

    local verticalSeparator = CreateInstance("Frame", {
        Name = "VerticalSeparator",
        Size = UDim2.new(0, 1, 1, -120),
        Position = UDim2.new(0, 170, 0, 70),
        BackgroundColor3 = Color3.new(1, 1, 1),
        BorderSizePixel = 0,
        ZIndex = 2,
        Parent = mainFrame
    })

    tabContainer = CreateInstance("Frame", {
        Name = "Tabs",
        Size = UDim2.new(0, 150, 0, 280),
        Position = UDim2.new(0, 15, 0, 70),
        BackgroundTransparency = 1,
        ZIndex = 2,
        Parent = mainFrame
    })
    CreateInstance("UIListLayout", {
        FillDirection = Enum.FillDirection.Vertical,
        HorizontalAlignment = Enum.HorizontalAlignment.Left,
        VerticalAlignment = Enum.VerticalAlignment.Top,
        Padding = UDim.new(0, 5),
        Parent = tabContainer
    })

    contentContainer = CreateInstance("Frame", {
        Name = "Content",
        Size = UDim2.new(0, 500, 0, 280),
        Position = UDim2.new(1, -515, 0, 70),
        BackgroundTransparency = 1,
        ZIndex = 2,
        Parent = mainFrame
    })

    --// Tab Creation
    function window:CreateTab(tabName, imageId)
        local tab = CreateInstance("TextButton", {
            Name = tabName,
            Size = UDim2.new(0, 140, 0, 30),
            BackgroundTransparency = 1,
            Text = tabName,
            TextColor3 = Color3.new(1, 1, 1),
            TextSize = 18,
            Font = Enum.Font.GothamBold,
            TextTransparency = 0.5,
            ZIndex = 3,
            Parent = tabContainer
        })

        CreateInstance("UIStroke", { Name = "TextOutline", Color = Color3.new(0, 0, 0), Thickness = 1, Transparency = 0.5, Parent = tab })
        CreateInstance("UIStroke", { Color = Color3.new(1, 1, 1), Thickness = 1, Transparency = 0.5, Parent = tab })

        local content = CreateInstance("ScrollingFrame", {
            Name = tabName .. "Content",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Visible = false,
            ScrollBarThickness = 5,
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            Parent = contentContainer
        })
        CreateInstance("UIListLayout", {
            FillDirection = Enum.FillDirection.Vertical,
            HorizontalAlignment = Enum.HorizontalAlignment.Left,
            VerticalAlignment = Enum.VerticalAlignment.Top,
            Padding = UDim.new(0, 30),
            Parent = content
        })

        tab.MouseButton1Click:Connect(function()
            switchTab(tabName)
        end)

        local tabObject = {}
        tabObject.Content = content

        --// Button Creation
        function tabObject:CreateButton(btnConfig)
            local button = CreateInstance("TextButton", {
                Name = btnConfig.Name,
                Size = UDim2.new(0, 200, 0, 40),
                BackgroundTransparency = 1,
                Text = btnConfig.Name,
                TextColor3 = Color3.new(1, 1, 1),
                Font = Enum.Font.GothamBold,
                TextSize = 14,
                ZIndex = 3,
                Parent = content
            })

            CreateInstance("UIStroke", { Name = "TextOutline", Color = Color3.new(0, 0, 0), Thickness = 1, Transparency = 0.3, Parent = button })
            CreateInstance("UIStroke", { Color = Color3.new(1, 1, 1), Thickness = 1, Transparency = 0.3, Parent = button })
            CreateInstance("UICorner", { CornerRadius = UDim.new(0, 6), Parent = button })

            button.MouseButton1Click:Connect(function()
                if btnConfig.Callback then btnConfig.Callback() end
            end)

            button.MouseEnter:Connect(function()
                TweenService:Create(button, TweenInfo.new(0.2), {
                    BackgroundTransparency = 0.85,
                    TextColor3 = Color3.new(0.9, 0.9, 0.9)
                }):Play()
            end)

            button.MouseLeave:Connect(function()
                TweenService:Create(button, TweenInfo.new(0.2), {
                    BackgroundTransparency = 1,
                    TextColor3 = Color3.new(1, 1, 1)
                }):Play()
            end)
            return button
        end

        --// Toggle Creation
        function tabObject:CreateToggle(toggleConfig)
            local toggleEnabled = toggleConfig.CurrentValue or false
            local toggleButton = CreateInstance("TextButton", {
                Name = toggleConfig.Name,
                Size = UDim2.new(0, 200, 0, 40),
                BackgroundTransparency = 1,
                Text = toggleConfig.Name .. ": " .. (toggleEnabled and "ON" or "OFF"),
                TextColor3 = Color3.new(1, 1, 1),
                Font = Enum.Font.GothamBold,
                TextSize = 14,
                ZIndex = 3,
                Parent = content
            })

            CreateInstance("UIStroke", { Name = "TextOutline", Color = Color3.new(0, 0, 0), Thickness = 1, Transparency = 0.3, Parent = toggleButton })
            CreateInstance("UIStroke", { Color = Color3.new(1, 1, 1), Thickness = 1, Transparency = 0.3, Parent = toggleButton })
            CreateInstance("UICorner", { CornerRadius = UDim.new(0, 6), Parent = toggleButton })

            toggleButton.MouseEnter:Connect(function()
                TweenService:Create(toggleButton, TweenInfo.new(0.2), {
                    BackgroundTransparency = 0.85,
                    TextColor3 = Color3.new(0.9, 0.9, 0.9)
                }):Play()
            end)

            toggleButton.MouseLeave:Connect(function()
                TweenService:Create(toggleButton, TweenInfo.new(0.2), {
                    BackgroundTransparency = 1,
                    TextColor3 = Color3.new(1, 1, 1)
                }):Play()
            end)

            toggleButton.MouseButton1Down:Connect(function()
                TweenService:Create(toggleButton, TweenInfo.new(0.1), {Size = UDim2.new(0, 190, 0, 38)}):Play()
            end)

            toggleButton.MouseButton1Up:Connect(function()
                TweenService:Create(toggleButton, TweenInfo.new(0.2), {Size = UDim2.new(0, 200, 0, 40)}):Play()
            end)

            toggleButton.MouseButton1Click:Connect(function()
                toggleEnabled = not toggleEnabled
                toggleButton.Text = toggleConfig.Name .. ": " .. (toggleEnabled and "ON" or "OFF")
                if toggleConfig.Callback then toggleConfig.Callback(toggleEnabled) end
            end)
            return toggleButton
        end

        --// Slider Creation
        function tabObject:CreateSlider(sliderConfig)
            local sliderFrame = CreateInstance("Frame", {
                Name = sliderConfig.Name .. "Slider",
                Size = UDim2.new(0, 200, 0, 50),
                BackgroundTransparency = 1,
                Parent = content
            })

            local sliderLabel = CreateInstance("TextLabel", {
                Name = "SliderLabel",
                Size = UDim2.new(1, 0, 0, 20),
                Position = UDim2.new(0, 0, 0, 0),
                BackgroundTransparency = 1,
                Text = sliderConfig.Name .. ": " .. (sliderConfig.CurrentValue or sliderConfig.Range[1]) .. (sliderConfig.Suffix or ""),
                TextColor3 = Color3.new(1, 1, 1),
                Font = Enum.Font.GothamBold,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 3,
                Parent = sliderFrame
            })
            CreateInstance("UIStroke", { Name = "TextOutline", Color = Color3.new(0, 0, 0), Thickness = 1, Transparency = 0.3, Parent = sliderLabel })

            local sliderBar = CreateInstance("Frame", {
                Name = "SliderBar",
                Size = UDim2.new(1, 0, 0, 5),
                Position = UDim2.new(0, 0, 0, 30),
                BackgroundColor3 = Color3.fromRGB(40, 40, 40),
                BackgroundTransparency = 0.3,
                BorderSizePixel = 0,
                ZIndex = 2,
                Parent = sliderFrame
            })
            CreateInstance("UICorner", { CornerRadius = UDim.new(0, 3), Parent = sliderBar })
            CreateInstance("UIStroke", { Color = Color3.new(1, 1, 1), Thickness = 1, Transparency = 0.3, Parent = sliderBar })

            local sliderFill = CreateInstance("Frame", {
                Name = "SliderFill",
                Size = UDim2.new(0, 0, 1, 0),
                Position = UDim2.new(0, 0, 0, 0),
                BackgroundColor3 = Color3.fromRGB(70, 70, 70),
                BackgroundTransparency = 0.1,
                BorderSizePixel = 0,
                ZIndex = 3,
                Parent = sliderBar
            })
            CreateInstance("UICorner", { CornerRadius = UDim.new(0, 3), Parent = sliderFill })
            CreateInstance("UIStroke", { Color = Color3.new(1, 1, 1), Thickness = 1, Transparency = 0.1, Parent = sliderFill })

            local sliderHandle = CreateInstance("ImageLabel", {
                Name = "SliderHandle",
                Size = UDim2.new(0, 15, 0, 15),
                Image = "rbxassetid://6030386687", -- Placeholder image, replace with a suitable glass-themed handle image
                BackgroundTransparency = 1,
                ZIndex = 4,
                Parent = sliderBar
            })
            CreateInstance("UICorner", { CornerRadius = UDim.new(0, 8), Parent = sliderHandle })
            CreateInstance("UIStroke", { Color = Color3.new(1, 1, 1), Thickness = 1, Transparency = 0.1, Parent = sliderHandle })

            local minVal = sliderConfig.Range[1]
            local maxVal = sliderConfig.Range[2]
            local increment = sliderConfig.Increment or 1
            local currentValue = sliderConfig.CurrentValue or minVal

            local function updateSlider(value)
                currentValue = math.clamp(value, minVal, maxVal)
                local percent = (currentValue - minVal) / (maxVal - minVal)
                sliderFill.Size = UDim2.new(percent, 0, 1, 0)
                sliderHandle.Position = UDim2.new(percent, -sliderHandle.Size.X.Offset / 2, 0.5, -sliderHandle.Size.Y.Offset / 2)
                sliderLabel.Text = sliderConfig.Name .. ": " .. math.floor(currentValue / increment) * increment .. (sliderConfig.Suffix or "")
                if sliderConfig.Callback then sliderConfig.Callback(math.floor(currentValue / increment) * increment) end
            end

            updateSlider(currentValue)

            local dragging = false
            local mouseConnection

            local function onInputChanged(input)
                if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                    local mouseX = UserInputService:GetMouseLocation().X
                    local barX = sliderBar.AbsolutePosition.X
                    local barWidth = sliderBar.AbsoluteSize.X

                    local newPercent = math.clamp((mouseX - barX) / barWidth, 0, 1)
                    local newValue = minVal + (maxVal - minVal) * newPercent
                    updateSlider(newValue)
                end
            end

            sliderHandle.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                    mouseConnection = UserInputService.InputChanged:Connect(onInputChanged)
                end
            end)

            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = false
                    if mouseConnection then
                        mouseConnection:Disconnect()
                        mouseConnection = nil
                    end
                end
            end)

            sliderBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    local mouseX = UserInputService:GetMouseLocation().X
                    local barX = sliderBar.AbsolutePosition.X
                    local barWidth = sliderBar.AbsoluteSize.X

                    local newPercent = math.clamp((mouseX - barX) / barWidth, 0, 1)
                    local newValue = minVal + (maxVal - minVal) * newPercent
                    updateSlider(newValue)
                end
            end)
            return sliderFrame
        end

        --// Input (Textbox) Creation
        function tabObject:CreateInput(inputConfig)
            local inputFrame = CreateInstance("Frame", {
                Name = inputConfig.Name .. "Input",
                Size = UDim2.new(0, 200, 0, 50),
                BackgroundTransparency = 1,
                Parent = content
            })

            local inputLabel = CreateInstance("TextLabel", {
                Name = "InputLabel",
                Size = UDim2.new(1, 0, 0, 20),
                Position = UDim2.new(0, 0, 0, 0),
                BackgroundTransparency = 1,
                Text = inputConfig.Name,
                TextColor3 = Color3.new(1, 1, 1),
                Font = Enum.Font.GothamBold,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 3,
                Parent = inputFrame
            })
            CreateInstance("UIStroke", { Name = "TextOutline", Color = Color3.new(0, 0, 0), Thickness = 1, Transparency = 0.3, Parent = inputLabel })

            local textBox = CreateInstance("TextBox", {
                Name = "InputField",
                Size = UDim2.new(1, 0, 0, 25),
                Position = UDim2.new(0, 0, 0, 25),
                BackgroundColor3 = Color3.fromRGB(40, 40, 40),
                BackgroundTransparency = 0.3,
                TextColor3 = Color3.new(1, 1, 1),
                PlaceholderText = inputConfig.PlaceholderText or "Enter text...",
                PlaceholderColor3 = Color3.new(0.7, 0.7, 0.7),
                Font = Enum.Font.Gotham,
                TextSize = 14,
                ClearTextOnFocus = false,
                ZIndex = 2,
                Parent = inputFrame
            })
            CreateInstance("UICorner", { CornerRadius = UDim.new(0, 6), Parent = textBox })
            CreateInstance("UIStroke", { Color = Color3.new(1, 1, 1), Thickness = 1, Transparency = 0.3, Parent = textBox })

            if inputConfig.NumbersOnly then
                textBox.Changed:Connect(function(prop)
                    if prop == "Text" then
                        textBox.Text = string.gsub(textBox.Text, "[^0-9%.]", "")
                    end
                end)
            end

            if inputConfig.CharacterLimit then
                textBox.Changed:Connect(function(prop)
                    if prop == "Text" then
                        if #textBox.Text > inputConfig.CharacterLimit then
                            textBox.Text = string.sub(textBox.Text, 1, inputConfig.CharacterLimit)
                        end
                    end
                end)
            end

            textBox.FocusLost:Connect(function(enterPressed)
                if enterPressed or not inputConfig.OnEnter then
                    if inputConfig.Callback then inputConfig.Callback(textBox.Text) end
                    if inputConfig.RemoveTextAfterFocusLost then
                        textBox.Text = ""
                    end
                end
            end)
            return textBox
        end

        --// Dropdown Creation
        function tabObject:CreateDropdown(dropdownConfig)
            local dropdownFrame = CreateInstance("Frame", {
                Name = dropdownConfig.Name .. "Dropdown",
                Size = UDim2.new(0, 200, 0, 50),
                BackgroundTransparency = 1,
                Parent = content
            })

            local dropdownLabel = CreateInstance("TextLabel", {
                Name = "DropdownLabel",
                Size = UDim2.new(1, 0, 0, 20),
                Position = UDim2.new(0, 0, 0, 0),
                BackgroundTransparency = 1,
                Text = dropdownConfig.Name,
                TextColor3 = Color3.new(1, 1, 1),
                Font = Enum.Font.GothamBold,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 3,
                Parent = dropdownFrame
            })
            CreateInstance("UIStroke", { Name = "TextOutline", Color = Color3.new(0, 0, 0), Thickness = 1, Transparency = 0.3, Parent = dropdownLabel })

            local selectedOptionText = CreateInstance("TextButton", {
                Name = "SelectedOption",
                Size = UDim2.new(1, 0, 0, 25),
                Position = UDim2.new(0, 0, 0, 25),
                BackgroundColor3 = Color3.fromRGB(40, 40, 40),
                BackgroundTransparency = 0.3,
                Text = tostring(dropdownConfig.CurrentOption or dropdownConfig.Options[1]), -- Ensure text is a string
                TextColor3 = Color3.new(1, 1, 1),
                Font = Enum.Font.Gotham,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextWrapped = true,
                ZIndex = 2,
                Parent = dropdownFrame
            })
            CreateInstance("UICorner", { CornerRadius = UDim.new(0, 6), Parent = selectedOptionText })
            CreateInstance("UIStroke", { Color = Color3.new(1, 1, 1), Thickness = 1, Transparency = 0.3, Parent = selectedOptionText })

            local dropdownList = CreateInstance("ScrollingFrame", {
                Name = "DropdownList",
                Size = UDim2.new(1, 0, 0, 0),
                Position = UDim2.new(0, 0, 1, 0),
                BackgroundColor3 = Color3.fromRGB(30, 30, 30),
                BackgroundTransparency = 0.1,
                BorderSizePixel = 0,
                ClipsDescendants = true,
                Visible = false,
                ZIndex = 4,
                Parent = dropdownFrame
            })
            CreateInstance("UICorner", { CornerRadius = UDim.new(0, 6), Parent = dropdownList })
            CreateInstance("UIStroke", { Color = Color3.new(1, 1, 1), Thickness = 1, Transparency = 0.1, Parent = dropdownList })
            CreateInstance("UIListLayout", {
                FillDirection = Enum.FillDirection.Vertical,
                HorizontalAlignment = Enum.HorizontalAlignment.Left,
                VerticalAlignment = Enum.VerticalAlignment.Top,
                Padding = UDim.new(0, 5),
                Parent = dropdownList
            })

            local currentSelection = {}
            if dropdownConfig.MultiSelection then
                if type(dropdownConfig.CurrentOption) == "table" then
                    currentSelection = dropdownConfig.CurrentOption
                else
                    table.insert(currentSelection, dropdownConfig.CurrentOption)
                end
            else
                table.insert(currentSelection, dropdownConfig.CurrentOption)
            end

            local function updateSelectedText()
                if dropdownConfig.MultiSelection then
                    selectedOptionText.Text = "Selected: " .. table.concat(currentSelection, ", ")
                else
                    selectedOptionText.Text = tostring(currentSelection[1] or "None Selected")
                end
            end
            updateSelectedText()

            for i, optionText in ipairs(dropdownConfig.Options) do
                local optionButton = CreateInstance("TextButton", {
                    Name = "Option" .. i,
                    Size = UDim2.new(1, 0, 0, 30),
                    BackgroundTransparency = 1,
                    Text = tostring(optionText),
                    TextColor3 = Color3.new(1, 1, 1),
                    Font = Enum.Font.Gotham,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ZIndex = 5,
                    Parent = dropdownList
                })
                CreateInstance("UIStroke", { Name = "TextOutline", Color = Color3.new(0, 0, 0), Thickness = 1, Transparency = 0.3, Parent = optionButton })

                local function setOptionState(selected)
                    if selected then
                        optionButton.TextColor3 = Color3.fromRGB(100, 200, 255) -- Highlight color
                    else
                        optionButton.TextColor3 = Color3.new(1, 1, 1)
                    end
                end

                if dropdownConfig.MultiSelection then
                    setOptionState(table.find(currentSelection, optionText))
                else
                    setOptionState(currentSelection[1] == optionText)
                end

                optionButton.MouseButton1Click:Connect(function()
                    if dropdownConfig.MultiSelection then
                        local index = table.find(currentSelection, optionText)
                        if index then
                            table.remove(currentSelection, index)
                        else
                            table.insert(currentSelection, optionText)
                        end
                    else
                        currentSelection = {optionText}
                        dropdownList.Visible = false
                    end
                    updateSelectedText()
                    if dropdownConfig.Callback then dropdownConfig.Callback(dropdownConfig.MultiSelection and currentSelection or currentSelection[1]) end
                    for _, btn in ipairs(dropdownList:GetChildren()) do
                        if btn:IsA("TextButton") then
                            setOptionState(table.find(currentSelection, btn.Text))
                        end
                    end
                end)

                optionButton.MouseEnter:Connect(function()
                    TweenService:Create(optionButton, TweenInfo.new(0.1), {BackgroundTransparency = 0.8}):Play()
                end)
                optionButton.MouseLeave:Connect(function()
                    TweenService:Create(optionButton, TweenInfo.new(0.1), {BackgroundTransparency = 1}):Play()
                end)
            end

            selectedOptionText.MouseButton1Click:Connect(function()
                dropdownList.Visible = not dropdownList.Visible
                if dropdownList.Visible then
                    dropdownList.Size = UDim2.new(1, 0, 0, math.min(#dropdownConfig.Options * 32 + 5, 150)) -- Max height 150
                end
            end)

            -- Close dropdown when clicking outside
            UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and not gameProcessedEvent then
                    local mousePos = UserInputService:GetMouseLocation()
                    local isClickInsideDropdown = (mousePos.X >= dropdownFrame.AbsolutePosition.X and mousePos.X <= dropdownFrame.AbsolutePosition.X + dropdownFrame.AbsoluteSize.X and
                                                   mousePos.Y >= dropdownFrame.AbsolutePosition.Y and mousePos.Y <= dropdownFrame.AbsolutePosition.Y + dropdownFrame.AbsoluteSize.Y)
                    if not isClickInsideDropdown and dropdownList.Visible then
                        dropdownList.Visible = false
                    end
                end
            end)
            return dropdownFrame
        end

        --// Label Creation
        function tabObject:CreateLabel(text, info)
            local label = CreateInstance("TextLabel", {
                Name = "Label",
                Size = UDim2.new(0, 200, 0, 20),
                BackgroundTransparency = 1,
                Text = text,
                TextColor3 = Color3.new(1, 1, 1),
                Font = Enum.Font.GothamBold,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 3,
                Parent = content
            })
            CreateInstance("UIStroke", { Name = "TextOutline", Color = Color3.new(0, 0, 0), Thickness = 1, Transparency = 0.3, Parent = label })
            return label
        end

        return tabObject
    end

    local function toggleUI(visible)
        mainFrame.Visible = visible
        toggleBtn.Visible = not visible
        if visible then
            mainFrame:TweenSize(UDim2.new(0, 700, 0, 380), Enum.EasingDirection.Out, Enum.EasingStyle.Quint, 0.3)
        end
    end

    closeBtn.MouseButton1Click:Connect(function()
        toggleUI(false)
        toggleBtn.Visible = true
    end)

    toggleBtn.MouseButton1Click:Connect(function()
        toggleUI(true)
        toggleBtn.Visible = false
    end)

    local function openAnimation()
        toggleBtn.Visible = false
        mainFrame.Visible = true
        mainFrame.Size = UDim2.new(0, 700, 0, 2)
        mainFrame.BackgroundTransparency = 1
        titleText.TextTransparency = 1
        closeBtn.TextTransparency = 1
        topSeparator.Transparency = 1
        verticalSeparator.Transparency = 1

        for _, tab in ipairs(tabContainer:GetChildren()) do
            if tab:IsA("TextButton") then
                tab.TextTransparency = 1
                if tab:FindFirstChild("TextOutline") then
                    tab.TextOutline.Transparency = 1
                end
                if tab:FindFirstChild("UIStroke") then
                    tab.UIStroke.Transparency = 1
                end
            end
        end

        -- Fix: Use TweenService for smooth animation and ensure properties are set correctly
        TweenService:Create(mainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, 700, 0, 380)}):Play()
        TweenService:Create(mainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundTransparency = 0.1}):Play()
        TweenService:Create(titleText, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {TextTransparency = 0}):Play()
        TweenService:Create(closeBtn, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {TextTransparency = 0}):Play()
        TweenService:Create(topSeparator, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Transparency = 0}):Play()
        TweenService:Create(verticalSeparator, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Transparency = 0}):Play()

        for _, tab in ipairs(tabContainer:GetChildren()) do
            if tab:IsA("TextButton") then
                TweenService:Create(tab, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {TextTransparency = 0.5}):Play()
                if tab:FindFirstChild("TextOutline") then
                    TweenService:Create(tab.TextOutline, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Transparency = 0.5}):Play()
                end
                if tab:FindFirstChild("UIStroke") then
                    TweenService:Create(tab.UIStroke, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Transparency = 0.5}):Play()
                end
            end
        end
        -- Set the first tab as active after animation
        if #tabContainer:GetChildren() > 0 then
            switchTab(tabContainer:GetChildren()[1].Name)
        end
    end

    -- Initial call to openAnimation
    openAnimation()

    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "SOULS HUB",
        Text = "UI successfully initialized!",
        Duration = 5
    })

    return window
end

return SoulsHub

